<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KING]]></title>
  <link href="http://pbking1.github.com/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-02-08T22:27:03-05:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intro_to_microeconomic_8]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-8/"/>
    <updated>2015-02-08T22:02:14-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-8</id>
    <content type="html"><![CDATA[<h3>goal part8</h3>

<ul>
<li>C.Publicpolicytopromotecompetition

<ul>
<li>1.Antitrust policy</li>
<li>2.Regulation</li>
</ul>
</li>
<li>D.Income distribution

<ul>
<li>1.Equity</li>
<li>2.Sources of income ineqiality</li>
</ul>
</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro_to_microeconomic_7]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-7/"/>
    <updated>2015-02-08T22:02:10-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-7</id>
    <content type="html"><![CDATA[<h3>goal part7</h3>

<ul>
<li>Market Failure and the Role of Government (12%–18%)

<ul>
<li>A.Externalities

<ul>
<li>1.Marginal social benefit and marginal social cost</li>
<li>2.Positive Externalities</li>
<li>3.Negative externalities</li>
<li>4.Remedies</li>
</ul>
</li>
<li>B.Publicgoods

<ul>
<li>1.Public versus private goods</li>
<li>2.Provision of public goods</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro_to_microeconomic_6]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-6/"/>
    <updated>2015-02-08T22:02:06-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-6</id>
    <content type="html"><![CDATA[<h3>goal part6</h3>

<ul>
<li>Factor Markets (10%–18%)

<ul>
<li>A.Derived factor demand</li>
<li>B.Marginal revenue product</li>
<li>C.Labor market and firms’ hiring of labor</li>
<li><ol type="a">
<li>Market distribution of income</li>
</ol>
</li>
</ul>
</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro_to_microeconomic_5]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-5/"/>
    <updated>2015-02-08T22:02:03-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-5</id>
    <content type="html"><![CDATA[<h3>goal part5</h3>

<ul>
<li>Firm behavior and market structure (25%–35%)

<ul>
<li>1.Profit:

<ul>
<li>a.Accounting versus economic profits</li>
<li>b.Normal profit</li>
<li>c.Profit maximization: MR=MC rule</li>
</ul>
</li>
<li>2.Perfect competition

<ul>
<li>a.Profit maximization</li>
<li>b.Short-run supply and shut-down decision</li>
<li>c.Firm and market behaviors in short-run and long-run equilibria</li>
<li>d.Efficiency and perfect competition</li>
</ul>
</li>
<li>3.Monopoly

<ul>
<li>a.Sources of market power</li>
<li>b.Profit maximization</li>
<li>c.Inefficiency of monopoly</li>
<li>d.Price discrimination</li>
</ul>
</li>
<li>4.Oligopoly

<ul>
<li>a.Interdependence, collusion and cartels</li>
<li>b.Game theory and strategic behavior</li>
</ul>
</li>
<li>5.Monopolistic competition

<ul>
<li>a.Product differentiation and role of advertising</li>
<li>b.Profit maximization</li>
<li>c.Short-run and long-run equilibrium</li>
<li>d.Excess capacity and inefficiency</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro_to_microeconomic_4]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-4/"/>
    <updated>2015-02-08T21:56:16-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-4</id>
    <content type="html"><![CDATA[<h3>goal detail</h3>

<ul>
<li>Production and costs(10%–15%)

<ul>
<li>1.Production functions: short and long run</li>
<li>2.Marginal product and diminishing returns</li>
<li>3.Short-run costs</li>
<li>4.Long-run costs and economies of scale</li>
<li>5.cost minimizing input combination</li>
</ul>
</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro_to_microeconomic_3]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-3/"/>
    <updated>2015-02-08T21:56:14-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-3</id>
    <content type="html"><![CDATA[<h3>goal part3</h3>

<ul>
<li>Theory of consumer choice(5%–10%)

<ul>
<li>1.Total utility and marginal utility</li>
<li>2.Utility maximization: equalizing marginal utility per dollar</li>
<li>3.Individual and market demand curves</li>
<li>4.Income and substitution effects</li>
</ul>
</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro_to_microeconomic_2]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-2/"/>
    <updated>2015-02-08T21:55:55-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-2</id>
    <content type="html"><![CDATA[<h3>goal part2</h3>

<ul>
<li>Supply and demand(15%–20%)

<ul>
<li>1.Market equilibrium</li>
<li>2.Determinants of supply and demand</li>
<li>3.Price and quantity controls</li>
<li>4.Elasticity

<ul>
<li>a.Price, income and cross-price elasticities of demand</li>
<li>b.Price elasticity of supply</li>
</ul>
</li>
<li>5.Consumer surplus, producer surplus and market efficiency</li>
<li>6.Tax incidence and deadweight loss</li>
</ul>
</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro_to_microeconomic_1]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-1/"/>
    <updated>2015-02-08T21:53:03-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/08/intro-to-microeconomic-1</id>
    <content type="html"><![CDATA[<h3>goal part1</h3>

<ul>
<li>Basic Economic Concepts (8%–14%)

<ul>
<li>A.Scarcity,choice and opportunity costs</li>
<li>B.Production possibilities curve</li>
<li>C.Comparative advantage, specialisation and trade</li>
<li>D.Economic systems</li>
<li>E.Property rights and the role of incentives</li>
<li>F.Marginal analysis</li>
</ul>
</li>
</ul>


<!--more-->


<h4>Scarcity稀缺性,choice and opportunity costs机会成本</h4>

<ul>
<li>Scarcity means the society have limited resource

<ul>
<li>and economic is to study how to manage your own scarify resource</li>
</ul>
</li>
<li>choice and opportunity costs

<ul>
<li>The opportunity cost of a thing is the cost you need to pay to get it.</li>
<li>when people decide to do something, they need to compare the plan they have.

<h4>Production possibilities curve</h4></li>
</ul>
</li>
</ul>


<h4>Comparative advantage, specialisation适应化 and trade</h4>

<h4>Economic systems</h4>

<h4>Property rights财产权 and the role of incentives激励</h4>

<h4>Marginal analysis 边际分析</h4>

<ul>
<li>marginal action

<ul>
<li>when you come up with a decision, you need to consider the next decision first

<ul>
<li>I think actually it is the prediction</li>
<li>for example

<ul>
<li>if you want to hire a new worker, you will consider the additional cost that hiring the worker might cost. And the value that the worker might bring you.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xapian_tutorial_3]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/06/xapian-tutorial-3/"/>
    <updated>2015-02-06T02:50:50-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/06/xapian-tutorial-3</id>
    <content type="html"><![CDATA[<h4>filter</h4>

<ul>
<li>There is a <code>faceted Search</code>, which is to preview the result of the query in many category.

<ul>
<li>like if we search for &lsquo;apple&rsquo;

<ul>
<li>the result may be classified into two

<ul>
<li>one is apple fruit</li>
<li>one is apple company</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>actually, this is a filter.

<ul>
<li>we can classify before index, and store into index</li>
<li>and use value to filter them when query</li>
</ul>
</li>
</ul>


<!--more-->


<h4>how to build filter value</h4>

<ul>
<li>use <code>Document::add_value</code></li>
</ul>


<h4>how to use filter when query</h4>

<ul>
<li>two ways

<ul>
<li>one is use <code>Xapian::MatchDecider</code>, this return a bool value.

<ul>
<li>or we can use <code>Xapian::ValueSetMatchDecider</code>

<ul>
<li><code>Xapian::ValueSetMatchDecider(slot, inclusive)</code>

<ul>
<li>slot means which slot to filter</li>
<li>inclusive means using filter or reduce</li>
</ul>
</li>
<li>use <code>Xapian::ValueSetMatchDecider::add_value(string)</code>

<ul>
<li>user can decide one or many set of value

<ul>
<li>when document belong to one of these value

<ul>
<li>make it filter or stay</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>use <code>MatchSpy</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[public speech note]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/05/public-speech-note/"/>
    <updated>2015-02-05T22:50:10-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/05/public-speech-note</id>
    <content type="html"><![CDATA[<h3>public speech technic note</h3>

<h4>audience</h4>

<ul>
<li>focus on a single person

<ul>
<li>reduce pressure</li>
</ul>
</li>
<li>audience is very important</li>
<li>help emotionally connect to audience</li>
<li>help you visualise one single person to talk to</li>
</ul>


<!--more-->


<h4>venue(speech place)</h4>

<ul>
<li>room dynamic

<ul>
<li>size and shape</li>
<li>how many seats</li>
<li>raised stage</li>
<li>floor plan</li>
<li>anything unusual</li>
</ul>
</li>
<li>audience dynamic

<ul>
<li>broad room style</li>
<li>line style</li>
<li>meeting style</li>
</ul>
</li>
<li>speaker equipment

<ul>
<li>ask for any equipment I may need</li>
</ul>
</li>
</ul>


<h4>develop personal credibility</h4>

<ul>
<li>make people believe you speak</li>
<li>introduction is very important</li>
<li>use confidence and competence to build credibility

<ul>
<li>confidence

<ul>
<li>dress appropriately

<ul>
<li>find an insider to tell you</li>
</ul>
</li>
<li>use non-verbal skills

<ul>
<li>make eye contact</li>
<li>let the audience to look at your body</li>
</ul>
</li>
<li>sound confidence

<ul>
<li>first sound must be clear</li>
</ul>
</li>
</ul>
</li>
<li>demonstrate(prove) competence

<ul>
<li>speak the topic you familiar about</li>
<li>share your experience

<ul>
<li>just a brief detail</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>generate idea for the speech</h4>

<ul>
<li>collect ideas

<ul>
<li>use note</li>
<li>use card</li>
</ul>
</li>
<li>open your mind</li>
<li>note the idea

<ul>
<li>fact and information</li>
<li>stories</li>
<li>things that inspires you</li>
</ul>
</li>
</ul>


<h4>find the story</h4>

<ul>
<li>story trigger

<ul>
<li><strong>something happens to someone</strong>

<ul>
<li>why happen</li>
</ul>
</li>
<li>what is the story behind the number</li>
<li>what did she do differentlyy</li>
</ul>
</li>
<li>who, what, where, when</li>
<li>overcome obstacles</li>
<li>using creativity</li>
<li>tell the story according to the fact</li>
</ul>


<h4>building story broad</h4>

<ul>
<li>recall key details</li>
<li>draw the step</li>
</ul>


<h4>rehearsing(排练)</h4>

<ul>
<li>rehearse the position(sitting or standing)</li>
<li>rehearse the actual clothes</li>
<li>use a real audience</li>
<li>record and watch yourself</li>
<li>listen to yourself</li>
<li>rehearse the real hours</li>
</ul>


<h4>warming up</h4>

<ul>
<li>in the morning

<ul>
<li>do not clearing your throat</li>
<li>get up early</li>
<li>avoid cold drinks</li>
<li>sing, talk or hum(use your voice before speech)</li>
</ul>
</li>
<li>in the afternoon or night

<ul>
<li>save your voice</li>
<li>avoid caffeine</li>
<li>avoid CO2 drink</li>
</ul>
</li>
</ul>


<h4>saying yes to the microphone</h4>

<ul>
<li>test before start</li>
<li>may sound loud to you but not to the audience</li>
</ul>


<h4>nervous</h4>

<ul>
<li>keep hand behind your back and look up</li>
</ul>


<h4>strong opening</h4>

<ul>
<li>cold open

<ul>
<li>ask an open-ended question

<ul>
<li>do not ask yes-no question</li>
</ul>
</li>
<li>open with a story

<ul>
<li>have mystery</li>
</ul>
</li>
<li>tell them to image something

<ul>
<li>make your audience part of your presentation</li>
</ul>
</li>
<li>a quote or a fact

<ul>
<li>risk approach</li>
<li>use surprising fact</li>
</ul>
</li>
</ul>
</li>
<li>common mistake

<ul>
<li>un-original phrases</li>
<li>clearing your throat</li>
<li>technical issue</li>
<li>telling a joke</li>
</ul>
</li>
</ul>


<h4>introducing your agenda</h4>

<ul>
<li>the agenda

<ul>
<li>purpose</li>
<li>topic</li>
<li>participant</li>
<li>length</li>
</ul>
</li>
</ul>


<h4>use more vocal variety</h4>

<ul>
<li>声音起伏</li>
<li>volume

<ul>
<li>break a pattern</li>
</ul>
</li>
</ul>


<h4>eliminating crutch</h4>

<ul>
<li>when feel under pressure

<ul>
<li>try to relax</li>
</ul>
</li>
<li>reduce or avoid stress</li>
</ul>


<h4>how to use props(道具) and visual aids</h4>

<ul>
<li>demonstration

<ul>
<li>showing is far more effective than talking</li>
</ul>
</li>
<li>provide a graphic or chart</li>
<li>for dramatic fact</li>
<li>practise the props

<ul>
<li>if thing go wrong

<ul>
<li>how to recover</li>
</ul>
</li>
</ul>
</li>
<li>presentation is important</li>
</ul>


<h4>strong close</h4>

<ul>
<li>make the end word very clear</li>
<li>short summary</li>
<li>re-state title</li>
<li>call to action</li>
<li>a personal tagline</li>
<li>a quote</li>
<li>a final story

<ul>
<li>emotionally powerful</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xapian_tutorial_2]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/05/xapian-tutorial-2/"/>
    <updated>2015-02-05T19:54:20-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/05/xapian-tutorial-2</id>
    <content type="html"><![CDATA[<h3>The expand of synonym(同义词)</h3>

<ul>
<li>such as ‘I love you‘ and &lsquo;ILU&rsquo;</li>
<li>process to do this

<ul>
<li>Write the synonym into database

<ul>
<li>use <code>WriteDatabase::add_synonym(term,synonym)</code></li>
<li>but we can only do &lsquo;I love you&rsquo; &ndash;> &lsquo;ILU&rsquo;

<ul>
<li>if we want to reverse it, we need to add the reverse version</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>use the synonym when query</h3>

<ul>
<li>use <code>QueryParser::set_database()</code> to set db</li>
<li>when using the <code>QueryParser::set_database()</code>, the second parameter use <code>FLAG_SYNONYM</code> or <code>FLAG_AUTO_SYNONYMS</code></li>
<li><code>FLAG_SYNONYM</code> is the ~WORD format in the query sentence. expend the synonym of the word automatically</li>
<li><code>FLAG_AUTO_SYNONYMS</code> is expend all the phrase, do not need to write ~</li>
</ul>


<!--more-->


<h3>sample</h3>

<ul>
<li>makefile

<ul>
<li></li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    all:
</span><span class='line'>      g++ -o index -I/usr/local/include -l xapian index.cpp
</span><span class='line'>      g++ -o query -I/usr/local/include -l xapian query.cpp
</span><span class='line'>    clean:
</span><span class='line'>      rm -rf index index_data/ query</span></code></pre></td></tr></table></div></figure>


<ul>
<li>index.cpp</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> #include&lt;xapian.h&gt;
</span><span class='line'> #include&lt;iostream&gt;
</span><span class='line'> #include&lt;string&gt;
</span><span class='line'> using namespace std;
</span><span class='line'> #define CONTENT "70:69， I love you This is man basketball race history the smallest point difference race ， smile to last is east man Chinese 。 Which can be said ， This time is the most famous victory and can be said this is the most lucky resuly 。After the end of the game, the coach of the Chinese aa and The boss bb hang togetherm and the two guy are so happy that the chinese win。"
</span><span class='line'> #define INDEX_PATH "./index_data"
</span><span class='line'> #define WORD1 "I love you"
</span><span class='line'> #define WORD2 "ILU"
</span><span class='line'>int main(int argc, char *argv[]){
</span><span class='line'>try{
</span><span class='line'>  //The text to be indexed
</span><span class='line'>  string content(CONTENT);
</span><span class='line'>
</span><span class='line'>  //open a database and write
</span><span class='line'>  Xapian::WritableDatabase db(string(INDEX_PATH), Xapian::DB_CREATE_OR_OPEN);
</span><span class='line'>  
</span><span class='line'>  //term generator
</span><span class='line'>  Xapian::TermGenerator indexer;
</span><span class='line'>
</span><span class='line'>  //add synonym
</span><span class='line'>  db.add_synonym(string(WORD1), string(WORD2));
</span><span class='line'>
</span><span class='line'>  //Make document
</span><span class='line'>  Xapian::Document doc;
</span><span class='line'>  doc.set_data(content);
</span><span class='line'>  indexer.set_document(doc);
</span><span class='line'>  indexer.index_text(content);
</span><span class='line'>
</span><span class='line'>  //add document to db
</span><span class='line'>  db.add_document(doc);
</span><span class='line'>
</span><span class='line'>  //flush to disk
</span><span class='line'>  db.commit();
</span><span class='line'>
</span><span class='line'>}catch(const Xapian::Error &e){
</span><span class='line'>  cout&lt;&lt;e.get_description()&lt;&lt;endl;
</span><span class='line'>}
</span><span class='line'>return 0;}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>query.cpp</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> #include&lt;xapian.h&gt;
</span><span class='line'> #include&lt;iostream&gt;
</span><span class='line'> #include&lt;string&gt;
</span><span class='line'>using namespace std;
</span><span class='line'> #define QUERY "~ILU AND Chinese"
</span><span class='line'> #define INDEX_PATH "./index_data"
</span><span class='line'> #define F_DOCID 1
</span><span class='line'>int main(){
</span><span class='line'>  
</span><span class='line'>try{
</span><span class='line'>  //The string for query
</span><span class='line'>  string query_str(QUERY);
</span><span class='line'>  //open the database
</span><span class='line'>  Xapian::Database db(string(INDEX_PATH));
</span><span class='line'>  
</span><span class='line'>  //open search handle
</span><span class='line'>  Xapian::Enquire enquire(db);
</span><span class='line'>
</span><span class='line'>  //Parser Query
</span><span class='line'>  Xapian::QueryParser qp;
</span><span class='line'>  qp.set_database(db);
</span><span class='line'>  Xapian::Query query = qp.parse_query(query_str, Xapian::QueryParser::FLAG_SYNONYM);
</span><span class='line'>  cout&lt;&lt;"Query is "&lt;&lt;query.get_description()&lt;&lt;endl;
</span><span class='line'>
</span><span class='line'>  //find the top 10 result
</span><span class='line'>  enquire.set_query(query);
</span><span class='line'>  Xapian::MSet result = enquire.get_mset(0,10);
</span><span class='line'>  cout&lt;&lt;result.get_matches_estimated()&lt;&lt;" result found"&lt;&lt;endl;
</span><span class='line'>
</span><span class='line'>  //print the result
</span><span class='line'>  for(Xapian::MSetIterator iter = result.begin(); iter != result.end(); iter++){
</span><span class='line'>      Xapian::Document doc = iter.get_document();
</span><span class='line'>      cout&lt;&lt;iter.get_rank()&lt;&lt;": docid "&lt;&lt;doc.get_value(F_DOCID)&lt;&lt;", data"&lt;&lt;doc.get_data()&lt;&lt;endl;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}catch(const Xapian::Error e){
</span><span class='line'>  cout&lt;&lt;e.get_description()&lt;&lt;endl;
</span><span class='line'>}
</span><span class='line'>return 0;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xapian_tutorial_1]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/05/xapian-tutorial-1/"/>
    <updated>2015-02-05T16:40:48-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/05/xapian-tutorial-1</id>
    <content type="html"><![CDATA[<ul>
<li>note:some of the content and code are refer from <a href="http://www.coder4.com/archives/2218">http://www.coder4.com/archives/2218</a></li>
</ul>


<h3>basic index build and search</h3>

<ul>
<li>first of all, xapian is an open source c++ search engine.</li>
<li>also note that xapian is called &ldquo;Zap-in&rdquo;</li>
</ul>


<!--more-->


<h4>basic data structure</h4>

<ul>
<li>used for search

<ul>
<li><code>Xapian::Database</code>

<ul>
<li>used to read index</li>
</ul>
</li>
<li><code>Xapian::Enquire</code>

<ul>
<li>use with Database</li>
<li>use to search</li>
</ul>
</li>
<li><code>Xapian::QueryParser</code>

<ul>
<li>query sentence parser</li>
</ul>
</li>
<li><code>Xapian::Query</code>

<ul>
<li>query</li>
</ul>
</li>
<li><code>Xapian::MSet</code>

<ul>
<li>the result set returned by searching</li>
</ul>
</li>
</ul>
</li>
<li>used for build index

<ul>
<li><code>Xapian::WritableDatabase</code>

<ul>
<li>use for built index</li>
</ul>
</li>
<li><code>Xapian::TermGenerator</code>

<ul>
<li>use for cut sentence, build index.</li>
</ul>
</li>
</ul>
</li>
<li>for both

<ul>
<li><code>Xapian::Document</code>

<ul>
<li>abstract of document</li>
</ul>
</li>
<li> <code>Xapian::SimpleStopper</code>

<ul>
<li> the word used for ending</li>
</ul>
</li>
<li> <code>Xapian::Error</code>

<ul>
<li> exception</li>
<li> use get_description() to get detailed info.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>how to build index</h4>

<ul>
<li>open a <code>Xapian::WritableDatabase</code></li>
<li>Then prepare for the document

<ul>
<li>use <code>set_data(string)</code> to set data(only one)</li>
<li>use <code>add_value(slot, string)</code> to set field(can have more), slot can not be -1</li>
<li>these two method is only used for storage

<ul>
<li>not used for parse or index</li>
</ul>
</li>
</ul>
</li>
<li>build index field

<ul>
<li>use <code>Document.add_term(word, pos)</code></li>
<li>use <code>Xapian::TermGenerator</code> and <code>.set_document(doc)</code>

<ul>
<li>then pass the string using delimiter space into index_text</li>
<li>then the doc will have the index field of this document</li>
</ul>
</li>
</ul>
</li>
<li>after building the document, import into database</li>
<li>use DB.commit()</li>
</ul>


<h4>how to query</h4>

<ul>
<li>open <code>Xapian::Database</code>, the path is the same as WriteableDatabase</li>
<li>use DB to construct <code>Xapian::Enquire</code></li>
<li>use <code>Xapian::QueryParser</code> to parse the string and generate <code>Xapian::Query</code></li>
<li>use <code>enquire.set_query()</code> to query</li>
<li>get the result set by using <code>enquire.get_mset(start, len)</code>.</li>
<li>use <code>Xapian::MsetIterator</code> to traverse the MSet.

<ul>
<li>use <code>get_rank()</code> to get the rank</li>
<li>use <code>get_document</code> to get the document</li>
</ul>
</li>
</ul>


<h4>query grammer</h4>

<ul>
<li><code>Term | Term | Term</code></li>
<li><code>Term -&gt; Term ~ Term</code>

<ul>
<li><code>~</code> is used for similar word</li>
</ul>
</li>
</ul>


<h4>About field</h4>

<ul>
<li>When building index

<ul>
<li>use <code>Xapian::TermGenerator</code> for example

<ul>
<li>we need to set the <code>TermGenerator.set_database(db)</code></li>
<li>when building the index field

<ul>
<li><code>index_text(text, wdf_inc=1, prefix)</code>

<ul>
<li>The second and third parameter are default</li>
<li>The second is TF increase</li>
<li>The third is prefix</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>When query

<ul>
<li>add mapping using <code>Xapian::QueryParser</code></li>
<li><code>.add_prefix("title", "T")</code></li>
<li>Then the <code>qp.parse_query</code> can have field when query the string</li>
<li>for example

<ul>
<li>&lsquo;title:news AND content:basketball&rsquo;</li>
<li>and now there are two field</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>sample code</h4>

<ul>
<li>create_index.cpp</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     #include&lt;xapian.h&gt;
</span><span class='line'>  #include&lt;iostream&gt;
</span><span class='line'>  #include&lt;string&gt;
</span><span class='line'>  using namespace std;
</span><span class='line'>
</span><span class='line'>  #define CONTENT "70:69， This is man basketball race history the smallest point difference race ， smile to last is east man Chinese 。 Which can be said ， This time is the most famous victory and can be said this is the most lucky resuly 。After the end of the game, the coach of the Chinese aa and The boss bb hang togetherm and the two guy are so happy that the chinese win。"
</span><span class='line'>
</span><span class='line'>  #define TITLE "This is a news"
</span><span class='line'>
</span><span class='line'>  #define INDEX_PATH "./index_data"
</span><span class='line'>
</span><span class='line'>  #define F_DOCID 1
</span><span class='line'>
</span><span class='line'>  int main(int argc, char *argv[]){
</span><span class='line'>      try{
</span><span class='line'>          //The text to be indexed
</span><span class='line'>          string content(CONTENT);
</span><span class='line'>          string title(TITLE);
</span><span class='line'>
</span><span class='line'>          //open a database and write
</span><span class='line'>          Xapian::WritableDatabase db(string(INDEX_PATH), Xapian::DB_CREATE_OR_OPEN);
</span><span class='line'>          
</span><span class='line'>          //term generator
</span><span class='line'>          Xapian::TermGenerator indexer;
</span><span class='line'>
</span><span class='line'>          //Make document
</span><span class='line'>          Xapian::Document doc;
</span><span class='line'>          doc.add_value(F_DOCID, string("1104"));
</span><span class='line'>          doc.set_data(content);
</span><span class='line'>          indexer.set_document(doc);
</span><span class='line'>          indexer.index_text(title, 1, "T");
</span><span class='line'>          indexer.index_text(content, 1, "C");
</span><span class='line'>
</span><span class='line'>          //add document to db
</span><span class='line'>          db.add_document(doc);
</span><span class='line'>
</span><span class='line'>          //flush to disk
</span><span class='line'>          db.commit();
</span><span class='line'>
</span><span class='line'>      }catch(const Xapian::Error &e){
</span><span class='line'>          cout&lt;&lt;e.get_description()&lt;&lt;endl;
</span><span class='line'>      }
</span><span class='line'>      return 0;
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>search.cpp</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include&lt;xapian.h&gt;
</span><span class='line'>#include&lt;iostream&gt;
</span><span class='line'>#include&lt;string&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>#define QUERY "title:news AND content:70"
</span><span class='line'>#define INDEX_PATH "./index_data"
</span><span class='line'>#define F_DOCID 1
</span><span class='line'>int main(){
</span><span class='line'>  try{
</span><span class='line'>      //The string for query
</span><span class='line'>      string query_str(QUERY);
</span><span class='line'>
</span><span class='line'>      //open the database
</span><span class='line'>      Xapian::Database db(string(INDEX_PATH));
</span><span class='line'>
</span><span class='line'>      //open search handle
</span><span class='line'>      Xapian::Enquire enquire(db);
</span><span class='line'>
</span><span class='line'>      //Parser Query
</span><span class='line'>      Xapian::QueryParser qp;
</span><span class='line'>      qp.add_prefix("title", "T");
</span><span class='line'>      qp.add_prefix("content", "C");
</span><span class='line'>      Xapian::Query query = qp.parse_query(query_str);
</span><span class='line'>      cout&lt;&lt;"Query is "&lt;&lt;query.get_description()&lt;&lt;endl;
</span><span class='line'>
</span><span class='line'>      //find the top 10 result
</span><span class='line'>      enquire.set_query(query);
</span><span class='line'>      Xapian::MSet result = enquire.get_mset(0,10);
</span><span class='line'>      cout&lt;&lt;result.get_matches_estimated()&lt;&lt;" result found"&lt;&lt;endl;
</span><span class='line'>
</span><span class='line'>      //print the result
</span><span class='line'>      for(Xapian::MSetIterator iter = result.begin(); iter != result.end(); iter++){
</span><span class='line'>          Xapian::Document doc = iter.get_document();
</span><span class='line'>          cout&lt;&lt;iter.get_rank()&lt;&lt;": docid "&lt;&lt;doc.get_value(F_DOCID)&lt;&lt;", data"&lt;&lt;doc.get_data()&lt;&lt;endl;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>  }catch(const Xapian::Error e){
</span><span class='line'>      cout&lt;&lt;e.get_description()&lt;&lt;endl;
</span><span class='line'>  }
</span><span class='line'>  return 0;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[difference between malloc and new in C++]]></title>
    <link href="http://pbking1.github.com/blog/2015/01/27/difference-between-malloc-and-new-in-c-plus-plus/"/>
    <updated>2015-01-27T15:30:52-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/01/27/difference-between-malloc-and-new-in-c-plus-plus</id>
    <content type="html"><![CDATA[<h3>new and delete</h3>

<ul>
<li>the way it allocate and release memory

<ul>
<li>the memory is allocate from <code>Free Store</code></li>
<li>will return a fully typed pointer

<ul>
<li>if failed will not return NULL</li>
</ul>
</li>
<li>the compiler will calculate the size</li>
<li>reallocate is not handled intuitively, using copy constructor</li>
<li>whether called malloc and delete can be user defined</li>
<li>can add a new memory allocator to deal with low memory</li>
<li>new and delete can be overwrite legally</li>
<li>use constructor/destructor to initial/destory object</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>new 动态创建和释放数组或者单个对象</p>

<ul>
<li>动态创建对象的时候，只需要指定其数据类型，不必为该对象命名</li>
<li>如果分配失败了，会抛出异常。</li>
<li>new 表达式返回指向该新建对象的指针</li>
<li>我们可以通过这个指针来访问新建的对象</li>
<li>int *p = new int

<ul>
<li>返回类型为int*类型， 分配大小为sizeof(int)</li>
</ul>
</li>
<li>int *p = new int[100]

<ul>
<li>返回类型为int*类型, 分配大小为sizeof(int) * 100</li>
</ul>
</li>
</ul>
</li>
<li><p>三种特殊指针</p>

<ul>
<li>void* 表示未确定类型的指针，更明确的说是指申请内存空间时还不知道user是用来储存什么类型的数据的。</li>
<li>零值指针：值为0的指针。可以是任何一种指针类型。</li>
<li>NULL指针：不提供任何地址信息的指针</li>
</ul>
</li>
<li><p>new 动态创建的对象是可以初始化的。</p>

<ul>
<li>e.g int *p = new int(1000)</li>
<li>如果不初始化，就会使用这个类的默认构造函数来初始化。

<ul>
<li>e.g int *p = new int()  //初始化为0</li>
</ul>
</li>
<li>但是如果对象是内置的，就没有初始化

<ul>
<li>e.g int *p = new int //指向一个没有初始化的int

<ul>
<li>string *str = new string()  //初始化为空串，因为string自带的默认构造函数会初始化为空串</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>delete</p>

<ul>
<li>delete p;

<ul>
<li>但是释放完p的内存之后，p会变成不确定的指针</li>
<li>因此要把p赋值为0

<ul>
<li>明确指针不再指向任何对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>malloc and free</h3>

<ul>
<li><p>the way it allocate and release memory</p>

<ul>
<li>the memory is allocate from <code>Heap</code></li>
<li>will return a void pointer

<ul>
<li>will return NULL if failed</li>
</ul>
</li>
<li>the space and size need to be specified(固定)</li>
<li>will not called new/delete</li>
<li>it is simple to reallocate large memory</li>
<li>user can not write code into allocation sequence to help with low memory</li>
<li>malloc/free can not be overriden legally</li>
</ul>
</li>
<li><p>malloc 动态内存分配</p>

<ul>
<li>void *malloc(int size)</li>
<li>向系统申请分配指定size个字节的内存空间</li>
<li>申请之后要检查是否分配成功</li>
<li>不用之后要释放：把纸箱这块内存的指针指向NULL, 防止程序不小心使用了它

<ul>
<li>如果忘了释放就是内存泄露</li>
</ul>
</li>
<li>操作系统中有一个记录空闲内存位置的链表，每次收到程序申请的时候，就会遍历这个链表，找到第一个空间大于申请的空间的堆节点，然后把该节点从链表中删除，把这个节点的空间分配给程序。</li>
<li> int p;

<ul>
<li>p = (int*)malloc(sizeof(int) * 128)</li>
<li>p指针会存储存储单元的首地址</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vi regular expression and data processing(1)]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/21/vi-regular-expression-1/"/>
    <updated>2014-11-21T15:07:04-05:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/21/vi-regular-expression-1</id>
    <content type="html"><![CDATA[<h3>data processing is very important before data mining</h3>

<ul>
<li>like if you are going to do some data mining in the linkedin public profile</li>
<li>1.find out the number of the people that have

<pre><code> - education
 - experience
 - skills
 - have all
</code></pre></li>
<li>2.find out all the skills and list the number of user who own them in a diagram</li>
<li>3.find out all the company number</li>
<li>4.find out all the people that is in US</li>
<li>5.find out all the education level of all people

<pre><code> - like undergraduate, graduate, phd
</code></pre></li>
<li>6.find out all the experience about job numbers

<pre><code> - like 1 job, 2 jobs, 3 jobs
</code></pre></li>
</ul>


<!--more-->


<h3>regular expression in VIM</h3>

<ul>
<li>delete the line that match the particular format

<ul>
<li>like match all the lines in a document that match &lsquo;name: current&rsquo;

<ul>
<li>:%s/^name:\tcurrent.*$//g</li>
<li>:%s/skill_num:0\n//g</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>count the number</h3>

<ul>
<li><p>the number of the education, the number of the experience and the number of the skill</p>

<ul>
<li>like

<ul>
<li>grep &lsquo;skill_num&rsquo; *.txt > ./checklist/skill_num.txt

<ul>
<li>:%s/output[1-9][0-9]*.txt:skill_num://

<ul>
<li>delete the tag</li>
</ul>
</li>
</ul>
</li>
<li>grep &lsquo;experience_num&rsquo; *.txt > checklist/exp_num.txt

<ul>
<li>:%s/output[1-9][0-9]*.txt:experience_number://

<ul>
<li>delete the tag</li>
</ul>
</li>
</ul>
</li>
<li>grep &lsquo;education_nun&rsquo; *.txt > ./checklist/edu_num.txt

<ul>
<li>:%s/output[1-9][0-9]*.txt:education_nun://

<ul>
<li>delete the tag before the number</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>use the number of the education, experience and skills to plot the tendency</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clear all;
</span><span class='line'>clc;
</span><span class='line'>edu = csvread('edu.csv');
</span><span class='line'>exp = csvread('exp.csv');
</span><span class='line'>skill = csvread('skill.csv');
</span><span class='line'>
</span><span class='line'>figure
</span><span class='line'>
</span><span class='line'>%education number
</span><span class='line'>edu_res = zeros(size(edu));
</span><span class='line'>edu = sort(edu);
</span><span class='line'>for i=1:size(edu)-1
</span><span class='line'>   if edu(i) == edu(i + 1)
</span><span class='line'>       edu_res(edu(i)) = edu_res(edu(i)) + 1;
</span><span class='line'>   elseif edu(i) ~= edu(i + 1)
</span><span class='line'>       edu_res(edu(i+1)) = edu_res(edu(i+1)) + 1;
</span><span class='line'>   end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>subplot(3,1,1); %add plot into one image
</span><span class='line'>plot(edu_res(1:15, :));
</span><span class='line'>title('education line plot')
</span><span class='line'>xlabel('index of education number')
</span><span class='line'>ylabel('number of the people')
</span><span class='line'>
</span><span class='line'>%experience number
</span><span class='line'>exp_res = zeros(size(exp));
</span><span class='line'>exp = sort(exp);
</span><span class='line'>for i=1:size(exp)-1
</span><span class='line'>   if exp(i) == exp(i + 1)
</span><span class='line'>       exp_res(exp(i)) = exp_res(exp(i)) + 1;
</span><span class='line'>   elseif exp(i) ~= exp(i + 1)
</span><span class='line'>       exp_res(exp(i+1)) = exp_res(exp(i+1)) + 1;
</span><span class='line'>   end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>subplot(3,1,2); %add plot into one image
</span><span class='line'>plot(exp_res(1:43, :));
</span><span class='line'>title('experience line plot')
</span><span class='line'>xlabel('index of experience number')
</span><span class='line'>ylabel('number of the people')
</span><span class='line'>
</span><span class='line'>%skill number
</span><span class='line'>skill_res = zeros(size(skill));
</span><span class='line'>skill = sort(skill);
</span><span class='line'>for i=1:size(skill)-1
</span><span class='line'>   if skill(i) == skill(i + 1)
</span><span class='line'>       skill_res(skill(i)) = skill_res(skill(i)) + 1;
</span><span class='line'>   elseif skill(i) ~= skill(i + 1)
</span><span class='line'>       skill_res(skill(i+1)) = skill_res(skill(i+1)) + 1;
</span><span class='line'>   end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>subplot(3,1,3); %add plot into one image
</span><span class='line'>plot(skill_res(1:50, :));
</span><span class='line'>title('skill line plot')
</span><span class='line'>xlabel('index of skill number')
</span><span class='line'>ylabel('number of the people')</span></code></pre></td></tr></table></div></figure>


<h3>diff the file</h3>

<ul>
<li>diff whole_file subfile | grep &ldquo;&lt; &rdquo; | sed &rsquo;s/&lt; //g&#8217;

<ul>
<li>using this command can get all the content in the subfile out of the wholefile</li>
</ul>
</li>
</ul>


<h3>if you want to separate one very long string</h3>

<ul>
<li>use &ldquo;\r&rdquo; to replace &ldquo;,&rdquo; not &ldquo;\n&rdquo; in vim</li>
<li>or use

<ul>
<li><code>tr ", " "\n"</code></li>
</ul>
</li>
</ul>


<h3>erase the empty line</h3>

<ul>
<li><code>sed 's/^*$//g' file</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iupui mason high performance mass]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/05/iupui-mason-high-performance-mass/"/>
    <updated>2014-11-05T20:55:25-05:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/05/iupui-mason-high-performance-mass</id>
    <content type="html"><![CDATA[<h3>In the iupui mason server</h3>

<ul>
<li>there are 20 server, each have 10 gigabit ethernet</li>
<li>4 cpu in each server

<ul>
<li>8 core processor each cpu</li>
<li>total 32 core in each server</li>
</ul>
</li>
<li>in the /scratch or /tmp there are total 400 GB disk storage

<ul>
<li>and the file will be delete after 14 days since they are created</li>
<li></li>
</ul>
</li>
</ul>


<!--more-->


<h3>when login</h3>

<ul>
<li>use &ldquo;<a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#x3a;&#117;&#x73;&#x65;&#x72;&#x6e;&#x61;&#109;&#101;&#64;&#x6d;&#x61;&#115;&#111;&#110;&#x2e;&#x69;&#110;&#100;&#105;&#97;&#110;&#x61;&#x2e;&#x65;&#x64;&#x75;">&#x75;&#115;&#x65;&#x72;&#x6e;&#x61;&#109;&#101;&#64;&#109;&#x61;&#x73;&#111;&#x6e;&#46;&#105;&#110;&#100;&#105;&#x61;&#x6e;&#97;&#x2e;&#101;&#100;&#x75;</a>&rdquo;

<ul>
<li>will result in two server

<ul>
<li>h1.mason.indiana.edu</li>
<li>h2.mason.indiana.edu</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>cpu/memory limit</h3>

<ul>
<li>user process on login node are limited to 20 minutes CPU time

<ul>
<li>if exceeded, will be killed automatically</li>
</ul>
</li>
<li>use TORQUE <code>qsub</code> to submit job that need more than 20 minutes cpu time

<ul>
<li><p><code>qsub</code></p>

<ul>
<li><code>qsub -l walltime=10:00:00 job.script</code>

<ul>
<li>for the system default time is 60 minutes

<ul>
<li>so use walltime to use more time</li>
</ul>
</li>
</ul>
</li>
<li><code>qsub -l nodes=1:ppn=2 job.script</code>

<ul>
<li>run the script in a node and using two core processers</li>
</ul>
</li>
<li><code>qsub -l nodes=4:ppn=31,vmem=100gb -l walltime=20:00:00 jobscript.script</code>

<ul>
<li>if use multi commands, use <code>-l</code> to separate the argument</li>
</ul>
</li>
</ul>
</li>
<li><p><code>qstat</code></p>

<ul>
<li><code>qstat -a</code>

<ul>
<li>display all job</li>
</ul>
</li>
<li><code>qstat -n</code>

<ul>
<li>list the nodes allocated to a job</li>
</ul>
</li>
<li><code>qstat -r</code>

<ul>
<li>list the job that are running</li>
</ul>
</li>
<li><code>qstat -u username@host</code>

<ul>
<li>display the job owned by the username</li>
</ul>
</li>
</ul>
</li>
<li><code>qdel</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to install python package on redhat without root access]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/01/how-to-install-python-package-on-redhat-without-root-access/"/>
    <updated>2014-11-01T00:01:13-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/01/how-to-install-python-package-on-redhat-without-root-access</id>
    <content type="html"><![CDATA[<h3>dependent of scrapy</h3>

<ul>
<li>remember that the scrapt need python2.7 to run</li>
<li>and there will be lots of package need to be installed</li>
</ul>


<h3>What to do when need to install python package on the server without root access</h3>

<ul>
<li>today I went through a problem that I want to have the python package installed on the high performance server but without the root access</li>
<li>and what I need to do is to install the python 2.7.3 first and then install all the package that scrapy need and finaly get scrapy run</li>
</ul>


<!--more-->


<h3>process I use</h3>

<ul>
<li>And one most important things you need to care about is that

<ul>
<li><p>first install python</p>

<ul>
<li>download the python first and compile the package of it.</li>
<li>then remember the export the python path to the .bashrc and .bash_profile</li>
<li>so that when you simply type <code>python</code> it will not use the default setting of the system</li>
<li>or you can type the absolute path of the python and use the python in the bin directory</li>
</ul>
</li>
<li><p>then install the scrapy from source</p>

<ul>
<li><p>but when you finish install the scrapy</p>

<ul>
<li>you will find out that it will tell you that you do not have some package like Twist , zope, interface and lxml, and cssselect</li>
<li>so what you need to do is to fix all this missing stuff</li>
<li>so use <code>wget</code> to download the source file of these missing file and install them</li>
</ul>
</li>
<li><p>the will comes the most difficult part</p>

<ul>
<li>when you try to install the lxml

<ul>
<li>you will find out that the system do not have the require of the lxml package

<ul>
<li>the libxml2 and libxslt</li>
<li>so what you need to do is to download all the file</li>
<li>and build it from source

<ul>
<li>and remember to add prefix and correct all the path error</li>
<li>and it would be a good way to output the error log to a file and analyze them using the <code>&gt;&amp; output file</code></li>
<li><strong>and do not hesitate to modify the Makefile or setup.py file when neccessary</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>also there are problem when try to install cffi and libffi

<ul>
<li>when compile the libffi library

<ul>
<li>remember to include the path of the libffi library when building the cffi

<ul>
<li>use <code>build_ext -l library_absolute_path -l library2_absolute_path</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>after install the scrapy successfully

<ul>
<li>use the scrapy executable file in the bin of the scrapy source code</li>
<li><code>python2.7 ./scrapy crawl linkedin.com</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014_indianapolis_redefined_hackathron]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/30/2014-indianapolis-redefined-hackathron/"/>
    <updated>2014-10-30T21:25:44-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/30/2014-indianapolis-redefined-hackathron</id>
    <content type="html"><![CDATA[<h3>The hackathron take 24 hours to write an app that can be used for attracting people to indianapolis</h3>

<ul>
<li>and I first design a python version of app</li>
<li>then I use bootstrap theme to develop a mobile compatible web app with php link to the mysql database.</li>
</ul>


<!--more-->


<h3>The code</h3>

<ul>
<li>I have already post the code in github</li>
<li><a href="https://github.com/pbking1/Intro-to-indy">https://github.com/pbking1/Intro-to-indy</a></li>
</ul>


<h3>The summary</h3>

<ul>
<li>using the bootstrap theme can minimise the work in the front end and make the development focus more on the back end logic or database.</li>
<li>talking to a mentor will definitaly help you develop a better software</li>
<li>read the description document carefully before coding</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[database_and_backend_injection]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/23/database-and-backend-injection/"/>
    <updated>2014-10-23T09:13:16-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/23/database-and-backend-injection</id>
    <content type="html"><![CDATA[<h3>database ER diagram</h3>

<ul>
<li><img src="http://pbking1.github.com/images/php_project/lab4_db.jpg"></li>
<li>some change in the database <strong>relationship</strong></li>
<li><img src="http://pbking1.github.com/images/php_project/database_lingma_structure.png" style="height: 300px; width: 300px"></li>
<li>we have

<ul>
<li>T_ADMIN</li>
<li>T_USER</li>
<li>T_USER_CLASS</li>
<li>T_PROJECT</li>
<li>T_PRO_LEVEL</li>
<li>T_PROJECT_STATISTICS</li>
<li>T_TASK</li>
<li>T_SUBTASK</li>
<li>T_MATERIAL</li>
<li>T_CUSTOMER</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><strong>Table structure</strong></li>
<li><img src="http://pbking1.github.com/images/php_project/1.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/2.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/3.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/4.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/5.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/6.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/7.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/8.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/9.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/10.png">

<h3>database insertion</h3></li>
<li>database connection</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$conn = mysql_connect("localhost","pengbin","pengbin");
</span><span class='line'>mysql_select_db("pengbin_db", $conn);</span></code></pre></td></tr></table></div></figure>


<ul>
<li>database insertion</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sql = "insert into T_CUSTOMER (CustomerName, CustomerAddress, Notes, Active) values ('$_POST[name]','$_POST[address]','$_POST[note]','$_POST[Active]')";
</span><span class='line'>mysql_query($sql, $conn);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python regular expression]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/03/python-regular-expression/"/>
    <updated>2014-10-03T13:00:03-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/03/python-regular-expression</id>
    <content type="html"><![CDATA[<h3>regular expression</h3>

<ul>
<li>use the match string

<ul>
<li>but not all the string can be matched</li>
</ul>
</li>
</ul>


<!--more-->


<h3>basic character in python</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import re</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ordinary character

<ul>
<li>like re&#8217;test&#8217; will match the string test</li>
</ul>
</li>
<li>oral character

<ul>
<li>like . ^ $ * + ? {} [] \ | ()</li>
<li>like []

<ul>
<li>use to direct to a range of the string set</li>
<li><code>
s = r'abc'
re.findall(s, "aaaaaaaabc")
//use []
rt = "top tip tap twp tep"
r1 = r"t[io]p"
re.findall(r1, rt)
//output ['top'], ['tip']
r2 = r"t[^io]p"
re.findall(r2, rt)
//output ['tap'],['tep'], ['twp']
</code></li>
<li>and oral character is no use in the []</li>
<li>also can use <code>r'0-3'</code> replace <code>r'0123'</code>

<ul>
<li>use &lsquo;r&rsquo;[0-3a-cA-C]&lsquo;&rsquo; replace <code>r'[0123abcABC]'</code></li>
</ul>
</li>
</ul>
</li>
<li>like ^

<ul>
<li>use the match the head of the line</li>
<li><code>
s = r'^t'
st = 'tss'
//output ['t']
</code></li>
</ul>
</li>
<li>like $

<ul>
<li>use to match the end of the line</li>
</ul>
</li>
<li>like \

<ul>
<li>used if you want to transform the oral character into a original one</li>
<li>use &lsquo;^&rsquo; to make ^ as a original character</li>
<li>and can be used as

<ul>
<li>\d match [0-9]</li>
<li>\D match [^0-9]</li>
<li>\s match [\t\n\r\f\v]

<ul>
<li>means and empty character</li>
</ul>
</li>
<li>\S match [^\t\n\r\f\v]

<ul>
<li>means non empty character</li>
</ul>
</li>
<li>\w match [a-zA-Z0-9]</li>
<li>\W match [^a-zA-Z0-9]</li>
</ul>
</li>
</ul>
</li>
<li>like *

<ul>
<li>match multiple character</li>
<li>means repeat the character in front of the * for 0-many times</li>
<li><code>
r = r'ab*'
rt = 'abbbbbb'
re.findall(r, rt)
//output['abbbbbb']
</code></li>
</ul>
</li>
<li>like +

<ul>
<li>match the charter that appear more than one time</li>
</ul>
</li>
<li>like ?

<ul>
<li> match the charter that appear zero or one time</li>
<li>can be used as minimum match

<ul>
<li><code>r = r'ab+?'</code></li>
<li><code>rt = 'abbbbbb'</code></li>
<li>output the ab</li>
</ul>
</li>
</ul>
</li>
<li>like the {}

<ul>
<li>means that the character can be repeat how many times</li>
<li><code>
r = r'a{1,3}'
rt = 'aaaaa'
then can match a, aa, aaa
</code></li>
<li>{0,} == *</li>
<li>{1,} == +</li>
<li>{0,1} == ?</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>functions</h3>

<ul>
<li>compile the expression to speed up

<ul>
<li><code>
r = r'\d{3,4}-?\d{8}'
p_telephone = re.compile(r)
p_telephone.findall('010-12345678')
//output ['010-12345678']
</code></li>
<li>and you can add attribute while compile</li>
</ul>
</li>
<li><p>there are some normal functions</p>

<ul>
<li>match

<ul>
<li>only search from the front</li>
<li><code>
p_telephone.match('o010-12345678')
//output nothing because the 010-12345678 is not start from the begin
</code></li>
</ul>
</li>
<li>search

<ul>
<li>search the whole string</li>
<li>no matter where the number is , if you can find it, you can find it.</li>
</ul>
</li>
<li>findall</li>
<li>finditer

<ul>
<li>the same as findall but you need to use iter so that you can get the value</li>
</ul>
</li>
</ul>
</li>
<li><p>and there are sub(), subn(), split()</p>

<ul>
<li>sub()

<ul>
<li><code>
r = r'c..t'
re.sub(r, 'aaa', 'caat cast cccc')
//output 'aaa aaa cccc'
</code></li>
</ul>
</li>
<li>subn()

<ul>
<li>the difference between sub and subj is that subj provide a count of the how many stuff you replace</li>
<li><code>
r = r'c..t'
re.subn(r, 'aaa', 'caat cast cccc')
//output 'aaa aaa cccc', 2
</code></li>
</ul>
</li>
<li>split()

<ul>
<li>split the string using a regular express</li>
<li><code>
re.split(r'[\+\*\-]', '1+2-3*5')
//output ['1', '2', '3', '5']
</code></li>
</ul>
</li>
<li>use <code>dir(re)</code> to see what functions re have</li>
</ul>
</li>
</ul>


<h3>flags in re module</h3>

<table>
<thead>
<tr>
<th>flags </th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>dotall, S</td>
<td> let . match all the character contains \n</td>
</tr>
<tr>
<td>ignore case, I </td>
<td>make the match no sensitive about the uppercase and lowercase</td>
</tr>
<tr>
<td>locale, L </td>
<td> do locale-aware match, match the French or the other language</td>
</tr>
<tr>
<td>multiline, M </td>
<td> match multiline, affect ^ and $</td>
</tr>
<tr>
<td>verbose, X </td>
<td> can use the REs verbose status, and make the organise more clearly</td>
</tr>
</tbody>
</table>


<h3>devision</h3>

<ul>
<li>()</li>
<li><code>email = r'\w{3}@\w+(\.com|\.cn)'</code></li>
<li>use the () to divide the .com and .cn</li>
<li>so that we can use the regular form to match email address</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mpi_parallel_programming_2]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-2/"/>
    <updated>2014-09-15T15:28:34-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-2</id>
    <content type="html"><![CDATA[<h3>data type</h3>

<ul>
<li><p>there are only these data type in the MPI</p>

<ul>
<li>if you want to use struct or multi array, you need to do something else</li>
</ul>
</li>
<li><table>
<thead>
<tr>
<th></th>
<th>MPI data type</th>
<th> c data type</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>MPI_CHAR</td>
<td>signed char|</td>
</tr>
<tr>
<td></td>
<td>MPI_SHORT</td>
<td>signed short int|</td>
</tr>
<tr>
<td></td>
<td>MPI_INT</td>
<td>signed int|</td>
</tr>
<tr>
<td></td>
<td>MPI_LONG</td>
<td>signed long int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED_CHAR</td>
<td>unsigned long int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED_SHORT</td>
<td>unsigned short int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED</td>
<td>unsigned int|</td>
</tr>
<tr>
<td></td>
<td>MPI_FLOAT</td>
<td>float|</td>
</tr>
<tr>
<td></td>
<td>MPI_DOUBLE</td>
<td>double|</td>
</tr>
<tr>
<td></td>
<td>MPI_LONG_DOUBLE</td>
<td>long double|</td>
</tr>
<tr>
<td></td>
<td>MPI_BYTE</td>
<td>|</td>
</tr>
<tr>
<td></td>
<td>MPI_MPI_PACKED</td>
<td>|</td>
</tr>
</tbody>
</table>
</li>
</ul>


<!--more-->


<h3>about the status</h3>

<ul>
<li>the MPI_status combine a lots of information

<ul>
<li>there are at least three member in the status

<ul>
<li>MPI_SOURCE, MPI_TAG, MPI_ERROR</li>
</ul>
</li>
</ul>
</li>
<li>and we can get the size of the message using

<ul>
<li>MPI_Get_Count(MPI_Status <em>status, MPI_Datatype datatype, int</em> count_ptr);</li>
</ul>
</li>
</ul>


<h3>The broadcast idea</h3>

<ul>
<li>you can use the MPI_Bcast idea to send the message to all the other process;

<ul>
<li>MPI_Bcast(void *message, int count, MPI_Datatype datatype, int root, MPI_Comm comm)</li>
</ul>
</li>
</ul>


<h3>gather the data and scatter the data</h3>

<ul>
<li>use MPI_Gather

<ul>
<li>MPI_Gather(void <em>send_data, int send_count, MPI_Datatype send_type, void</em> recv_data, int recv_count, MPI_Datatype recv_type, int root, MPI_Comm comm)</li>
</ul>
</li>
<li>use MPI_Scatter to scatter the data

<ul>
<li>MPI_Scatter(void <em>send_data, int send_count, MPI_Datatype send_type, void </em>recv_data, int recv_count, MPI_Datatype recv_type, int root, MPI_Comm comm);</li>
<li>MPI_Scatter split the data referenced by send_data on the process with rank root into k segment.each of which consists of send_count elements of type send_type.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
