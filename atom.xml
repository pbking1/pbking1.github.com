<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KING]]></title>
  <link href="http://pbking1.github.com/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2014-06-02T16:38:55+08:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matlab Classification Method]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/02/matlab-classification-method/"/>
    <updated>2014-06-02T15:15:11+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/02/matlab-classification-method</id>
    <content type="html"><![CDATA[<h3>The method in the system</h3>

<ul>
<li>MultiNomial logistic Regressoin

<ul>
<li>bad in high dimension

<ul>
<li><code>Factor = mnrfit(train_data, train_label);</code></li>
<li><code>scores = mnrval(Factor, test_data);</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>Random Forest</p>

<ul>
<li>good classifier</li>
<li>score is the probability output

<ul>
<li><code>Factor = TreeBagger(numberoftree, train_data, train_label);</code></li>
<li><code>[predict_label, scores] = predict(Factor, test_data);</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Navie Bayes</p>

<ul>
<li><code>Factor = NaiveBayes(train_data, train_label);</code></li>
<li><code>Scores = posterior(Factor, test_data);</code></li>
<li><code>[Scores, predict_label] = posterior(Factor, test_data);</code></li>
<li><code>predict_label = predict(Factor, test_data);</code></li>
<li><code>accuracy = length(find(predict_label == test_label))/length(test_label)*100;</code></li>
</ul>
</li>
<li>SVM

<ul>
<li><code>Factor = svmtrain(train_label, train_data, '-b 1');</code></li>
<li><code>[predict_label, accuracy, scores] = svmpredict(test_label, test_data, Factor, '-b 1');</code></li>
</ul>
</li>
<li>KNN

<ul>
<li><code>predict_label = knnclassify(test_data, train_data, train_label, num_neighbors);</code></li>
<li>In matlab 2012

<ul>
<li><code>Factor = ClassificationKNN.fit(train_data, train_label, 'NumNeighbors', numofneighbours);</code></li>
<li><code>[predict_label, scores] = predict(Factor, test_data);</code></li>
</ul>
</li>
</ul>
</li>
<li>Ensembles for boosting, Bagging or Random Subspace

<ul>
<li>In matlab2012

<ul>
<li><code>Factor = fitensemble(train_data, train_label, 'AdaBoostM2', 100, 'tree');</code></li>
<li><code>Factor = fitensemble(train_data, train_label, 'AdaBoostM2', 100, 'tree', 'type', 'classification');</code></li>
<li><code>Factor = fitensemble(train_data, train_label, 'SubSpace', 50, 'KNN');</code></li>
<li><code>[predict_label, scores] = predict(Factor, test_data);</code></li>
</ul>
</li>
</ul>
</li>
<li>discriminant analysis classifier

<ul>
<li><code>Factor = ClassificationDiscriminant(train_data, train_label);</code></li>
<li><code>Factor = ClassificationDiscriminant(train_data, train_label, 'discrimType', 'non-linear...');</code></li>
<li><code>[predict_label, scores] = predict(Factor, test_data);</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Array Type Change]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/02/matlab-array-type-change/"/>
    <updated>2014-06-02T14:57:28+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/02/matlab-array-type-change</id>
    <content type="html"><![CDATA[<h3>How to convert between cell, double and char array?</h3>

<ul>
<li>there are three type of array in matlab

<ul>
<li>cell array</li>
<li>double array</li>
<li>char array</li>
</ul>
</li>
</ul>


<!--more-->


<h4>How to convert double array to char array?</h4>

<ul>
<li>use <code>num2str</code> or <code>mat2str</code></li>
</ul>


<h4>How to convert char array to double array?</h4>

<ul>
<li>use <code>str2num</code>&lt;0.0001> and <code>str2double</code>&lt;0.01></li>
</ul>


<h4>How to convert cell array to char array?</h4>

<ul>
<li>use <code>cell2mat</code></li>
</ul>


<h4>How to convert char array to cell array?</h4>

<ul>
<li>use <code>cellstr</code></li>
</ul>


<h3>How to convert cell array to double array?</h3>

<ul>
<li>use <code>cell2mat</code> and <code>str2num</code></li>
</ul>


<h4>How to convert double array to cell array?</h4>

<ul>
<li>use <code>num2cell</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Ios Webapp Using Phonegap and Jquery Mobile]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/27/build-ios-webapp-using-phonegap-and-jquery-mobile/"/>
    <updated>2014-05-27T17:30:09+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/27/build-ios-webapp-using-phonegap-and-jquery-mobile</id>
    <content type="html"><![CDATA[<h3>first install phonegap</h3>

<ul>
<li>download <code>phonegap-2.9.1</code>

<ul>
<li>enter the lib/ios/bin</li>
<li>use the command <code>./create ~/Documents/html_app/testphonegap test_phonegap test1</code>

<ul>
<li>to create the project that is located in <code>~/Documents/html_app/</code> and the name of it is <code>test_phonegap</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<h3>then use xcode to open the project</h3>

<ul>
<li>add the following code in the index.html and run the simulater</li>
<li>the jquery mobile is used from internet and we do not need to download it

<ul>
<li>but I can not find out a way to use the jquery mobile js file in my computer</li>
</ul>
</li>
<li>remember to add <code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;</code> to enable the chinese utf-8</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>    &lt;head&gt;
</span><span class='line'>        &lt;link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.css"&gt;
</span><span class='line'>            &lt;script src="http://code.jquery.com/jquery-1.8.3.min.js"&gt;&lt;/script&gt;
</span><span class='line'>            &lt;script src="http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.js"&gt;&lt;/script&gt;
</span><span class='line'>             &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
</span><span class='line'>    &lt;/head&gt;
</span><span class='line'>    &lt;body&gt;
</span><span class='line'>        &lt;div data-role="page" id="pageone"&gt;
</span><span class='line'>            &lt;div data-role="header"&gt;
</span><span class='line'>                &lt;h1&gt;欢迎来到我的主页&lt;/h1&gt;
</span><span class='line'>                &lt;div data-role="navbar"&gt;
</span><span class='line'>                    &lt;ul&gt;
</span><span class='line'>                        &lt;li&gt;&lt;a href="#" class="ui-btn-active" data-icon="home"&gt;首页&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>                        &lt;li&gt;&lt;a href="#pagetwo" data-icon="arrow-r"&gt;页面二&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>                    &lt;/ul&gt;
</span><span class='line'>                &lt;/div&gt;
</span><span class='line'>                &lt;select name="day" id="day"&gt;
</span><span class='line'>                    &lt;optgroup label="Weekdays"&gt;
</span><span class='line'>                        &lt;option value="mon"&gt;Monday&lt;/option&gt;
</span><span class='line'>                        &lt;option value="tue"&gt;Tuesday&lt;/option&gt;
</span><span class='line'>                        &lt;option value="wed"&gt;Wednesday&lt;/option&gt;
</span><span class='line'>                    &lt;/optgroup&gt;
</span><span class='line'>                    &lt;optgroup label="Weekends"&gt;
</span><span class='line'>                        &lt;option value="sat"&gt;Saturday&lt;/option&gt;
</span><span class='line'>                        &lt;option value="sun"&gt;Sunday&lt;/option&gt;
</span><span class='line'>                    &lt;/optgroup&gt;
</span><span class='line'>                &lt;/select&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>            
</span><span class='line'>            &lt;div data-role="content"&gt;
</span><span class='line'>                &lt;p&gt;本例设有 ui-btn-active 类，请注意首页按钮时突出显示的（已选）。&lt;/p&gt;
</span><span class='line'>                &lt;p&gt;如果点击页面二，您会注意到按钮不会突出显示。&lt;/p&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>            
</span><span class='line'>            &lt;div data-role="footer"&gt;
</span><span class='line'>                &lt;h1&gt;我的页脚&lt;/h1&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        
</span><span class='line'>        &lt;div data-role="page" id="pagetwo"&gt;
</span><span class='line'>            &lt;div data-role="header"&gt;
</span><span class='line'>                &lt;h1&gt;欢迎来到我的主页&lt;/h1&gt;
</span><span class='line'>                &lt;div data-role="navbar"&gt;
</span><span class='line'>                    &lt;ul&gt;
</span><span class='line'>                        &lt;li&gt;&lt;a href="#pageone" data-icon="home"&gt;首页&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>                        &lt;li&gt;&lt;a href="#" data-icon="arrow-r"&gt;页面二&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>                    &lt;/ul&gt;
</span><span class='line'>                &lt;/div&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>            
</span><span class='line'>            &lt;div data-role="content"&gt;
</span><span class='line'>                &lt;p&gt;本页中没有被预选的按钮（突出显示）。&lt;/p&gt; 
</span><span class='line'>                &lt;p&gt;如需让按钮被选的外观表示当前正在访问页面，请返回导航栏教程，继续向下阅读。&lt;/p&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>            
</span><span class='line'>            &lt;div data-role="footer"&gt;
</span><span class='line'>                &lt;h1&gt;我的页脚&lt;/h1&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt; 
</span><span class='line'>    &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5和移动平台的原生应用对比]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/27/html5he-yi-dong-ping-tai-de-yuan-sheng-ying-yong-dui-bi/"/>
    <updated>2014-05-27T13:17:39+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/27/html5he-yi-dong-ping-tai-de-yuan-sheng-ying-yong-dui-bi</id>
    <content type="html"><![CDATA[<h3>问题所在</h3>

<ul>
<li>當前熱門已極的移动開發，所面臨的卻是一個使用平台與裝置類型極其複雜的開發環境，光就行動平台而言，便同時有Windows、Mac、iOS與Android四大平台；再就CPU機器碼來說，則有Intel與ARM兩大平台；即使是Android平台，開發者可能面對的會是百家爭鳴、大小廠牌林立的複雜狀況。</li>
</ul>


<h3>哪些App适合用HTML5开发？</h3>

<ul>
<li>搜索产品</li>
<li>社交产品</li>
<li>资讯新闻产品</li>
<li>游戏产品</li>
</ul>


<h3>HTML5的优点</h3>

<ul>
<li>HTML5最主要的优势就在于它适合<strong><code>众多平台</code></strong>，从PC浏览器到手机、平板电脑，甚至将来的智能电视。只要设备浏览器支持HTML5，HTML5应用或游戏在该平台中就可以直接运行。</li>
<li>如今大部分浏览器</li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_1.png"></li>
<li>这带来原生应用所没有的优点(注：原生应用通常需要进行重新设计，方能投放至另一个目标操作系统)。若开发者想要将自己的iOS游戏移植到Android平台，他就需要对游戏做出根本性的调整。有了HTML5技术，此过程就会简单许多。</li>
<li>HTML5可<code>跨平台</code>运行</li>
</ul>


<!--more-->


<ul>
<li><p>Zynga德国工作室的Paul Bakaus(他曾协助公司将此技术植入公司的各款网页和手机游戏中)表示，“推广HTML5技术的理由很多。”</p>

<ul>
<li>他表示，“一个优点就是我们能够轻松将其推广至手机浏览器。例如，你无需进行安装——这是一大优点。再来就是内容更新和跨平台开发。若你创建的是原生应用，多数情况下你需要分别在Android和iOS平台创建内容，也许还有桌面平台。<code>基于HTML5技术，你只需要制作一次，就可以将其推广至各平台</code>。”</li>
</ul>
</li>
<li><p>美国消费者在Apps上花费的时间依然远多于移动Web</p></li>
<li><p><img src="http://pbking1.github.com/images/internship_zst/compare_2.png"></p></li>
<li><p>对HTML5移动Web及其他平台感兴趣的开发者比例</p></li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_6.png"></li>
</ul>


<h3>HTML5的缺点</h3>

<ul>
<li>虽然HTML5原先旨在服务各种设备，但我们依然<code>无法确保其能够顺利适应各种硬件标准。</code></li>
<li>HTML5的运作情况无法预测</li>
<li>为保证获得较高质量的内容，我们得在多种设备上测试应用——只有这样我们才能保证应用能够顺利运作。我相信未来我们会看到更多测试工具及更优质的标准，但Android QA依然是HTML5开发的痛处。</li>
<li><strong><code>声音</code></strong>显然在游戏开发中占据重要位置。但遗憾的是，这是HTML5的一大缺陷所在。该平台的可用API相比原生应用环境略逊一筹。</li>
<li><code>浏览器的HTML5兼容性不统一</code></li>
<li>HTML5应用区别于手机原生应用的重要地方在于<code>其没有统一的应用商店</code>。这有其利弊，我们需要事先把握。显然投身网络平台的主要优点在于发行和更新内容无 需经过审批过程。和苹果iTunes 不同，HTML5允许开发者随时更新或发行游戏，无需等待平台所有者的回应。</li>
<li>开发者对HTML5的几点不满——绿色为满意，红色为不满，从左到右依次为跨平台开发、快速更新、盈利、安全性、碎片化、性能、适时更新、用户体验、发行

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_7.png"></li>
</ul>
</li>
<li><p>一方面，浏览器市场本身就呈现出“群雄割据”之势；另一方面，很多智能手机用户（尤其是Android用户）<strong>不会及时更新软件</strong>。</p>

<ul>
<li><p>即便是最新的浏览器，对HTML5的支持也并不完善——例如我们在近期的一份分析报告中发现，Android上的最新版Chrome浏览器在虽然支持98项HTML5功能，但是也不支持28项功能。</p></li>
<li><p>这种不均衡会影响HTML5的跨平台吸引力，而事实上，大量HTML5开发工作依然是致力于桌面环境的。</p></li>
<li><p>此外，HTML5在移动领域也面临一些<strong>安全性的问题</strong>，部分原因是HTML5应用与数据的互动方式导致的。“保障HTML5数据的安全是件极其困难的事情。”金说道。</p></li>
</ul>
</li>
</ul>


<h3>原生应用的优点</h3>

<ul>
<li>可访问手机所有功能（GPS、摄像头）；</li>
<li>速度更快、性能高、整体用户体验不错；</li>
<li>可线下使用（因为是在跟Web相对地平台上使用的）；</li>
<li>支持大量图形和动画; 容易发现（在App Store里面）和重新发现（应用图标会一直在主页上）；</li>
<li><p>应用下载能创造盈利（当然App Store抽取20-30% 的营收）。</p></li>
<li><p>移动应用云计算技术公司Appcelerator的企业策略总监迈克尔•金（Michael King）表示,原生应用的优势用一个词概括就是：<code>性能</code>。</p>

<ul>
<li><p>Appcelerator 提出了“互动性斜坡（The Slope Of Interactivity）”概念，指出HTML5适合那些互动性不太强的应用，例如那些单纯提供网络内容或界面非常简单的应用。然而，如果沿着互动性斜坡上行，那些互动更多的应用就需要原生手段了。</p></li>
<li><p>但是，有些设备功能时HTML5做不到的，这往往是因为用户的移动浏览器或浏览器版本不支持HTML5实现那些功能。</p></li>
</ul>
</li>
</ul>


<h3>原生应用的缺点</h3>

<ul>
<li>开发成本高；</li>
<li>支持设备非常有限（一般是哪个系统就在哪个平台专属设备上用）；</li>
<li>上线时间不确定（App Store审核过程不一）；</li>
<li>内容限制（App Store限制）；</li>
<li>获得新版本时需重新下载应用更新。</li>
</ul>


<h3>对比</h3>

<ul>
<li>为何从长远来看，HTML5在移动开发领域比原生应用更具优势。

<ul>
<li><p>性能差距：HTML5的监管机构W3C已经大大推动了相关标准的制定和移动浏览器对HTML5功能的支持，但是很多性能方面的问题依然没有解决。</p></li>
<li><p>开发者的心声：我们采访了各种各样的人——从怀疑者、早期使用者到倡导者和先行者，我们向他们提出了同一个问题：“在这场HTML5与原生应用的大争论当中，我们的立场又是什么？”</p></li>
<li>总体而言，我们发现HTML5正在被越来越多人接受，而一些项目已经证明了它的价值。</li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_3.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_4.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_5.png"></li>
</ul>
</li>
<li>说到底，HTML5与原生应用在质量上的差别，更多来自于移动开发者运用相关语言的才华和经验，而并非HTML5的局限性</li>
<li><p>你喜欢用什么方法来开发支持多平台的应用？紫色为HTML5、绿色为混合应用、红色为一个原生加一个HTML5、蓝色为原生；从上到下依次为全球化企业、大型企业、中型公司、小公司、初创企业（少于5人）、整体。</p>

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_8.png"></li>
<li>HTML5是大型企业打造大量应用的一个重要技术趋势（参见上图）。在全球化企业中，近40%的开发人员表示将采用纯HTML5技术开发多平台应用</li>
</ul>
</li>
<li>最近，Business Insider在一份新出炉的报告中分析了HTML5和原生应用的优缺点

<ul>
<li>在<code>用户体验及性能方面</code>，<strong>原生应用要超过HTML5应用</strong>，理由是HTML5依然不能很好地通过所有移动浏览器访问设备原生功能，在打造图形丰富的用户界面和呈现数据方面也存在局限性。</li>
<li>在<code>跨平台部署成本方面</code>，<strong>HTML5要占优势</strong>，因为HTML5是Web领域的通用语言，不受设备或操作系统限制。W3C正在接洽汽车、出版和电视行业的公司以推广Web。</li>
<li>在<code>快速更新和发行控制方面</code>，<strong>HTML5胜过原生应用</strong>。HTML5的一大优势是开放性——它基于Web，所以没有任何一家公司（如谷歌、苹果、亚马逊或三星）可以充当“掌门人”、放缓更新或者瓜分应用收入。不过，HTML5在支持设备厂商推出的创新手机功能时有点慢。</li>
<li>在<code>盈利方面</code>，<strong>原生应用更胜一筹</strong>。苹果App Store和谷歌Google Play等原生应用商店优势明显。而HTML5除了软件开发商各自在线销售应用之外，还没有出现令人信服的盈利模式。</li>
<li>在<code>编程人才数量方面</code>，<strong>HTML5占优势</strong>。HTML5、Javascript和CSS都是Web领域的通用语言，而相比之下，iOS工程师比较短缺而且开价昂贵。</li>
</ul>
</li>
</ul>


<h3>网友评论</h3>

<ul>
<li><p><strong>网友A</strong></p>

<ul>
<li><p>HTML5 技术开发的 Web 应用应该还是有前途的，应该会随着本身的稳定和设备本身的支持也好，性能增强也好，会越来越普遍。不过当前由于种种条件不是特别的成熟。使得HTML5的发展遇到了一些限制。</p></li>
<li><p>当然，要想获得更好的体验，无疑是要用原生的语言来进行应用开发。</p></li>
<li><p>从目前来看HTML5，与原生应用，还不存在多大的竞争关系，前者更多的是尝试，一直在成熟中，从将来来看，也应该分领域，比如要求比较高的游戏，是不太可能全用HTML5开发的。 而对于传统领域到移动领域的转型所做的展示类型的应用，可能HTML5更合适一些，满足要求又跨平台。</p></li>
</ul>
</li>
<li><p>网友B</p>

<ul>
<li>我觉得Web App和Native App是互补的关系，而如果能利用2者的优点制作出Hybrid App那是最好的。</li>
<li>首先说说Web App，从开发成本，适配，还有便捷都是最好的。但是劣势就是在于，HTML5不是很成熟，还有就是对于消息推送，还有调用本地文件能力有点弱。以及在类似中国部分地区网络貌似不是很给力的说。</li>
<li>而Native App在提供用户体验更胜一筹，而且消息推送，调用本地功能【相机、语音等】方便，但因这样就必须针对不同平台提供不同体验。同时开发成本也就高，而且移植到不同平台上也麻烦。最关键就是在于开发的APP是需要审核。</li>
<li>所以如果能利用好HTML5的优点，结合原生态的优点，达到互补用户体验应该可以上一层。</li>
</ul>
</li>
</ul>


<h3>资料来源</h3>

<ul>
<li><a href="http://www.cnblogs.com/Better-Me/p/3478973.html">http://www.cnblogs.com/Better-Me/p/3478973.html</a></li>
<li><a href="http://www.ithome.com.tw/pr/87940">http://www.ithome.com.tw/pr/87940</a></li>
<li><a href="http://mobile.51cto.com/app-show-410661.htm">http://mobile.51cto.com/app-show-410661.htm</a></li>
<li><a href="http://mobile.51cto.com/comment-386277.htm">http://mobile.51cto.com/comment-386277.htm</a></li>
<li><a href="http://mobile.51cto.com/comment-385747.htm">http://mobile.51cto.com/comment-385747.htm</a></li>
<li><a href="http://www.infoq.com/cn/news/2013/03/html5-native-mobile">http://www.infoq.com/cn/news/2013/03/html5-native-mobile</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KNN in Matlab(knnclassify)]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/26/knn-in-matlab-knnclassify/"/>
    <updated>2014-05-26T17:55:05+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/26/knn-in-matlab-knnclassify</id>
    <content type="html"><![CDATA[<ul>
<li>refer from

<ul>
<li><a href="http://blog.csdn.net/boyxiaolong/article/details/7062394">http://blog.csdn.net/boyxiaolong/article/details/7062394</a></li>
<li><a href="http://blog.csdn.net/aladdina/article/details/4141127">http://blog.csdn.net/aladdina/article/details/4141127</a></li>
</ul>
</li>
</ul>


<h3>What is KNN</h3>

<ul>
<li>simlpy, a method use to classify or regression</li>
<li>idea

<ul>
<li>如果一个样本在特征空间中的k个最相 似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。</li>
</ul>
</li>
<li>KNN算法不仅可以用于分类，还可以用于回归。通过找出一个样本的k个最近邻居，将这些邻居的属性的平均值赋给该样本，就可以得到该样本的属性。更有用的方法是将不同距离的邻居对该样本产生的影响给予不同的权值(weight)，如权值与距离成正比。</li>
</ul>


<!--more-->


<h3><code>knnclassify</code> in matlab</h3>

<ul>
<li>sample</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>train_data = load('train.csv');
</span><span class='line'>test_data = load('test.csv');
</span><span class='line'>
</span><span class='line'>X = train_data(:, 3:3074);
</span><span class='line'>Y = train_data(:, 2);
</span><span class='line'>x = test_data(:, 2:3073);
</span><span class='line'>
</span><span class='line'>label = knnclassify(x,X,Y,10,'cosine','random');</span></code></pre></td></tr></table></div></figure>


<ul>
<li>knnclassify(test_data,train_data,train_label,numberoflabel,&lsquo;cosine&rsquo;,&lsquo;random&rsquo;);</li>
</ul>


<h3>main function</h3>

<ul>
<li>1.CLASS = KNNCLASSIFY(SAMPLE,TRAINING,GROUP)

<ul>
<li>标号和训练数据必须有相同的行数；训练数据和测试数据必须有相同的列；函数对于无效值或者空值会作为丢失值或者忽略这一行。</li>
</ul>
</li>
<li>2.CLASS = KNNCLASSIFY(SAMPLE,TRAINING,GROUP,K)

<ul>
<li>此函数允许你设置距离矩阵形式，如：

<ul>
<li>&lsquo;euclidean&rsquo;    欧氏距离，默认的</li>
<li>&lsquo;cityblock&rsquo;    绝对差的和</li>
<li>&lsquo;cosine&rsquo;     角度距离</li>
<li>&lsquo;correlation&rsquo; 相关距离</li>
<li>&lsquo;Hamming&rsquo;      汉明距离</li>
</ul>
</li>
</ul>
</li>
<li>3.CLASS =KNNCLASSIFY(SAMPLE,TRAINING,GROUP,K,DISTANCE,RULE)

<ul>
<li>本函数允许你选择如何对样本进行分类，如你可以选择：

<ul>
<li>&lsquo;nearest&rsquo;  最近的K个的最多数</li>
<li>&lsquo;random&rsquo;    随机的最多数</li>
<li>&lsquo;consensus&rsquo; 投票法，默认的</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Black Box Testing on App]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/26/quick-black-box-testing-on-app/"/>
    <updated>2014-05-26T14:39:28+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/26/quick-black-box-testing-on-app</id>
    <content type="html"><![CDATA[<h3>some quick black box testing tools</h3>

<ul>
<li>calabash</li>
<li>appium</li>
<li>appgrader</li>
<li>monkey(adb 自带)</li>
</ul>


<!--more-->


<h3>and if you want to install app on the blue stack simulater</h3>

<ul>
<li>use SnapPea_apk_installer</li>
<li><a href="http://mac.softpedia.com/dyn-postdownload.php?p=133201&amp;t=0&amp;i=1">http://mac.softpedia.com/dyn-postdownload.php?p=133201&amp;t=0&amp;i=1</a></li>
</ul>


<h3>appium</h3>

<ul>
<li>how to install

<ul>
<li><code>brew install node</code>      # get node.js</li>
<li><code>npm install -g appium</code> # get appium</li>
<li><code>npm install wd</code>        # get appium client</li>
<li><code>appium &amp;</code>              # start appium</li>
<li><code>node your-appium-test.js</code></li>
</ul>
</li>
</ul>


<h3>monkey</h3>

<ul>
<li><p>Monkey测试是Android平台下自动化测试的一种快速有效的手段，通过Monkey工具可以模拟用户触摸屏幕、滑动轨迹球、按键等操作来对模拟器或者手机设备上的软件进行压力测试，检测该软件的稳定性、健壮性。它的原理是向系统发送伪随机的用户事件流（如按键输入、触摸输入、手势输入等），实现对正在开发的应用程序进行压力测试。</p></li>
<li><p>Monkey的特性
 -（1）测试的对象仅为应用程序包（apk包），有一定的局限性；
 -（2）Monkey测试使用的事件流数据流是随机的，不能进行自定义；
 -（3）可对MonkeyTest的对象、事件数量、类型、频率等进行设置。</p></li>
<li><p>Monkey测试的停止条件
  -（1）如果先顶了Monkey运行在一个或几个特定的包上，那么它会检测试图转到它包的操作，并对其进行阻止；
  -（2）如果应用程序崩溃或接收到任何失控异常，Monkey将停止并报错；
  -（3）如果应用程序产生了应用程序不响应（application not responding）的错误，Monkey将会停止并报错。
通过多次并且不同设定下的Monkey测试才算它是一个稳定性和健壮性足够的程序。</p></li>
<li><p>随着测试的深入，我们需要忽略App的崩溃（App的崩溃会导致Monkey测试的停止），而不是停住，monkey同样能做到。&mdash;ignore crashes
甚至，它还能生成profiling报告。 &mdash;hprof</p></li>
<li><p>Monkey具体参数的设定可参考：</p>

<ul>
<li><a href="http://developer.android.com/tools/help/monkey.html">http://developer.android.com/tools/help/monkey.html</a></li>
</ul>
</li>
<li><p>使用方法</p>

<ul>
<li>本方法基于mac上的bluestack模拟器</li>
<li>1.首先打开bluestack模拟器，然后进行<code>adb connect localhost:10001</code></li>
<li>2.显示连接上了之后，使用SnapPea_APK_Installer安装需要测试的apk</li>
<li>3.然后成功安装上之后。由于需要知道应用程序的主Activity，则用<code>adb shell</code>进入模拟器的系统，然后再<code>data/data</code>里面看名字，但是由于bluestack没有破解，所以权限不够，看不了</li>
<li>4.因此，用命令<code>adb shell monkey 100</code>,让他随机测一下，然后看看报的主程序名字是什么。

<ul>
<li>adb shell monkey [options]

<ul>
<li>如果不指定options，Monkey将以无反馈模式启动，并把事件任意发送到安装在目标环境中的全部包。下面是一个更为典型的命令行示例，它启动指定的应用程序，并向其发送1000个伪随机事件：</li>
</ul>
</li>
</ul>
</li>
<li>5.再用<code>adb shell monkey -p com.baofood -v 1000000 -hprof</code>去测试

<ul>
<li>monkey -p（package的意思）  指定文件名 -v（测试的次数和频率） number（次数）</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Way to Use SYSU Vpn at Home]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/26/the-way-to-use-sysu-vpn-at-home/"/>
    <updated>2014-05-26T10:11:49+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/26/the-way-to-use-sysu-vpn-at-home</id>
    <content type="html"><![CDATA[<h3>中山大学校园VPN的使用方法</h3>

<ul>
<li>使用SSL VPN时，它不需安装配置客户端软件，就像平时上网一样，校园网用户在校外的网络（校内的网络不能使用）可通过浏览器登录：</li>
</ul>


<!--more-->


<pre><code>- 网址：https://sslvpn.sysu.org.cn
</code></pre>

<ul>
<li><p>在弹出的认证页面中输入NetID及密码（到网络中心申请NetID和密码）、完成身份认证后便可使用SSL VPN隧道服务。学生用户开通校园网（已缴纳网络使用费）后即可获VPN增值服务。</p></li>
<li><p>注销SSL VPN有两种方式：一是直接在SSL VPN 登录界面中点击“注销”即可（注意：直接关闭网页，SSL VPN不会自动注销）。二是在桌面的任务栏中对&#8221;SSL VPN 系统托盘&#8221;图标点击鼠标右键，然后选择“退出”即可注销SSL VPN。</p></li>
</ul>


<h3>注意事项</h3>

<ul>
<li>使用前要确保账户有钱</li>
<li>退出时记得注销账户</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Recommandation System]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/24/intro-to-recommandation-system/"/>
    <updated>2014-05-24T10:32:15+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/24/intro-to-recommandation-system</id>
    <content type="html"><![CDATA[<h3>Problem formulation</h3>

<pre><code>可能会有99%的数据是不知道的（用问号表示）
因此可以去猜那些不知道的数据是多少
然后把得分最高的电影推荐给他就可以了
所以其实是一个矩阵补全系统
</code></pre>

<!--more-->


<h3>基本思想和方法</h3>

<ul>
<li><p>基于人口统计学的推荐系统</p>

<ul>
<li>最简单的一种，只是根据系统用户的基本信息发现用户的相关程度，然后把相似用户喜爱的其他用品推荐给当前用户。</li>
<li>系统首先会根据用户的属性建模，比如用户的年龄，性别，兴趣等信息。根据这些特征计算用户间的相似度。比如系统通过计算发现用户A和C比较相似。就会把A喜欢的物品推荐给C。

<ul>
<li>优势

<ul>
<li>不需要历史数据，没有冷启动问题</li>
<li>不依赖于物品的属性，因此其他领域的问题都可无缝接入。</li>
</ul>
</li>
<li>不足：

<ul>
<li>算法比较粗糙，效果很难令人满意，只适合简单的推荐</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>content based recommender system(基于内容)</p>

<ul>
<li>使用物品本身的相似度而不是用户的相似度。</li>
<li>e.g 通过相似度计算，发现电影A和C相似度较高，因为他们都属于爱情类。系统还会发现用户A喜欢电影A，由此得出结论，用户A很可能对电影C也感兴趣。于是将电影C推荐给A。</li>
<li>假设有一些别的特征例如电影的浪漫成都或者动作成分含量（由专家弄出来的）</li>
<li>因此可以把原有的评分作为输入，把专家的预测作为y

<ul>
<li>做线性回归， 把每个用户的theta学出来</li>
<li>然后把theta和用户的评分做内积，得出那些问号的数据</li>
</ul>
</li>
</ul>
</li>
<li><p>协同过滤</p>

<ul>
<li>基于物品的协同过滤

<ul>
<li>根本思想是

<ul>
<li>预先根据所有用户的历史偏好数据计算物品之间的相似性，然后把和用户喜欢的物品相类似的物品推荐给用户。</li>
<li>假设a和c很相近，因为喜欢a的用户同时也喜欢c，而用户A喜欢a，所以把c推荐给用户A</li>
</ul>
</li>
</ul>
</li>
<li><p>如何计算相似度</p>

<ul>
<li>基于余弦的相似度计算

<ul>
<li>通过计算两个向量之间的夹角的余弦值来计算物品之间的相似性</li>
<li>公式为

<ul>
<li><img src="http://pbking1.github.com/images/recommander_system/1.png"></li>
</ul>
</li>
<li>这个算法也有改进版（修正的余弦相似性）

<ul>
<li>由于余弦相似度度量方法中没有考虑到不同用户的评分尺寸问题，修正的余弦相似性度量方法通过减去用户对项目的平均评分来改善上述缺陷。</li>
<li>公式为

<ul>
<li><img src="http://pbking1.github.com/images/recommander_system/2.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>基于关联的相似度计算

<ul>
<li>计算两个向量之间的Pearson-r关联度</li>
</ul>
</li>
<li>调整的余弦相似度计算

<ul>
<li>由于基于余弦的相似度计算没有考虑不同用户的打分情况，可能有的用户偏向于给低分，有的用户偏向于给高分，该方法通过减去用户的打分的平均值消除不同用户打分习惯的影响</li>
</ul>
</li>
</ul>
</li>
<li><p>预测值的计算</p>

<ul>
<li>根据之前计算好的物品之间的相似度，接下来对用户未打分的物品进行预测，有两种预测方法。

<ul>
<li>1.加权求和

<ul>
<li>通过公式

<ul>
<li><img src="http://pbking1.github.com/images/recommander_system/3.png"></li>
</ul>
</li>
</ul>
</li>
<li>2.回归</li>
</ul>
</li>
</ul>
</li>
<li><p>推荐系统的其中一种实现</p>

<ul>
<li>1.建立物品的同现矩阵

<ul>
<li>也就是按照用户分组，找出每两个物品再多少个用户中同时出现的次数</li>
</ul>
</li>
<li>2.建立用户的评分矩阵

<ul>
<li>也就是每个用户对每个物品的评分</li>
</ul>
</li>
<li>3.两个矩阵相乘，计算结果</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>源码</h3>

<ul>
<li>to be continued&hellip;</li>
</ul>


<h3>参考文献</h3>

<ul>
<li>《基于项目评分预测的协同过滤推荐算法》 邓爱林</li>
<li>相似度计算 <a href="http://blog.sina.com.cn/s/blog_7e11a6260101l9iq.html">http://blog.sina.com.cn/s/blog_7e11a6260101l9iq.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zst Internship IOS Code Step2]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/23/zst-internship-ios-code-step2/"/>
    <updated>2014-05-23T15:21:09+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/23/zst-internship-ios-code-step2</id>
    <content type="html"><![CDATA[<h3>Here are the method added</h3>

<ul>
<li>I want to implement a button that used to went back to the main page if the user suddenly do not want to continue ordering the things

<ul>
<li>First

<ul>
<li>Go to Sections &ndash;> ButtonMacro.h

<ul>
<li>add <code>#define BACKTOMAINPAGE 13</code> at the end</li>
</ul>
</li>
<li>then go to Sections &ndash;> Buttons &ndash;> CreateButtom.m

<ul>
<li>add the following code</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>else if (_type == BACKTOMAINPAGE) 
</span><span class='line'>{
</span><span class='line'>    self.frame = CGRectMake(50, 50, 40, 44);
</span><span class='line'>    [self setTitle:@"返回主页" forState:UIControlStateNormal];
</span><span class='line'>    [self setTitle:@"返回主页" forState:UIControlStateHighlighted];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<ul>
<li>go to Controller &ndash;> 我 &ndash;> 应用推荐 &ndash;> OrderDetailViewController.m

<ul>
<li>and this is create a button on the right top corner and its function is to went back to the mainpage</li>
<li>add the following code in <code>viewdidload</code> function</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ButtonFactory *buttonFactory = [ButtonFactory factory];
</span><span class='line'>UIButton *rightBtn = [buttonFactory createButtonWithType:BACKTOMAINPAGE];
</span><span class='line'>      [rightBtn addTarget:self action:@selector(gobacktomain:) forControlEvents:UIControlEventTouchUpInside];
</span><span class='line'>  UIBarButtonItem *rightBarItem = [[UIBarButtonItem alloc] initWithCustomView:rightBtn];
</span><span class='line'>  self.navigationItem.rightBarButtonItem = rightBarItem;
</span><span class='line'>      [rightBarItem release];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add a new function called <code>gobacktomain</code>

<ul>
<li>this is a selector that used to find the main viewcontroller and jump to it.</li>
<li>the code in it is</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)gobacktomain:(id)paramSender{
</span><span class='line'>    UIViewController *target = nil;
</span><span class='line'>  for(UIViewController *controller in self.navigationController.viewControllers){
</span><span class='line'>      if([controller isKindOfClass:[HomePageViewController class]]){
</span><span class='line'>                  target = controller;
</span><span class='line'>          }
</span><span class='line'>  }
</span><span class='line'>  if(target){
</span><span class='line'>      [self.navigationController popToViewController:target animated:YES];
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zst Internship IOS Code Step1]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/23/zst-internship-ios-code-step1/"/>
    <updated>2014-05-23T11:47:46+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/23/zst-internship-ios-code-step1</id>
    <content type="html"><![CDATA[<h3>In order to understand better about the code of the project in zst ios project, first list the folder</h3>

<ul>
<li>in the <code>huyihui</code> folder

<ul>
<li>image</li>
<li>Third party</li>
<li>Sections</li>
<li>Controller</li>
<li>Model</li>
<li>Public</li>
<li>AppDelegate.h</li>
<li>AppDelegate.m</li>
<li>Main.storyboard</li>
<li>ViewController.h</li>
<li>ViewController.m</li>
<li>Images.xcassets</li>
<li>Supporting Files</li>
<li>Products</li>
</ul>
</li>
<li>For the project is nearly finished, so I do not introduce the framework they use.</li>
</ul>


<!--more-->


<h3>First in the <code>Image</code> folder</h3>

<ul>
<li>There are following pics

<ul>
<li>the login picture, the registe picture, the personal center picture, the general picture, the shopping picture, the first page picture, the search picture</li>
</ul>
</li>
</ul>


<h3>Second in the <code>Third Party</code> folder</h3>

<ul>
<li>mainly used for the ailipay and the shared sdk</li>
<li>There is a class <code>AGViewDelegate</code> which is used for the sharing</li>
</ul>


<h3>Third in the <code>Section</code> folder</h3>

<ul>
<li><p>we can see the following</p>

<ul>
<li>ButtonFactory

<ul>
<li>ButtonFactory.h</li>
<li>ButtonFactory.m</li>
</ul>
</li>
<li>Buttons

<ul>
<li>CreateButton.h</li>
<li>CreateButton.m</li>
</ul>
</li>
<li>SectionFactory.h</li>
<li>SectionFactory.m</li>
<li>ButtonMacro.h</li>
</ul>
</li>
<li><p>And I think this folder is implement the <code>factory mode</code></p></li>
<li>and most of the button is implement in the <code>CreateButton.m</code> file</li>
</ul>


<h3>Fourth in the <code>Controller</code> folder</h3>

<ul>
<li>Here comes <code>the most important</code>one</li>
<li>we can see the following

<ul>
<li>BaseViewController.h</li>
<li>BaseViewController.m</li>
<li>Mediator

<ul>
<li>CoordinatingController.h</li>
<li>CoordinatingController.m</li>
</ul>
</li>
<li>login_and_registe

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/1.png"></li>
</ul>
</li>
<li>first_page

<ul>
<li>firstpageandmore(is a tableview that used to show more about the product)

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/2.png"></li>
</ul>
</li>
<li>shopping()

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/3.png"></li>
<li>(those that contrain cell.xib is use to define the layout of the cell of the tableview)</li>
</ul>
</li>
<li>detailsoftheproduct()

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/4.png"></li>
</ul>
</li>
<li>tuangou

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/5.png"></li>
</ul>
</li>
<li>preferential_ticket

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/6.png"></li>
</ul>
</li>
<li>HomePageViewController.h</li>
<li>HomePageViewController.m</li>
<li>HomePageViewController.xib</li>
<li>NewProductCollectionView.xib</li>
<li>HomeCollectionHeader0.xib</li>
<li>HomeCollectionHeader1.xib</li>
<li>HomeCollectionHeader2.xib</li>
<li>OrdinaryProductImageDetailCell.xib</li>
<li>ProductImageDetailCell.xib</li>
<li>ProductConstants.h</li>
</ul>
</li>
<li>search

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/7.png"></li>
</ul>
</li>
<li>shoppingcart

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/8.png"></li>
</ul>
</li>
<li>comment_and_share

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/9.png"></li>
</ul>
</li>
<li>me

<ul>
<li>AppRecommand

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/10.png"></li>
</ul>
</li>
<li><img src="http://pbking1.github.com/images/internship_zst/11.png"></li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Fifth is the <code>Model</code></h3>

<ul>
<li>we can see the following</li>
<li><img src="http://pbking1.github.com/images/internship_zst/12.png"></li>
</ul>


<h3>Sixth is the <code>Public</code></h3>

<ul>
<li>we can see the following</li>
<li><img src="http://pbking1.github.com/images/internship_zst/13.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/14.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/15.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/16.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/17.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/18.png"></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use CocoaPods to Management Dependence in Xcode5]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/20/use-cocoapods-to-management-dependence-in-xcode5/"/>
    <updated>2014-05-20T20:05:22+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/20/use-cocoapods-to-management-dependence-in-xcode5</id>
    <content type="html"><![CDATA[<h3>What is CocoaPods?</h3>

<ul>
<li>CocoaPods is a tools used to management the Third party code in IOS project</li>
</ul>


<h3>How to install it?</h3>

<ul>
<li>use the ruby gem to install

<ul>
<li><code>sudo gem install cocoapods</code></li>
<li>and the ruby should be above ruby 2.0</li>
<li><code>pod setup</code>

<ul>
<li>this step is download the info in the ~/.cocoapods</li>
<li>and you can use <code>du -sh *</code> to see how it process</li>
</ul>
</li>
<li>if the gem is too old

<ul>
<li>use <code>sudo gem update --system</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>most inportantly

<ul>
<li>for the ruby&rsquo;s software source is using the Amazon could and will be block by the great fire wall.</li>
<li><p>so you need to change to ruby temperatly</p>

<p>  <code>
  gem sources --remove https://rubygems.org/
  gem sources -a http://ruby.taobao.org/
 </code></p></li>
<li>after that

<ul>
<li>you can install the pod</li>
</ul>
</li>
</ul>
</li>
<li>and when you need to use the pod

<ul>
<li>change back to the origin source</li>
</ul>
</li>
</ul>


<h3>how to use it?</h3>

<ul>
<li>we will need a file called <code>Podfile</code>

<ul>
<li>and the content of it is</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios, '7.0'
</span><span class='line'>pod 'Mantle'
</span><span class='line'>pod 'LBBlurredImage'
</span><span class='line'>pod 'TSMessages'
</span><span class='line'>pod 'ReactiveCocoa'</span></code></pre></td></tr></table></div></figure>


<pre><code>- then press `ctrl + O` and rename into `Podfile`
- press `ctrl + x` to exit 
</code></pre>

<ul>
<li>after that

<ul>
<li>use <code>pod install</code>

<ul>
<li>and you will see</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod install
</span><span class='line'>Analyzing dependencies
</span><span class='line'>CocoaPods 0.28.0 is available.
</span><span class='line'>Downloading dependencies
</span><span class='line'>Installing HexColors (2.2.1)
</span><span class='line'>Installing LBBlurredImage (0.1.0)
</span><span class='line'>Installing Mantle (1.3.1)
</span><span class='line'>Installing ReactiveCocoa (2.1.7)
</span><span class='line'>Installing TSMessages (0.9.4)
</span><span class='line'>Generating Pods project
</span><span class='line'>Integrating client project
</span><span class='line'>[!] From now on use `SimpleWeather.xcworkspace`.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>and the Cocoapods will create a xxxxx.xcworkspce</li>
</ul>


<h3>Something else</h3>

<ul>
<li>after you use <code>pod install</code>

<ul>
<li>a file called <code>Podfile.lock</code> will be generated and this file should not be add into the .gitignore.</li>
<li>for this file will lock on all the version of the dependences</li>
<li>and you will not be able to change the version of these dependences even you use <code>pod install</code></li>
<li>and only the command <code>pod update</code> will work.</li>
</ul>
</li>
</ul>


<h3>generate the doc</h3>

<ul>
<li>use <code>brew install appledoc</code> to generate the Third party library doc</li>
</ul>


<h3>search the library you want in the cocapods library</h3>

<ul>
<li>use <code>pod search library_name</code>

<ul>
<li>like <code>pod search json</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Xib Program in Xcode5]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/20/build-a-xib-program-in-xcode5/"/>
    <updated>2014-05-20T19:45:48+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/20/build-a-xib-program-in-xcode5</id>
    <content type="html"><![CDATA[<ul>
<li>由于xcode5里面默认使用了storyboard这种视图控制器，因此有以下的解决方案

<ul>
<li>1.新建工程&mdash;ios&mdash;-Application&mdash;-Single View Application</li>
<li>2.将自动生成的Main.storyboard,ViewController.h,ViewController.m这三个文件彻底删除</li>
<li>3.在项目设置里面,将MainInterface这一项中的内容删除置为空</li>
<li>4.新建一个类,继承UIViewController,并且选中WithXIB for user interface.并且把内存计数器改为MRC.(改成MRC的方法就是再build setting里面找automatic, 然后把Object-C Automatic Reference Counting改成NO)
<!--more--></li>
<li>5.在AppDelegate中,导入新建的类:ViewController.h</li>
<li>6.在AppDelegate.h中,添加属性:@property(strong,nonatomic)ViewController*viewController;</li>
<li>7.在AppDelegate.m中,添加以下代码:</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.window= [[[UIWindowalloc]initWithFrame:[[UIScreenmainScreen]bounds]]autorelease];
</span><span class='line'>self.viewController= [[[PT4ViewControlleralloc]initWithNibName:@"PT4ViewController"bundle:nil]autorelease];
</span><span class='line'>self.window.rootViewController=self.viewController;
</span><span class='line'>[self.windowmakeKeyAndVisible];</span></code></pre></td></tr></table></div></figure>


<pre><code>- 8.处理好内存分配以及dealloc方法.
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>  [_window release];
</span><span class='line'>  [_viewController release];
</span><span class='line'>  [super dealloc];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sysu公选食品安全和法律的考试资料]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/20/sysugong-xuan-shi-pin-an-quan-he-fa-lu-de-kao-shi-zi-liao/"/>
    <updated>2014-05-20T16:41:05+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/20/sysugong-xuan-shi-pin-an-quan-he-fa-lu-de-kao-shi-zi-liao</id>
    <content type="html"><![CDATA[<h3>名词解释1 食品安全 （有担保的意思）</h3>

<ul>
<li>1.食品安全(Food safety)：确保食品按照其用途进行加工或者食用时不会对消费者产生危害 (Food safety: Assurance that food will not cause harm to the consumer when it is prepared and/or eaten according to its intended use，CAC)</li>
<li>2.食品保障(Food security)：,为了健康生活每个人在任何时间都可获得食物 。 (Food security: Access by all people at all times to the food needed for a healthy life)</li>
<li>食品安全&mdash;-》food safety and food security</li>
</ul>


<!--more-->


<ul>
<li>3.食品卫生(Food hygiene)：食物链的整个环节上保证食品安全和食品适宜性所采取的所有必需的条件和措施(Food hygiene: All conditions and measures necessary to ensure the safety and suitability of food at all stages of the food chain, from CAC).</li>
<li>4.社会监督机制作为绩效评估的一环

<ul>
<li>1）企业与员工，因违法经营者的假冒、倾销等行为而使其利益受损，亦因消费者的投诉而得知假冒、伪造等行为，能为行政执法人员提供信息，同时还能够提供鉴别真伪等技术的支持；</li>
<li>2）行业协会，其成员为本行业专家、调解委员会的工作人员、律师、政府工作人员等，对本行业的情况了解程度高，同时为了保护行业整体利益，具有评价本行业各市场主体的质量的能力和公布机制，是一个真正的“龙头”，能与政府和消费者进行沟通和谈判，对外承担责任，对内保护行业利益（如上海市政府与浙江多宝鱼协会）；</li>
<li>3）消费者，他们的投诉使得许多案件得以进入行政权力视野，他们是整个食品链的终端，也是国家监管制度最终的受益者，对他们的健康教育和保护必须同时进行，采取源头与末端共同防护的机制。</li>
<li>4）新闻媒体，近年来频发的食品安全事件，不少是经媒体发酵之后受到关注的，但绝不能夸大作秀。</li>
</ul>
</li>
</ul>


<h3>名词解释2 政府管制（社会性）</h3>

<ul>
<li>政府监管的政治 :消费者的政治:信任危机、恐惧和愤怒，伦理学的关怀:自由与发展</li>
<li>公共卫生监管的性质

<ul>
<li>法律强制性:法定、具有法律效力</li>
<li>社会公益性:公益政策</li>
<li>职业人道性:公立抑或民营</li>
<li>时效性:急诊急救</li>
</ul>
</li>
<li><p>基本概念</p>

<ul>
<li>1.制度环境是一系列基本的经济、政治、社会及法律规则的集合,它 是制定生产、交换以及分配规则的基础。在这些规则中,支配经济 活动、产权和合约权利的基本法则和政策构成了经济制度环境。</li>
<li>2.制度安排是支配经济单位之间可能合作和竞争的规则的集合。制度 安排可以理解为人们通常所说的游戏规则,不同的游戏规则导致人
们不同的激励反应。尽管从长远看,制度环境和制度安排会互相影 响和发生变化。</li>
<li>3.自1970年美国环境保护委员会建立,各国的政府规制的重心开始 转向环境质量、产品安全及工作场所安全的规制。这种被称为社会
性规制的浪潮随即波及各种行业。</li>
<li>4.行政机关依照法律的规定或者法律原则,对行政相对人进行规范、 控制的一切活动,都可以称为行政规制。</li>
</ul>
</li>
<li><p>规制(管制)Regulation</p>

<ul>
<li>规制含有规则、制度这样的核心内容,如果再分解为规范、制约,则 更符合行政法现象的本来意义。政府规制依对象不同可以分为经济 性规制和社会性规制。社会性规制是一种较新的政府规制。</li>
<li>1970年以前,经济学对政府规制的理论和经验的研究兴趣主要集中 在考察对某些特殊产业的价格与进入的控制上。这些产业包括公用
事业(电力、管道)、通讯、交通(公路货运、铁路、航空)与金融(银行、 保险、证券)。这种政府规制被称为传统的经济性规制,其中心是探 讨在规模报酬递增的情况下的定价与费率结构问题。</li>
<li>支持加强管制的人们对某些卫生保健市场可能存在垄断势力的滥用 有所担心,但他们不是以传统的垄断势力理论为基础的。他们关注 的是市场规则的缺乏,这种缺乏是由消费者信息匮乏和按服务项目 付费的综合保险的盛行所带来的。而市场规则的缺乏和选择的无理 性,也正是行政法对社会性管制进行约束的具体内容建构的入手点。</li>
</ul>
</li>
<li><p><strong>食品安全保障管制的特殊性</strong></p></li>
<li>(一)信息不对称

<ul>
<li>定义:在交易过程中供需双方对于商品或服务的质量、性能等信息了解程度不同, 出现“信息不完全”或“信息不对称”现 象。</li>
<li>生产者与消费者之间存在严重的信息不对称</li>
</ul>
</li>
<li>￼(二)供给诱导需求

<ul>
<li>需方或消费者:标签、生物盗版、 基因污染、全球化</li>
<li>供方或企业:信息和知识比消费者 多得多,明白怎样生产受欢迎的食品</li>
</ul>
</li>
<li>￼￼（三）公众的观点

<ul>
<li>食品政治的很多方面取决于公众的观点。</li>
<li>食用含转基因的食品对健康不会造成明显 的损害,但是也没有什么明显的好处。</li>
<li>食品药品市场结构不符合“完全竞争市场”的 基本假说</li>
<li>福利经济学第一定理,即竞争的结果必然带来 效率的提升在食品药品市场上无法成立。</li>
<li>基于医疗卫生的这些特殊性,政府的干预,或 者说在一定程度上,政府的主导作用,这是非 常重要的。</li>
</ul>
</li>
<li>政府的再食品保障中的作用

<ul>
<li>直接提供产品和服务</li>
<li>市场的监管</li>
<li>扮演反垄断的角色</li>
<li>公开信息,标签,许可,“软法”之治</li>
</ul>
</li>
</ul>


<h3>论述资料</h3>

<ul>
<li>题目概要

<ul>
<li>食品安全的立法，司法，行政文本的论述</li>
<li>关系，困惑，在食品行业的</li>
</ul>
</li>
<li>资料

<ul>
<li>食品安全的政治和法律的主要内容

<ul>
<li>从法律制度和监管的角度，了解食品安全问题产生的根源；</li>
<li>食品安全法条文概览；</li>
<li>食品政治与食品安全。</li>
</ul>
</li>
<li>食品安全的管理与监督是公共管理的重要内容，
是政府的职责，依法管理</li>
<li>1、食品安全法——保障食品安全的法律。

<ul>
<li>（1）食品安全法</li>
<li>（2）农产品质量安全法</li>
<li>(3) 食品卫生标准（产品标准和食品安全标准）</li>
</ul>
</li>
<li>2、我国食品安全立法的难点

<ul>
<li>（1）体制</li>
<li>（2）部门利益及配合</li>
</ul>
</li>
<li><p>体制</p>

<ul>
<li>1、我国食品安全监管机构与职责

<ul>
<li>国务院设立食品安全委员会，其工作职责由国务院规定。《
食品安全法》明确了国务院设立食品安全委员会作为高层次的议事协调机构，协调、指导食品安全监管工作。</li>
<li>国务院卫生行政部门承担食品安全综合协调职责，负责食品
安全风险评估、食品安全标准制定、食品安全信息公布、食品检验机构的资质认定条件和检验规范的制定，组织查处食品安全重大事故。</li>
<li>国务院质量监督、工商行政管理和国家食品药品监督管理部
门依照本法和国务院规定的职责，分别对食品生产、食品流通、餐饮服务活动实施监督管理，明确了食品安全分段监管
的体制。</li>
<li>有此规定，主要是由于食品安全监管的链条较长，从“农田到餐桌”的全程监管工作单独由一个部门承担可能会造成监管失灵，分工监管，可以发挥不同部门各自专业领域的优势并形成合力，达到有效监管的目标。</li>
<li>《食品安全法》规定了县级以上地方人民政府统一负责、领导、组织、协调本行政区域的食品安全监督管理工作，建立
健全食品安全全程监督管理的工作机制；统一领导、指挥食
品安全突发事件应对工作；完善、落实食品安全监督管理责
任制，对食品安全监督管理部门进行评议、考核。</li>
<li>县级以上地方人民政府依照本法和国务院的规定确定本级卫生行政、农业行政、质量监督、工商行政管理、食品药品监
督管理部门的食品安全监督管理职责。有关部门在各自职责
范围内负责本行政区域的食品安全监督管理工作。</li>
<li>上级人民政府所属部门在下级行政区域设置的机构应当在所在地人民政府的统一组织、协调下，依法做好食品安全监督管理工作。</li>
</ul>
</li>
<li>2、部门间的配合监管

<ul>
<li>县级以上卫生行政、农业行政、质量监督、工商行政管理、食品药品监督管理部门应当加强沟通、密切配合，按照各自
职责分工，依法行使职权，承担责任。</li>
<li>《食品安全法》在规定实行分段监管的食品安全监管体制的同时，特别强调加强部门之间的配合协作，监管部门权责一致，以免各个监管部门在工作衔接上出现交叉重复和监管漏洞。</li>
</ul>
</li>
<li>3、其他监管方式

<ul>
<li>《食品安全法》规定，食品行业协会应当加强行业自律，引导食品生产经营者依法生产经营，推动行业诚信建设，宣传、普及食品安全知识。在我国，行业协会是由同一行业的经营者所组成的、以保护和增进全体会员的共同利益为目的、根据章程开展活动的非营利性的社会团体。</li>
<li>目前，我国食品行业协会数量很多，影响比较大的国家级食品行业协会有中国食品行业协会、中国食品科学技术学会、中国绿色食品协会、中国焙烤食品糖制品工业协会、中国食品添加剂和配料协会等。</li>
<li>食品行业协会在食品安全管理体制中的作用，主要通过以下途径实现：一是与政府沟通，将食品行业信息传递给政府，为政府完善食品安全管理制度提供服务；二是通过行业自律加强食品行业内部管理；三是与消费者沟通，根据消费者的需求不断完善食品行业内部管理制度。</li>
</ul>
</li>
</ul>
</li>
<li><p>《食品安全法》在强调食品安全监督管理、明确各监管部门职责的基础上，针对食品安全涉及部门涉及较多，容易“各自为战”的问题，规定县级以上地方人民政府组织本级卫生行政、农业行政、质量监督、工商行政管理、食品药品监督管理部门制定本行政区域的食品安全年度监督管理计划，并按照年度计划组织开展工作。</p></li>
<li>监管

<ul>
<li>县级以上质量监督、工商行政管理、食品药品监督管理部门履行各自食品安全监督管理职责。</li>
<li>县级以上农业行政部门应当依照《中华人民共和国农产品质量安全法》规定的职责，对食用农产品进行监督管理。</li>
<li>县级以上质量监督、工商行政管理、食品药品监督管理部门对食品生产经营者进行监督检查，应当记录监督检查的情况和处理结果。监督检查记录经监督检查人员和食品生产经营者签字后归档。</li>
</ul>
</li>
<li>食品安全信用档案是食品安全信用制度的基础。

<ul>
<li>《食品安全法》规定，县级以上质量监督、工商行政管理、食品药品监督管理部门应当建立食品生产经营者食品安全信用档案，记录许可颁发、日常监督检查结果、违法行为查处等情况；根据食品安全信用档案的记录，对有不良信用记录的食品生产经营者增加监督检查频次。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>11资料</h3>

<ul>
<li><p>一、<strong>名词解释  </strong></p>

<ul>
<li>1.食品安全：确保食品按照其用途进行加工或者食用时不会对消费者产生危害 。</li>
<li>2.政府管制：指政府为达到一定的目的，凭借其法定的权利对社会经济主体的经济活 动所施加的某种限制和约束。</li>
<li>3.食品召回制度（溯源）：食品企业或公司为了保护消费者免遭污染食品、伪劣食品及标 识不适食品的潜在不利影响而采取收回食品或其他预防措施的行为。指在食物链的各个环节（包括生产、加工、分送以及销售等）中，食品及其相关信息能够被追踪和回溯，使食品的整个生产经营活动处于有效地监控之中。</li>
<li>4.卫生行政执法：指卫生行政机关、法律法规授权的组织依法对特定的对象或事件进行卫 生事业管理、适用卫生法律法规的活动。</li>
</ul>
</li>
<li><p>二、<strong>论述及案例</strong></p>

<ul>
<li><p>1.“鹿死谁手”、“健美猪”、“添加剂之祸”  请根据上课所谈论的内容，从《食品安全法》确立的相关制度的角度，结合该事件所反映的背后的深层次的制度问题，任选以上案例之一，探讨我国食品安全监管中的问题、原因及解决途径。</p>

<ul>
<li><strong>答案</strong></li>
<li>针对健美猪问题

<ul>
<li>原因分析

<ul>
<li>在生产主体方面，组织化程度低、社会素质差

<ul>
<li>由于农户生产的专业化程度很低，生产操作管理很难规范统一，标准化生产水平低，产品的质量不容易控制</li>
<li>因滥用、不合理使用农业投入品或不按照科学的操作规范和技术规程进行农产品生产，导致农产品质量安全事件时有发生。</li>
</ul>
</li>
<li>在经营主体方面，经营规模较小、社会诚信低

<ul>
<li>目前我国的农产品经营者不仅总体规模小，而且缺乏社会诚信。一些不法经销商不按规定进行生产和经营，假冒伪劣，只图经济利益，不顾消费者的身体健康，影响农产品的质量和品质。</li>
</ul>
</li>
<li>在监管主体方面，监管体制不顾、责任不明确

<ul>
<li>目前我国的农产品质量安全是多部门多环节监管，如工商部门负责市场准入，质检部门负责加工企业原料把关，食药部门负责处方药的管理，增加了工作难度。以科学为基础的监管体系尚待建立，监管的手段，如标准、检测等有待进一步加强，体制机制尚需进一步理顺。农业部门执法起步晚、力量薄弱、经验不足，有些地方尚未建立起专门的执法队伍。</li>
</ul>
</li>
<li>在消费主体方面，维权意识差</li>
</ul>
</li>
<li>对策分析

<ul>
<li>推广标准化生产，确保农产品安全</li>
<li>在农产品生产环节，提高生产监管，强化源头治理</li>
<li>在农产品市场环节，要建立统一的市场准入制度</li>
<li>构建长效机制，提高监管实效</li>
<li>全社会都来关心食品安全</li>
</ul>
</li>
</ul>
</li>
<li>保证农产品质量安全是一项极其复杂的系统工程。只有提高全民的食品安全意识，依靠完善的食品法规，建立严格的检测管理体系，严惩不法食品商贩才能保障食品安全。“民以食为天”，关注农产品质量安全，就是关注我们的现在和未来。我们有理由相信，通过全社会的共同努力，安全卫生的食品将为我们的生活再添一份舒适和温馨，从此告别为“吃”而担惊受怕的时代。</li>
</ul>
</li>
<li><p>2.在公法领域，存在社会性规制和经济性规制两种管制领域及不同的方法，在本课程所学的食品安全的法律规制属于社会性规制。请运用课程中所学的理论及相关的案例素材，选择一个角度论述我国《食品卫生法》到《食品安全法》的变法之路上，法律在社会性规制中的立法文本、司法文本和实践文本三者之间的相互作用及关系，并提出政策建议。</p>

<ul>
<li><strong>答案</strong></li>
<li>在《食品安全法》之前，我国仅存在有《食品卫生法》的司法与实践文本，造成在实际执法中很多情况无法可依，监管部门不得不自行修正实践文本，即对《食品卫生法》中不能解释的情况进行自我判断与执行，逐步形成了新的实践文本，同时司法部门在审理相关案件的时候必须要对新的情况进行司法解释，即形成了新的司法文本，在这些文本被大规模的运用于法律领域上后，新的立法就被搬上了日程，继而逐渐形成新的立法文本，也就是《食品安全法》的出台。所以，立法文本来自于司法文本和实践文本，新的立法完成后又必须交给司法与实践检验可行性。这些就是三者之间的关系。</li>
<li>建议：

<ul>
<li>1.加强立法文本的建设，当新的司法文本与实践文本在现实中被大规模应用后，新的立法进程就要及时进行，像《食品卫生法》到《食品安全法》就消耗了相当长的时间，给司法和执法带去了相当的混乱。</li>
<li>2.新的立法文本出台后，要尽快交给司法文本与实践文本进行解释与运用，并验证其可行性。新的《食品安全法》出台，必须要在实践中检验它的合法合理性，并对不到位的地方继续进行修正，达到更加完善的地步。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perceptual Hash Algorithm in Objective C]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/19/perceptual-hash-algorithm-in-objective-c/"/>
    <updated>2014-05-19T17:47:06+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/19/perceptual-hash-algorithm-in-objective-c</id>
    <content type="html"><![CDATA[<h4>此文为借鉴阮一峰2011年和2013年发布的相似图片搜索原理</h4>

<ul>
<li>原文已经写得很好了，所以我只是把它整理了一下，学习学习~~</li>
</ul>


<h3>又名感知哈希算法</h3>

<ul>
<li>主要思想是

<ul>
<li>对每个图片生成一个“指纹”字符串，然后比较不同图片的指纹。结果越接近，就说明图片越相似</li>
</ul>
</li>
<li>这种算法的优点是简单快速，不收图片大小缩放的影响

<ul>
<li>缺点是图片内容不能变更。如果在图片上加几个文字，他就认不出来了</li>
</ul>
</li>
<li>因此最佳应用应该是根据缩略图找出原图</li>
</ul>


<!--more-->


<ul>
<li>算法样例

<ul>
<li>第一步 缩小尺寸

<ul>
<li>把图片缩小大8*8的尺寸，总共有64个像素。这一步的作用是去除图片的细节，只保留结构，明暗等基本信息，摒弃不同的尺寸，比例带来的图片差异</li>
</ul>
</li>
<li>第二步 简化色彩

<ul>
<li>将缩小之后的图片转为64级灰度。也就是说，所有的像素点总共之后64中颜色</li>
</ul>
</li>
<li>第三步 计算平均值

<ul>
<li>计算所有64个像素的灰度平均值</li>
</ul>
</li>
<li>第四步 比较像素的灰度

<ul>
<li>把每个像素的灰度，和平均值进行比较。大于或者等于平均值的，记为1；小于平均值，记为0；</li>
</ul>
</li>
<li>第五步 计算hash值

<ul>
<li>把上一步比较的结果，组合在一起，就构成一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片采用同样的次序就行了。</li>
<li>hash_value = 127ysje82ewrdfw3(16个数字)</li>
<li>这个值也就是指纹</li>
<li>得到指纹之后就可以对比不同的图片，看看64为中有多少位是不一样的。理论上，这等同与计算”汉明距离“。如果不相同的数据位不超过5，这就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>网上其他两种类似的算法</h3>

<h4>颜色分布法</h4>

<ul>
<li>每张图片都可以生成颜色分布的直方图。如果两种那个图片的直方图很接近，那么就可以认为他们很相似</li>
<li>由于任何一种颜色都是有红绿蓝三原色（RGB）构成的，所以可以画出四幅图（三原色直方图和最后合成的直方图）</li>
<li>如果每种原色都可以取256个值，那么整个颜色空间共有1600万种颜色（256的三次方）。针对这1600万种颜色比较直方图，计算量实在太大了，因此需要采用简化方法。可以将0～255分成四个区：0～63为第0区，64～127为第1区，128～191为第2区，192～255为第3区。这意味着红绿蓝分别有4个区，总共可以构成64种组合（4的3次方）。</li>
<li>任何一种颜色必然属于这64种组合中的一种，这样就可以统计每一种组合包含的像素数量。</li>
<li><img src="http://pbking1.github.com/images/oc_algorithm1.png"></li>
<li>上图是某张图片的颜色分布表，将表中最后一栏提取出来，组成一个64维向量(7414, 230, 0, 0, 8, &hellip;, 109, 0, 0, 3415, 53929)。这个向量就是这张图片的特征值或者叫&#8221;指纹&#8221;。</li>
<li>于是，寻找相似图片就变成了找出与其最相似的向量。这可以用皮尔逊相关系数或者余弦相似度算出。</li>
</ul>


<h4>内容特征法</h4>

<ul>
<li>除了颜色构成还可以从比较图片内容的相似性入手</li>
<li>首先

<ul>
<li>把图片装成一张比较小的灰度图片，假设为50*50像素。然后，确定一个阀值，把灰度图片转成黑白图片</li>
</ul>
</li>
<li>其次

<ul>
<li>如果两张图片很相似，那么他们的黑白轮廓应该是相近的。因此，问题就变成了如何去顶一个合理的阀值，正确的呈现图片中的轮廓</li>
</ul>
</li>
<li>因此

<ul>
<li><strong>前景色和背景色反差越大，轮廓就越明显</strong></li>
<li>这意味着，如果我们找到一个值，可以使得前景色和背景色格子的“类内差异最小”，或者“类间差异最大”，那么这个值就是理想的阀值</li>
</ul>
</li>
<li>后来因为有个如本的学者叫大津展之证明了两个是一样的，可以用他的“大津法”来求阀值

<ul>
<li>假定一张图片共有n个像素，其中灰度值小于阈值的像素为 n1 个，大于等于阈值的像素为 n2 个（ n1 + n2 = n ）。w1 和 w2 表示这两种像素各自的比重。

<ul>
<li>w1 = n1 / n</li>
<li>w2 = n2 / n</li>
</ul>
</li>
<li>再假定，所有灰度值小于阈值的像素的平均值和方差分别为 μ1 和 σ1，所有灰度值大于等于阈值的像素的平均值和方差分别为 μ2 和 σ2。于是，可以得到

<ul>
<li>类内差异 = w1(σ1的平方) + w2(σ2的平方)
　　      &ndash; 类间差异 = w1w2(μ1-μ2)^</li>
</ul>
</li>
<li>可以证明，这两个式子是等价的：得到&#8221;类内差异&#8221;的最小值，等同于得到&#8221;类间差异&#8221;的最大值。不过，从计算难度看，后者的计算要容易一些。</li>
<li>下一步用&#8221;穷举法&#8221;，将阈值从灰度的最低值到最高值，依次取一遍，分别代入上面的算式。使得&#8221;类内差异最小&#8221;或&#8221;类间差异最大&#8221;的那个值，就是最终的阈值.</li>
<li><p>有了50x50像素的黑白缩略图，就等于有了一个50x50的0-1矩阵。矩阵的每个值对应原图的一个像素，0表示黑色，1表示白色。这个矩阵就是一张图片的特征矩阵。</p></li>
<li><p>两个特征矩阵的不同之处越少，就代表两张图片越相似。这可以用&#8221;异或运算&#8221;实现（即两个值之中只有一个为1，则运算结果为1，否则运算结果为0）。对不同图片的特征矩阵进行&#8221;异或运算&#8221;，结果中的1越少，就是越相似的图片。</p></li>
</ul>
</li>
</ul>


<h3>objective c源码</h3>

<ul>
<li>tphash.h</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;Foundation/Foundation.h&gt;
</span><span class='line'>
</span><span class='line'>@interface tphash : NSObject
</span><span class='line'>
</span><span class='line'>+ (uint64_t)ptHash:(UIImage*)image;
</span><span class='line'>+ (int)hamdistance:(uint64_t)x with:(uint64_t) y;
</span><span class='line'>+ (UIImage *)scaleImage:(UIImage *)image toSize(CGSize)newSize;
</span><span class='line'>+ (uint64_t *) convertTogreyscale64Array: (UIImage *)i;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>tphash.m</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "tphash.h"
</span><span class='line'>
</span><span class='line'>@implementation tphash
</span><span class='line'>
</span><span class='line'>+ (uint64_t)ptHash:(UIImage *)image{
</span><span class='line'>    image = [self scaleImage:image toSize:CGSizeMake(8,8)];
</span><span class='line'>    uint64_t* imageArray = [self convertTogreyscale64Array:image];
</span><span class='line'>    int sum = 0;
</span><span class='line'>    for(int i = 0; i &lt; 64; i++){
</span><span class='line'>        sum += imageArray[i];
</span><span class='line'>    }
</span><span class='line'>    uint8_t avg = sum/64;
</span><span class='line'>    uint64_t ret = 0;
</span><span class='line'>    for(int i = 0; i &lt; 64; i++){
</span><span class='line'>        if(imageArray[i] &gt;= avg){
</span><span class='line'>            ret++;
</span><span class='line'>        }
</span><span class='line'>        ret &lt;&lt;= 1;
</span><span class='line'>    }
</span><span class='line'>    return ret;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>+ (int)hamdistance:(uint64_t)x with:(uint64_t) y{
</span><span class='line'>    unsigned dist = 0, val = x^y;
</span><span class='line'>    while (val) {
</span><span class='line'>        ++dist;
</span><span class='line'>        val &= val - 1;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>+ (UIImage *)scaleImage:(UIImage *)image toSize(CGSize)newSize{
</span><span class='line'>    UIGraphicsBeginIMageContextWithOptions(newSize, NO, 0.0);
</span><span class='line'>    [image drawInRect:CGRectMake(0,0,newSize.width, newSize.height)];
</span><span class='line'>    UIImage *newImage = UIGraphicsBeginImageFromCurrentImageContext();
</span><span class='line'>    UIGraphicsEndImageContext();
</span><span class='line'>    return newImage;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>+ (uint64_t *) convertTogreyscale64Array: (UIImage *)i{
</span><span class='line'>    int kRed = 1;
</span><span class='line'>    int kGreen = 2;
</span><span class='line'>    int kBlue = 4;
</span><span class='line'>    
</span><span class='line'>    int colors = kGreen;
</span><span class='line'>    int m_width = i.size.width;
</span><span class='line'>    int m_height = i.size.height;
</span><span class='line'>    
</span><span class='line'>    uint32_t *rgbImage = (uint32_t *) malloc(m_width * meight * sizeof(uint32_t));
</span><span class='line'>    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
</span><span class='line'>    CGContextRef context = CGBitmapContextCreate(rgbImage, m_width, m_height, 8, m_width * 4, colorSpace, kCGBitmapByteOrder32Little | kCGImageAlphaNoneSkipLast);
</span><span class='line'>    CGContextSetInterpolationQuality(context, kCGInterpolationHigh);
</span><span class='line'>    CGContextSetShouldAntialias(context, NO);
</span><span class='line'>    CGContextDrawImage(context, CGRectMake(0, 0, m_width, m_height), [i CGImage]);
</span><span class='line'>    CGContextRelease(context);
</span><span class='line'>    CGColorSpaceRelease(colorSpace);
</span><span class='line'>    
</span><span class='line'>    uint8_t *m_imageData = (uint8_t *) malloc(m_width * m_height);
</span><span class='line'>    for(int y = 0; y &lt; m_height; y++) {
</span><span class='line'>        for(int x = 0; x &lt; m_width; x++) {
</span><span class='line'>            uint32_t rgbPixel=rgbImage[y*m_width+x];
</span><span class='line'>            uint32_t sum=0,count=0;
</span><span class='line'>            if (colors & kRed) {sum += (rgbPixel&gt;&gt;24)&255; count++;}
</span><span class='line'>            if (colors & kGreen) {sum += (rgbPixel&gt;&gt;16)&255; count++;}
</span><span class='line'>            if (colors & kBlue) {sum += (rgbPixel&gt;&gt;8)&255; count++;}
</span><span class='line'>            m_imageData[y*m_width+x]=sum/count/4;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    free(rgbImage);
</span><span class='line'>    return m_imageData;
</span><span class='line'>}
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 UC Interview Coding]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/14/2014-uc-interview-coding/"/>
    <updated>2014-05-14T23:30:19+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/14/2014-uc-interview-coding</id>
    <content type="html"><![CDATA[<ul>
<li>有两套题，c++和java，我选了c++</li>
<li>考了树的前序和中序遍历</li>
<li>还有虚函数多态，继承</li>
<li>考了指针引用和（数据类型和数据结构的size， 也就是占用的内存）</li>
</ul>


<h3>笔试题一</h3>

<ul>
<li>在不能用for和while的情况下，找到一串字符串中第一个只出现一次的字符（仅包含26个英文字母）

<ul>
<li>思路：用递归</li>
</ul>
</li>
<li>源码：to be continued&hellip;.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Tutorial 3 Tabhost]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/14/ios-tutorial-3-tabhost/"/>
    <updated>2014-05-14T21:25:25+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/14/ios-tutorial-3-tabhost</id>
    <content type="html"><![CDATA[<h3>源代码</h3>

<ul>
<li>把数据载入到tableview中，，点击某一个item就可以出发alert对话框。</li>
<li>Cell 的样式也是可以自定义的

<ul>
<li>通过UITableViewCell来设置样式</li>
</ul>
</li>
<li>在<code>AppDelegate.h</code>中</li>
<li>加入mainView的声明

<ul>
<li><strong>注意要加<code>#import "ViewController.h"</code></strong></li>
</ul>
</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;
</span><span class='line'>
</span><span class='line'>@property (strong, nonatomic) UIWindow *window;
</span><span class='line'>@property (strong, nonatomic) ViewController *mainView;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在<code>AppDelegate.m</code>中加入以下代码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>    [_window release];
</span><span class='line'>    [_mainView release];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
</span><span class='line'>{
</span><span class='line'>    self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];
</span><span class='line'>    self.mainView = [[[ViewController alloc] init] autorelease];
</span><span class='line'>    
</span><span class='line'>    self.window.rootViewController = self.mainView;
</span><span class='line'>    [self.window makeKeyAndVisible];
</span><span class='line'>    // Override point for customization after application launch.
</span><span class='line'>    return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改<code>ViewController.h</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController&lt;UITableViewDataSource, UITableViewDelegate&gt;
</span><span class='line'>
</span><span class='line'>@property (nonatomic, retain) NSMutableArray *datalist;
</span><span class='line'>@property (nonatomic, retain) UITableView *myTableView;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>文件<code>ViewController.m</code>如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>@synthesize datalist;
</span><span class='line'>@synthesize myTableView;
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view, typically from a nib.
</span><span class='line'>    NSMutableArray *list = [NSArray arrayWithObjects:@"武汉",@"上海",@"北京",@"深圳",@"广州",@"重庆",@"香港",@"台海",@"天津", nil];
</span><span class='line'>    self.datalist = list;
</span><span class='line'>    
</span><span class='line'>    UITableView *tableview = [[[UITableView alloc] initWithFrame:self.view.frame style:UITableViewStylePlain] autorelease];
</span><span class='line'>    //set the data source
</span><span class='line'>    tableview.dataSource = self;
</span><span class='line'>    //set the delegate
</span><span class='line'>    tableview.delegate = self;
</span><span class='line'>    //set the background
</span><span class='line'>    //tableview.backgroundView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"Background.png"]];
</span><span class='line'>    self.myTableView = tableview;
</span><span class='line'>    [self.view addSubview:myTableView];
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    static NSString *CellWithIdentifier = @"Cell";
</span><span class='line'>    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellWithIdentifier];
</span><span class='line'>    if(cell == nil){
</span><span class='line'>        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue2 reuseIdentifier:CellWithIdentifier];
</span><span class='line'>    }
</span><span class='line'>    NSUInteger row = [indexPath row];
</span><span class='line'>    cell.textLabel.text = [self.datalist objectAtIndex:row];
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
</span><span class='line'>{
</span><span class='line'>    return [self.datalist count];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    return 70;  //设置行高
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    NSString *msg = [[NSString alloc] initWithFormat:@"You choose :%@",  [self.datalist objectAtIndex:[indexPath row]]];
</span><span class='line'>    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:msg delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
</span><span class='line'>    [msg release];
</span><span class='line'>    [alert show];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    NSLog(@"delete");  //滑动删除
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Tutorial 2]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/14/ios-tutorial-2/"/>
    <updated>2014-05-14T16:34:49+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/14/ios-tutorial-2</id>
    <content type="html"><![CDATA[<ul>
<li>键盘收起以及弹出对话框</li>
<li>在<code>ViewController.h</code>里面加入<code>-(IBAction)View_TouchDown:(id)sender</code>;</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController
</span><span class='line'>
</span><span class='line'>@property (strong, nonatomic) IBOutlet UITextField *tempText;
</span><span class='line'>
</span><span class='line'>-(IBAction)showMessage;
</span><span class='line'>-(IBAction)View_TouchDown:(id)sender;
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在<code>ViewController.m</code>里面加入以下代码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (IBAction)View_TouchDown:(id)sender
</span><span class='line'>{
</span><span class='line'>    [[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>得到的全部代码如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view, typically from a nib.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (IBAction)showMessage  //弹出对话框
</span><span class='line'>{
</span><span class='line'>    UIAlertView *a = [[UIAlertView alloc]
</span><span class='line'>                      initWithTitle:@"I am pb" message:@"hello world" delegate:nil cancelButtonTitle:@"I can do it" otherButtonTitles: nil];
</span><span class='line'>    [a show];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (IBAction)View_TouchDown:(id)sender
</span><span class='line'>{
</span><span class='line'>    [[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>最后再在storybroad里面用outlet把整个屏幕和<code>View_TouchDown</code>连接起来就可以了</p></li>
<li><p>Touble shoot</p>

<ul>
<li>1.出现<code>'NSInternalInconsistencyException', reason: 'Could not load NIB in bundle:</code>

<ul>
<li>说明<code>self.viewController = [[[ViewController alloc] initWithNibName:@"name" bundle:nil] autorelease];</code>

<ul>
<li>里面的name写错了

<ul>
<li>要写成和ViewController一样的名字才行。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Tutorial 1]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/14/ios-tutorial-1/"/>
    <updated>2014-05-14T13:11:01+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/14/ios-tutorial-1</id>
    <content type="html"><![CDATA[<ul>
<li>1.一点基本语法</li>
<li>用NSLog打印，代替printf（也是可以用的）</li>
<li>用NSDate来获取时间</li>
<li>用NSData来把数据char*转成string存起来</li>
</ul>


<!--more-->


<ul>
<li>源码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;Foundation/Foundation.h&gt;
</span><span class='line'>
</span><span class='line'>int main(int argc, const char * argv[])
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    @autoreleasepool {
</span><span class='line'>        
</span><span class='line'>        // insert code here...
</span><span class='line'>        NSLog(@"Hello, World!");
</span><span class='line'>        
</span><span class='line'>    }
</span><span class='line'>    int i;
</span><span class='line'>    for(i = 0; i &lt;= 5; i++)
</span><span class='line'>        NSLog(@"%d\n", i);
</span><span class='line'>   
</span><span class='line'>    NSDate *yesterday = [NSDate dateWithTimeIntervalSinceNow:-(24*60*60)];
</span><span class='line'>    NSLog(@"yesterday is %@", yesterday);
</span><span class='line'>    
</span><span class='line'>    NSDate *tomorrow = [NSDate dateWithTimeIntervalSinceNow:+(24*60*60)];
</span><span class='line'>    NSLog(@"tomorrow is %@", tomorrow);
</span><span class='line'>    
</span><span class='line'>    const char *string = "Hi this is pb";
</span><span class='line'>    NSData *data = [NSData dataWithBytes:string length:strlen(string) + 1];
</span><span class='line'>    NSLog(@"data is %@", data);
</span><span class='line'>    NSLog(@"%lu Bytes string is '%s'", (unsigned long)[data length], [data bytes]);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>2.线程的同步与锁
　　- 要说明线程的同步与锁，最好的例子可能就是多个窗口同时售票的售票系统了。我们知道在java中，使用synchronized来同步，而iphone虽然没有提供类似java下的synchronized关键字，但提供了NSCondition对象接口。</p>

<ul>
<li>查看NSCondition的接口说明可以看出，NSCondition是iphone下的锁对象，所以我们可以使用NSCondition实现iphone中的线程安全。这是来源于网上的一个例子：</li>
</ul>
</li>
<li><p>2.多个窗口同时售票的售票系统代码</p></li>
<li>AppDelegate.h</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;Cocoa/Cocoa.h&gt;
</span><span class='line'>
</span><span class='line'>@interface AppDelegate : NSObject &lt;NSApplicationDelegate&gt;{
</span><span class='line'>    int tickets;
</span><span class='line'>    int count;
</span><span class='line'>    NSThread *ticketThreadone;
</span><span class='line'>    NSThread *ticketThreadtwo;
</span><span class='line'>    NSCondition *ticketsCondition;
</span><span class='line'>    NSWindow *windows;
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@property (assign) IBOutlet NSWindow *window;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>AppDelegate.cpp</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "AppDelegate.h"
</span><span class='line'>
</span><span class='line'>@implementation AppDelegate
</span><span class='line'>@synthesize window;
</span><span class='line'>
</span><span class='line'>- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
</span><span class='line'>{
</span><span class='line'>    tickets = 100;
</span><span class='line'>    count = 0;
</span><span class='line'>    
</span><span class='line'>    ticketsCondition = [[NSCondition alloc] init]; //初始化锁对象
</span><span class='line'>    ticketThreadone = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil]; //初始化线程1
</span><span class='line'>    [ticketThreadone setName:@"Thread-1"];
</span><span class='line'>    [ticketThreadone start];
</span><span class='line'>    
</span><span class='line'>    ticketThreadtwo = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];  //初始化线程2
</span><span class='line'>    [ticketThreadtwo setName:@"Thread-2"];
</span><span class='line'>    [ticketThreadtwo start];
</span><span class='line'>    
</span><span class='line'>    [window makeKeyWindow];  //出错了，无法在窗口中运行，只能在命令行中运行，不知道为什么？求知道的筒子解答下~
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)run{
</span><span class='line'>    while(TRUE){
</span><span class='line'>        [ticketsCondition lock];
</span><span class='line'>        if(tickets &gt; 0)
</span><span class='line'>        {
</span><span class='line'>            [NSThread sleepForTimeInterval:0.5];
</span><span class='line'>            count = 100 - tickets;
</span><span class='line'>            NSLog(@"current tickets count are: %d, sell %d, thread name: %@", tickets, count, [[NSThread currentThread] name]);
</span><span class='line'>            tickets--;
</span><span class='line'>        }else
</span><span class='line'>        {
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        [ticketsCondition unlock];
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)dealloc{
</span><span class='line'>    [ticketThreadone release];  //释放内存
</span><span class='line'>    [ticketThreadtwo release];
</span><span class='line'>    [ticketsCondition release];
</span><span class='line'>    [window release];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Trouble shooting</li>
<li><p>1.ARC forbids explicit message send of &lsquo;release&rsquo;
&lsquo;release&rsquo; is unavailable: not available in automatic reference counting mode</p>

<ul>
<li>错误原因：因为我们设置了用ARC来管理内存释放，我们却又调用了release方法去释放对象。</li>
<li>(From the Internet)

<ul>
<li>ARC是iOS 5推出的新功能，全称叫 ARC(Automatic Reference Counting)。简单地说，就是代码中自动加入了retain/release，原先需要手动添加的用来处理内存管理的引用计数的代码可以自动地由编译器完成了。该机制在 iOS 5/ Mac OS X 10.7 开始导入，利用 Xcode4.2 可以使用该机制。简单地理解ARC，就是通过指定的语法，让编译器(LLVM 3.0)在编译代码时，自动生成实例的引用计数管理部分代码。有一点，ARC并不是GC，它只是一种代码静态分析（Static Analyzer）工具。</li>
</ul>
</li>
<li>how to solve it?

<ul>
<li>找到项目中的Build setting

<ul>
<li>把<code>Objective-C Automatic Reference</code>从YES改成NO</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2.找不到HOME键</p>

<ul>
<li>在模拟器上按<code>Shift+command+h</code></li>
</ul>
</li>
<li><p>3.出现<code>Auto Layout on iOS Versions prior to 6.0</code></p>

<ul>
<li>界面设置问题</li>
<li>找到storybroad

<ul>
<li>打开属性栏，把<code>Use AutoLayout</code>去掉。</li>
</ul>
</li>
</ul>
</li>
<li><p>4.ios7的全屏问题</p>

<ul>
<li>在viewcontroller里面加入以下代码
&#8220;`</li>
<li><p>(void)viewDidLayoutSubviews{</p>

<p>  if ([self respondsToSelector:@selector(topLayoutGuide)]) // iOS 7 or above
  {
      CGFloat top = self.topLayoutGuide.length;
      if(self.view.frame.origin.y == 0){
          // We only want to do this once, or if the view has somehow been &quot;restored&quot; by other code.
          self.view.frame = CGRectMake(self.view.frame.origin.x, self.view.frame.origin.y + top, self.view.frame.size.width, self.view.frame.size.    height &ndash; top);
      }
  }
}
&#8220;`</p></li>
<li>这个只能让上面原有的时间什么的消失，但是从根本上不能解决问题</li>
</ul>
</li>
<li><p>5.如果刚开始打开ios模拟器发现太大了</p>

<ul>
<li>再Window->scale那里可以调整成75%就可以使得模拟器看起来大小比较科学了。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 Sysu Database Project Step1]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/13/2014-sysu-database-project-step1/"/>
    <updated>2014-05-13T15:20:32+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/13/2014-sysu-database-project-step1</id>
    <content type="html"><![CDATA[<h3>问题描述</h3>

<ul>
<li><strong>任务 1: 不带压缩地导入数据</strong>

<ul>
<li>这个任务要求你实现分页存储机制。

<ul>
<li>此处仅考虑定长的数据类型。对于每一列,需要将所含的定长数据如同数组 一样存储在磁盘上的页中 (更多解释见下文)。每一页的大小是固定的,可以是 4K,8K 或 16K。</li>
</ul>
</li>
<li>在这个任务中,你需要存储 ORDERS 表中的

<ul>
<li>1.O_ORDERKEY</li>
<li>2.O_CUSTKEY</li>
<li>3.O_TOTALPRICE</li>
<li>4.O_SHIPPRIORITY</li>
</ul>
</li>
<li>不同列的数据类型不一样,具体请参考 TPC-H 的文档。存储之后,你需要 提供接口,以便于查询记录。查询时,要求实现给定一条记录的 ORDERKEY, 返回这条记录的 CUSTKEY,TOTALPRICE 和 SHIPPRIORITY。</li>
<li>查询接口的具体要求,请参考提交一节。</li>
<li>这个存储系统必须有能力处理 1G 以上的数据。允许存入内存里的页的数量 为 128。在实现这个限制之外,可以尝试其他限制并做对比。你可能需要学习 LRU 等换页机制来加速数据导入。</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><strong>任务 2: 外排序和 RLE 压缩</strong>

<ul>
<li>本任务要求使用行程长度编码 (Run-Length Encoding) 方式压缩数据,并 将 ORDERS 表和 CUSTOMER 表以 CUSTKEY 进行 JOIN 操作。在进行压 缩前,需对数据做外排序 (见下文说明)。</li>
</ul>
</li>
</ul>


<h3>存储结构</h3>

<ul>
<li>请注意在这个项目中,磁盘的读写操作都必须以二进制模式进行。</li>
<li>对于一个页,由于数据定长,一列可以以数组形态存在于内存中。例如,按照以下形式声明的数组,

<ul>
<li><code>int page[1024]</code></li>
<li>可以表示一个大小为 4K 的页。使用以下代码,可以将一页写出, <code>fwrite(page, sizeof(int), 1024, f)</code>;</li>
<li>以上代码仅供参考。具体实现时可能情况更为复杂。</li>
</ul>
</li>
<li>对于一个未压缩的页,数据按如下方式按顺序排列,需要读取指定数据时, 通过下标取出对应位置的数据。

<ul>
<li><code>&lt;Val1&gt;&lt;Val2&gt;&lt;Val3&gt;&lt;Val4&gt;...</code></li>
</ul>
</li>
<li>对于压缩的页,则按如下方式排列在数组中。请先自行学习行程长度编码。

<ul>
<li><code>&lt;Val1&gt;&lt;RunLength1&gt;&lt;Val2&gt;&lt;RunLength2&gt;&lt;Val3&gt;&lt;RunLength3&gt;...</code></li>
</ul>
</li>
<li>一页可以是 4K,8K 或 64K。</li>
</ul>


<h3>外排序</h3>

<ul>
<li>在做 JOIN 之前,需要进行外排序。

<ul>
<li>简单地说,需要先分别读进每 128 页 进行排序,得到一个个顺串。然后同时对所有顺串进行归并,归并后的结果即 为排好序的数据。请参考维基百科上的说明自行学习和实现。</li>
</ul>
</li>
<li>外排序需要同时处理 ORDERS 表的 CUSTKEY 列和 ORDERKEY 列,按照 CUSTKEY 进行排列,如下图所示,</li>
<li>排完序后,CUSTKEY 的连续重复项更多了,即可对该列进行 RLE 压缩。 完成压缩后,请统计压缩效率。</li>
<li><img src="http://pbking1.github.com/images/database2014pro/1.png"></li>
</ul>


<h3>step1 code</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include&lt;iostream&gt;
</span><span class='line'>#include&lt;fstream&gt;
</span><span class='line'>#include&lt;string&gt;
</span><span class='line'>#include&lt;algorithm&gt;
</span><span class='line'>#include&lt;cstdlib&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>
</span><span class='line'>struct database_attr{
</span><span class='line'>  int orderkey;
</span><span class='line'>  int custkey;
</span><span class='line'>  int totalprice;
</span><span class='line'>  int prior;
</span><span class='line'>};
</span><span class='line'>database_attr p[1024];
</span><span class='line'>
</span><span class='line'>int main(){
</span><span class='line'>  fstream fin;
</span><span class='line'>  char buf[200];
</span><span class='line'>  string str[10][1001];
</span><span class='line'>  string data[5][1001];
</span><span class='line'>  int data1[5][1001];
</span><span class='line'>  int data2[5][1001];
</span><span class='line'>  fin.open("store_test.tbl");
</span><span class='line'>  int row = 0;
</span><span class='line'>  int col;
</span><span class='line'>  int n = 9;
</span><span class='line'>  while(!fin.eof()){
</span><span class='line'>      row = 0;
</span><span class='line'>      fin.getline(buf, 200, '\n');
</span><span class='line'>      for(int i = 0; buf[i] != '\0';){
</span><span class='line'>          if(buf[i] == '|' && n &gt; 0){
</span><span class='line'>              row++;
</span><span class='line'>              i++;
</span><span class='line'>              n--;
</span><span class='line'>          }else if(buf[i] != '|' && n &gt; 0){
</span><span class='line'>              str[row][col] += buf[i];
</span><span class='line'>              i++;
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      n = 9;
</span><span class='line'>      col++;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  for(int i = 0; i &lt; 9; i++){
</span><span class='line'>      for(int j = 0; j &lt; 1000; j++){
</span><span class='line'>      //  cout&lt;&lt;str[i][j]&lt;&lt;" ";
</span><span class='line'>      }
</span><span class='line'>      //cout&lt;&lt;endl;
</span><span class='line'>  }
</span><span class='line'>  //store the data in column
</span><span class='line'>  for(int i = 0; i &lt; 9; i++){
</span><span class='line'>      for(int j = 0; j &lt; 1000; j++){
</span><span class='line'>          if(i == 0){
</span><span class='line'>              data[i][j] = str[i][j];
</span><span class='line'>          }
</span><span class='line'>          if(i == 1){
</span><span class='line'>              data[i][j] = str[i][j];
</span><span class='line'>          }
</span><span class='line'>          if(i == 3){
</span><span class='line'>              data[i - 1][j] = str[i][j];
</span><span class='line'>          }
</span><span class='line'>          if(i == 7){
</span><span class='line'>              data[i - 4][j] = str[i][j];
</span><span class='line'>          }       
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  for(int i = 0; i &lt; 4; i++){
</span><span class='line'>      for(int j = 0; j &lt; 1000; j++){
</span><span class='line'>          //cout&lt;&lt;data[i][j]&lt;&lt;" ";
</span><span class='line'>      }
</span><span class='line'>      //cout&lt;&lt;endl;
</span><span class='line'>  }
</span><span class='line'>  //check the data use the index
</span><span class='line'>  /*
</span><span class='line'>  int ok;
</span><span class='line'>  cin&gt;&gt;ok;
</span><span class='line'>  cout&lt;&lt;data[1][ok]&lt;&lt;" "&lt;&lt;data[2][ok]&lt;&lt;" "&lt;&lt;data[3][ok]&lt;&lt;endl;
</span><span class='line'>  */
</span><span class='line'>  fin.close();
</span><span class='line'>  //change the string array into int array
</span><span class='line'>  int i, j;
</span><span class='line'>  for(i = 0; i &lt; 4; i++){
</span><span class='line'>      for(j = 0; j &lt; 1000; j++){
</span><span class='line'>          data1[i][j] = atoi(data[i][j].c_str());
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  for(i = 0; i &lt; 4; i++){
</span><span class='line'>      for(j = 0; j &lt; 1000; j++){
</span><span class='line'>          data2[i][j] = data1[i][j];
</span><span class='line'>          if(j &lt; 10)
</span><span class='line'>              cout&lt;&lt;data2[i][j]&lt;&lt;" ";
</span><span class='line'>      }
</span><span class='line'>      cout&lt;&lt;endl;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //store the array into struct array
</span><span class='line'>  for(i = 0; i &lt; 4; i++){
</span><span class='line'>      for(j = 0; j &lt; 1000; j++){
</span><span class='line'>          p[j].orderkey = data2[0][j];
</span><span class='line'>          p[j].custkey = data2[1][j];
</span><span class='line'>          p[j].totalprice = data2[2][j];
</span><span class='line'>          p[j].prior = data2[3][j];
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>      
</span><span class='line'>  cout&lt;&lt;"The id 1 has "&lt;&lt;p[0].orderkey&lt;&lt;" "&lt;&lt;p[0].custkey&lt;&lt;" "&lt;&lt;p[0].totalprice&lt;&lt;" "&lt;&lt;p[0].prior&lt;&lt;endl;
</span><span class='line'>  return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>step2 code</h3>

<ul>
<li>to be continued</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linear_regression_tutorial]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/12/linear-regression-tutorial/"/>
    <updated>2014-05-12T15:23:20+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/12/linear-regression-tutorial</id>
    <content type="html"><![CDATA[<h3>First something about training the data</h3>

<ul>
<li>Training set &ndash;> learning algorithm &ndash;> hypothesis &ndash;> estimated data</li>
<li>And we will use multiple features.

<ul>
<li><img src="http://pbking1.github.com/images/lr_gd/mfeat.png"></li>
</ul>
</li>
</ul>


<h3>What is linear regression</h3>

<ul>
<li>To say the idea in normal, we will have n feature</li>
<li>And what we are going to do is to observe them and suppose that they should be in a linear method.</li>
<li>And we should develop a way to find out the parameter to suit the hypothesis function.</li>
</ul>


<!--more-->


<h3>The first method to solve the problem(Gradient decend)</h3>

<h4>how it works?</h4>

<ul>
<li>There are several ideas

<ul>
<li><strong>learn rate</strong>

<ul>
<li>if too small, the gradient descent will be slow</li>
<li>if too large, the gradient descent will overshoot the minimum.

<ul>
<li>it may be fail to converge, or even diverge</li>
</ul>
</li>
<li><img src="http://pbking1.github.com/images/lr_gd/apha.png"></li>
</ul>
</li>
<li><strong>Cost function(J function)</strong>

<ul>
<li>The cost function has no relationship with the x and y.</li>
<li>and it all depend on the parameter <em>theta</em></li>
<li>and the &frac12; in the front is to make the derivation easier</li>
<li>And the cost function is used to <em>make the err(the err between hypothesis and real data) smaller</em>.</li>
</ul>
</li>
<li><strong>Hypothesis</strong>

<ul>
<li>This function is used to <em>make the function good</em>.</li>
<li>good enough to make the y calculate by the function can came close to the real y.</li>
<li>and we will use the err of them to see whether it is good enough or not.</li>
<li>and with all the data, we sum them.</li>
</ul>
</li>
<li><strong>theta</strong>

<ul>
<li><p>we can see in the following picture</p>

<ul>
<li>suppose that we went down the mountain and we can see all the mountain around us are higher than us</li>
<li>and the theta in the cost function is that we <em>reduce</em> theta value in the theta direction</li>
<li>and the deviation of the cost function on theta i is the distance that we move on theta i direction.</li>
</ul>
</li>
<li><p><img src="http://pbking1.github.com/images/lr_gd/gdpic.png"></p></li>
</ul>
</li>
</ul>
</li>
<li><strong>Basic algorithm</strong>

<ul>
<li>start with some theta0, theta1, theta2&hellip;..</li>
<li>Keep changing theta0, theta1, theta2&hellip;. to reduce J(theta0, theta2&hellip;) until we hopefully end up at a minimum.</li>
<li>And this is the key idea of Gradient descend method</li>
</ul>
</li>
<li><img src="http://pbking1.github.com/images/lr_gd/idea.png"></li>
</ul>


<h3>The cpp code of it</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include&lt;stdlib.h&gt;
</span><span class='line'>#include&lt;stdio.h&gt;
</span><span class='line'>#include&lt;string.h&gt;
</span><span class='line'>#include&lt;math.h&gt;
</span><span class='line'>
</span><span class='line'>#define OUTPUTID 10001
</span><span class='line'>#define BUFFERSIZE 50000
</span><span class='line'>#define ROWNUM 10000
</span><span class='line'>#define COLNUM 385
</span><span class='line'>
</span><span class='line'>double alpha = 0.1;
</span><span class='line'>char buffer[BUFFERSIZE];
</span><span class='line'>const char *delim = ",";
</span><span class='line'>double x[ROWNUM][COLNUM];
</span><span class='line'>double y[ROWNUM];
</span><span class='line'>double result[ROWNUM];
</span><span class='line'>double diff[ROWNUM];
</span><span class='line'>double theta[COLNUM];
</span><span class='line'>double temp[COLNUM];
</span><span class='line'>
</span><span class='line'>void readdata(char *, bool);
</span><span class='line'>void writedata(char *);
</span><span class='line'>void test();
</span><span class='line'>void gradient_descend_train();
</span><span class='line'>
</span><span class='line'>int main(){
</span><span class='line'>  readdata("train.csv", true);
</span><span class='line'>  gradient_descend_train();
</span><span class='line'>  readdata("test.csv", false);
</span><span class='line'>  test();
</span><span class='line'>  writedata("predict.csv");
</span><span class='line'>  return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void readdata(char *filename, bool haspredicted){
</span><span class='line'>  FILE *inputfile = fopen(filename, "r");
</span><span class='line'>
</span><span class='line'>  if(inputfile == NULL){
</span><span class='line'>      system("PAUSE");
</span><span class='line'>      exit(1);
</span><span class='line'>  }
</span><span class='line'>  //drop the first line
</span><span class='line'>  fscanf(inputfile, "%s", buffer);
</span><span class='line'>  //read all lines each
</span><span class='line'>  char *s;
</span><span class='line'>  for(int i = 0; i &lt; ROWNUM; i++){
</span><span class='line'>      
</span><span class='line'>      fscanf(inputfile, "%s", buffer);
</span><span class='line'>      //drop the first column
</span><span class='line'>      strtok(buffer, delim);
</span><span class='line'>      //read the predict y
</span><span class='line'>      if(haspredicted){
</span><span class='line'>          s = strtok(NULL, delim);
</span><span class='line'>          sscanf(s, "%lf", &y[i]);
</span><span class='line'>      }
</span><span class='line'>      //init x0
</span><span class='line'>      x[i][0] = 1;
</span><span class='line'>      //read the matrix
</span><span class='line'>      for(int j = 1; j &lt; COLNUM; j++){
</span><span class='line'>          s = strtok(NULL, delim);
</span><span class='line'>          sscanf(s, "%lf", &x[i][j]);
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  fclose(inputfile);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void writedata(char *filename){
</span><span class='line'>  FILE *outputfile = fopen(filename, "w");
</span><span class='line'>  
</span><span class='line'>  if(outputfile == NULL){
</span><span class='line'>      system("pause");
</span><span class='line'>      exit(1);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  fprintf(outputfile, "%s,%s\n", "Id", "reference");
</span><span class='line'>  //write the result into file
</span><span class='line'>  for(int i = 0, id = OUTPUTID; i &lt; ROWNUM; i++, id++){
</span><span class='line'>      //cout&lt;&lt;"write the line"&lt;&lt;i + 1&lt;&lt;endl;
</span><span class='line'>      fprintf(outputfile, "%d,%.6lf\n", id, result[i]);
</span><span class='line'>  }
</span><span class='line'>  fclose(outputfile);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void initTheta(){  //init theta
</span><span class='line'>  char *thetafilename = "theta.dat";
</span><span class='line'>  FILE *f = fopen(thetafilename, "r");
</span><span class='line'>  for(int j = 0; j &lt; COLNUM; j++)
</span><span class='line'>      fscanf(f, "%lf", &theta[j]);
</span><span class='line'>  fclose(f);
</span><span class='line'>  //init the theta
</span><span class='line'>  for(int j = 0; j &lt; COLNUM; j++)
</span><span class='line'>      theta[j] = 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void saveTheta(){   //save the theta
</span><span class='line'>  FILE *f = fopen("theta.dat", "w");
</span><span class='line'>  for(int j = 0; j &lt; COLNUM; j++)
</span><span class='line'>      fprintf(f, "%lf\n", theta[j]);
</span><span class='line'>  fclose(f);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void calculateResult(){
</span><span class='line'>  for(int i = 0; i &lt; ROWNUM; i++){
</span><span class='line'>      result[i] = 0;
</span><span class='line'>      for(int j = 0; j &lt; COLNUM; j++){
</span><span class='line'>          result[i] += theta[j] * x[i][j];
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>double calculateJ(){
</span><span class='line'>  int turn = 0;
</span><span class='line'>  double cost = 0;
</span><span class='line'>  for(int i = 0; i &lt; ROWNUM; i++){
</span><span class='line'>      diff[i] = result[i] - y[i];
</span><span class='line'>      cost += diff[i]*diff[i];
</span><span class='line'>  }
</span><span class='line'>  cost /= (ROWNUM * 2);
</span><span class='line'>  printf("%5d: J(theta) = %.6lf\n", ++turn, cost);
</span><span class='line'>  return cost;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void updateTheta(){
</span><span class='line'>  double sum;
</span><span class='line'>  for(int j = 0 ; j &lt; COLNUM; j++){
</span><span class='line'>      sum = 0;
</span><span class='line'>      for(int i = 0; i &lt; ROWNUM; i++)
</span><span class='line'>          sum += diff[i] * x[i][j];
</span><span class='line'>      theta[j] -= alpha * sum / ROWNUM;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void gradient_descend_train(){
</span><span class='line'>  initTheta();
</span><span class='line'>  alpha = 0.1001;
</span><span class='line'>  double cost = 1000;
</span><span class='line'>  while(cost &gt; 26.4){
</span><span class='line'>      calculateResult();
</span><span class='line'>      cost = calculateJ();
</span><span class='line'>      updateTheta();
</span><span class='line'>  }
</span><span class='line'>  saveTheta();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void test(){
</span><span class='line'>  calculateResult();
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>The Second method to solve the problem(normal equation)</h3>

<ul>
<li>This way is a way shown in the statistic learning.</li>
<li>use the minimum square function to do a regression analyse on the data.

<ul>
<li><img src="http://pbking1.github.com/images/lr_gd/nq.png"></li>
<li>and the process is shown : (385<em>10000)</em>(10000<em>385)</em>(385<em>10000)</em>10000<em>1=385</em>1</li>
</ul>
</li>
<li>and we can see the feature normalise in the normal equation function

<ul>
<li><img src="http://pbking1.github.com/images/lr_gd/nfn.png"></li>
</ul>
</li>
</ul>


<h3>The matlab code of it</h3>

<ul>
<li>The main function</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%load the train data
</span><span class='line'>data = load('train.txt');
</span><span class='line'>X = data(:, 3:386);
</span><span class='line'>y = data(:, 2);
</span><span class='line'>m = length(y);
</span><span class='line'>m2 = size(X);
</span><span class='line'>
</span><span class='line'>%load the test data
</span><span class='line'>data2 = load('test.txt');
</span><span class='line'>feat = data2(:, 2:385);
</span><span class='line'>m3 = size(feat);
</span><span class='line'>
</span><span class='line'>sum_test = [0];
</span><span class='line'>
</span><span class='line'>%use the equation to calculate
</span><span class='line'>theta = normaleqn(X, y, w);
</span><span class='line'>
</span><span class='line'>%calculate the result
</span><span class='line'>result = feat * theta;
</span><span class='line'>
</span><span class='line'>csvwrite('aaa_ver3.csv', [linen result]);</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The normal equation function</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function [theta] = normaleqn(x, y, w)
</span><span class='line'>    theta = zeros(size(x, 2), 1);
</span><span class='line'>    %theta = pinv(x' * x + 4000.3 * eye(size(x, 2))) * x' * y;
</span><span class='line'>     %theta = pinv(x' * x + 3.3 * eye(size(x, 2))) * x' * y;
</span><span class='line'>    theta = pinv(x' * x + w * eye(size(x, 2))) * x' * y;
</span><span class='line'>en</span></code></pre></td></tr></table></div></figure>


<h3>The cpp code of it</h3>
]]></content>
  </entry>
  
</feed>
