<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KING]]></title>
  <link href="http://pbking1.github.com/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2014-09-15T09:32:04-04:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Solution to Access Denied for User 'Root'@'localhost' (Using password:YES)]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/09/solution-to-access-denied-for-user-root-at-localhost-using-password/"/>
    <updated>2014-09-09T11:49:30-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/09/solution-to-access-denied-for-user-root-at-localhost-using-password</id>
    <content type="html"><![CDATA[<h3>Access denied for user &lsquo;root&rsquo;@&lsquo;localhost&rsquo; (using password:YES)</h3>

<ul>
<li>in mac

<ul>
<li>open the my.conf in the directory /usr/local/mysql</li>
<li>add <code>skip-grant-tables</code></li>
<li>restart the mysql service

<ul>
<li><code>sudo /usr/local/mysql/bin/mysqld_safe &amp;</code></li>
</ul>
</li>
<li>then use <code>mysql -uroot -p</code>

<ul>
<li>you can login without password</li>
<li>then update the password after <code>use mysql;</code></li>
<li><code>update user set password=PASSWORD("rootadmin") where user='root';</code></li>
</ul>
</li>
<li>after that

<ul>
<li>delete the <code>skip-grant-tables</code> add in the my.conf file</li>
</ul>
</li>
<li>restart the mysql service</li>
<li>then you can use the <code>mysql -u root -q</code> to login with your new password</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Tutorial(1)]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/08/php-tutorial-1/"/>
    <updated>2014-09-08T15:46:01-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/08/php-tutorial-1</id>
    <content type="html"><![CDATA[<h3>class 1</h3>

<ul>
<li>how the web site work when you request for the page

<ul>
<li>when you log into the internet, you request for the web server for a file that is the page.</li>
<li>if the web server is request for a html file, the server just give it back</li>
<li>else if it is the php file, the server send the php file to the php interpreter and process the php

<ul>
<li>and after the process, the interpreter give it back</li>
<li>(for php is an interpret kind of language and it do not need to be compile)</li>
<li>and then the server send the php file back to the web browser</li>
</ul>
</li>
<li>if the php is interacting with the database, then the code of the php will have sql query with the database.

<ul>
<li>after the query, send back to the php interpreter and then send back to the server and then send back to the web browser</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<p></p>

<ul>
<li>All in all, there are can be three layer in the environment

<ul>
<li>the front is the browser

<ul>
<li>html, css, coding logic</li>
</ul>
</li>
<li>the middle is the server

<ul>
<li>web server and php interpreter</li>
</ul>
</li>
<li>the database aspect is the third

<ul>
<li>mysql database engine</li>
<li>phpMyAdmin(DBMS)</li>
</ul>
</li>
</ul>
</li>
<li>the php interpretation run from the top of the file to the bottom of the top</li>
</ul>


<h3>class 2</h3>

<ul>
<li>&lsquo;&rsquo; these two symbol can be the end of the string</li>
<li>the HEREdoc mechnic is the

<ul>
<li>remember that the final HERE should have no space in front of it</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print &lt;&lt;&lt;HERE
</span><span class='line'>        &lt;p&gt;&lt;/p&gt;
</span><span class='line'>HERE;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>or you can use the filter_input method to validate the email easily.

<ul>
<li>such as without &ldquo;.&rdquo; &ldquo;space&rdquo; and so on.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FMDB and Tableview in IOS]]></title>
    <link href="http://pbking1.github.com/blog/2014/07/08/fmdb-and-tableview-in-ios/"/>
    <updated>2014-07-08T04:01:33-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/07/08/fmdb-and-tableview-in-ios</id>
    <content type="html"><![CDATA[<h3>What is FMDB?</h3>

<ul>
<li>FMDB is a framework that used to simplified the sqlite3 operation</li>
<li>and we can use this framework to operate the sqlite easily</li>
<li>and we need to download the fmdb package in github

<ul>
<li>then copy the fmdb folder to our project</li>
<li>include the sqlite3 framework in your project</li>
</ul>
</li>
<li>then you only need to write <code>import"FMDB.h"</code>

<ul>
<li>you will be able to use the api of fmdb</li>
</ul>
</li>
</ul>


<!--more-->


<h3>tableview is one of the most important thing in IOS</h3>

<ul>
<li>just like the listview in android</li>
<li>and the line in the tableview is called cell</li>
</ul>


<h3>source code</h3>

<ul>
<li>in the source code

<ul>
<li>we do not use storybroad or xib</li>
<li>we just draw the things on the view</li>
</ul>
</li>
<li>Viewcontroller.h</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController&lt;UITableViewDataSource, UITableViewDelegate&gt;{
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@property NSInteger tag;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Viewcontroller.m</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import "FMDB.h"
</span><span class='line'>#import "detailViewController.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>NSMutableArray *listofname;
</span><span class='line'>@synthesize tag;
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  listofname = [[NSMutableArray alloc]init];
</span><span class='line'>    UITableView *tableview = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, 320, 600)];
</span><span class='line'>    
</span><span class='line'>    //used to define the database 
</span><span class='line'>    NSString *docdir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
</span><span class='line'>    NSString *dbpath = [docdir stringByAppendingPathComponent:@"db1.sqlite"];
</span><span class='line'>    FMDatabase *db = [FMDatabase databaseWithPath:dbpath];
</span><span class='line'>    [db open];
</span><span class='line'>    //open the database
</span><span class='line'>    if(![db open]){
</span><span class='line'>        NSLog(@"could not open db");
</span><span class='line'>    }
</span><span class='line'>    //drop the table everytime because if you do not do this
</span><span class='line'>    //the insert sentense will happen every time
</span><span class='line'>    [db executeUpdate:@"drop table exercise"];
</span><span class='line'>    [db executeUpdate:@"drop table poetries"];
</span><span class='line'>    [db executeUpdate:@"create table exercise(_id integer, content text, answer text)"];
</span><span class='line'>    [db executeUpdate:@"create table poetries(_id integer, title text, author text, age text, size integer, line1 text, line2 text, line3 text, line4 text, explain text)"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(1,'赋得古原草送别','白居易','唐','5','离离原上草','一岁一枯荣','野火烧不尽','春风吹又生','译文：茂盛的野草长在古原上的野草多么茂盛，每年枯萎又每年新生。熊熊野火不能将它烧尽，春风吹过它又重获生命。')"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(2,'春夜喜雨','杜甫','唐','5','好雨知时节','当春乃发生','随风潜入夜','润物细无声','译文：春雨知道适应季节，当万物萌发生长时，它伴随着春风，在夜晚偷偷地及时降临，滋润万物又细微无声。') "];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(3,'悯农','李绅','唐','5','锄禾日当午','汗滴禾下土','谁知盘中餐','粒粒皆辛苦','译文：这首悯农诗，写出了农民劳动的艰辛和对浪费粮食的愤慨。在盛夏的正午，农民顶着火辣辣的太阳锄地，汗水淼淌滴在庄稼地里。可是谁又知道，碗中的每一粒饭都包含着农民的辛苦啊!' )"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(4,'静夜思','李白','唐','5','床前明月光','疑是地上霜','举头望明月','低头思故乡','译文：那透过窗户映照在床前的月光，起初以为是一层层的白霜。仰首看那空中的一轮明月，不由得低下头来沉思，愈加想念自己的故乡。')"];
</span><span class='line'>
</span><span class='line'>    //query the database
</span><span class='line'>    FMResultSet *rs = [db executeQuery:@"select * from poetries"];
</span><span class='line'>    while ([rs next]) {
</span><span class='line'>      //add the title column in to the source of the table view
</span><span class='line'>        [listofname addObject:[rs stringForColumn:@"title"]];
</span><span class='line'>    }
</span><span class='line'>    [db close];
</span><span class='line'>    
</span><span class='line'>    [tableview setDelegate:self];   //add the source and delegate
</span><span class='line'>    [tableview setDataSource:self];
</span><span class='line'>    [self.view addSubview:tableview];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define the action in the cell 
</span><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    static NSString *cellidentifier = @"name";  
</span><span class='line'>    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellidentifier];
</span><span class='line'>    
</span><span class='line'>    if(cell == nil){
</span><span class='line'>        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellidentifier];
</span><span class='line'>    }
</span><span class='line'>    NSString *cellvalue = [listofname objectAtIndex:indexPath.row];
</span><span class='line'>    cell.textLabel.text = cellvalue;
</span><span class='line'>    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
</span><span class='line'>    
</span><span class='line'>    cell.userInteractionEnabled = YES;
</span><span class='line'>    
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
</span><span class='line'>{
</span><span class='line'>    return [listofname count];    //define the number of the row in tableview
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSInteger)tableView:(UITableView *)tableView indentationLevelForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    return 0;   //define the indent
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define the event when click the cell(very important)
</span><span class='line'>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    int mark = indexPath.row;  //pass the row number to the next controller using tag
</span><span class='line'>    detailViewController *dv = [[detailViewController alloc] init];
</span><span class='line'>    dv.tag = mark;
</span><span class='line'>    [self presentModalViewController:dv animated:YES];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>    [listofname dealloc];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidUnload
</span><span class='line'>{
</span><span class='line'>    [super viewDidUnload];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>detailViewController.h</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface detailViewController : UIViewController
</span><span class='line'>
</span><span class='line'>@property NSInteger tag;
</span><span class='line'>@property UILabel *label;
</span><span class='line'>@property UILabel *line1label;
</span><span class='line'>@property UILabel *line2label;
</span><span class='line'>@property UILabel *line3label;
</span><span class='line'>@property UILabel *line4label;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>detailViewController.m</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "detailViewController.h"
</span><span class='line'>#import "FMDB.h"
</span><span class='line'>@interface detailViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation detailViewController
</span><span class='line'>
</span><span class='line'>@synthesize tag;
</span><span class='line'>@synthesize label;
</span><span class='line'>@synthesize line1label;
</span><span class='line'>@synthesize line2label;
</span><span class='line'>@synthesize line3label;
</span><span class='line'>@synthesize line4label;
</span><span class='line'>NSMutableArray *listofname;
</span><span class='line'>
</span><span class='line'>- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
</span><span class='line'>{
</span><span class='line'>    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
</span><span class='line'>    if (self) {
</span><span class='line'>        // Custom initialization
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    self.view.backgroundColor = [UIColor whiteColor];
</span><span class='line'>    NSString *tmep = [NSString stringWithFormat:@"%d", self.tag + 1]; 
</span><span class='line'>    //convert the integer tag into string
</span><span class='line'>
</span><span class='line'>    NSString *docdir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
</span><span class='line'>    NSString *dbpath = [docdir stringByAppendingPathComponent:@"db1.sqlite"];
</span><span class='line'>    FMDatabase *db = [FMDatabase databaseWithPath:dbpath];
</span><span class='line'>    [db open];
</span><span class='line'>    if(![db open]){
</span><span class='line'>        NSLog(@"could not open db");
</span><span class='line'>    }
</span><span class='line'>    //use the tag passed by the previous controller and query the database
</span><span class='line'>    FMResultSet *rs = [db executeQuery:@"select * from poetries where _id = ?", tmep];
</span><span class='line'>    
</span><span class='line'>    line1label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 300, 20)];
</span><span class='line'>    line2label = [[UILabel alloc] initWithFrame:CGRectMake(10, 50, 300, 20)];
</span><span class='line'>    line3label = [[UILabel alloc] initWithFrame:CGRectMake(10, 80, 300, 20)];
</span><span class='line'>    line4label = [[UILabel alloc] initWithFrame:CGRectMake(10, 100, 300, 20)];
</span><span class='line'>    while ([rs next]) {
</span><span class='line'>        line1label.text = [rs stringForColumn:@"line1"];
</span><span class='line'>        line2label.text = [rs stringForColumn:@"line2"];
</span><span class='line'>        line3label.text = [rs stringForColumn:@"line3"];
</span><span class='line'>        line4label.text = [rs stringForColumn:@"line4"];
</span><span class='line'>    }
</span><span class='line'>    [self.view addSubview:line1label];
</span><span class='line'>    [self.view addSubview:line2label];
</span><span class='line'>    [self.view addSubview:line3label];
</span><span class='line'>    [self.view addSubview:line4label];
</span><span class='line'>    [db close];
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Opendns to Cross the Great Firewall in China]]></title>
    <link href="http://pbking1.github.com/blog/2014/07/08/use-opendns-to-cross-the-great-firewall-in-china/"/>
    <updated>2014-07-08T03:22:39-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/07/08/use-opendns-to-cross-the-great-firewall-in-china</id>
    <content type="html"><![CDATA[<h3>once upon a time</h3>

<ul>
<li>we can log in facebook and google directly</li>
<li>but nowadays we can not</li>
<li>and because DNS hijacking and DNS cache posioning, we can not log in directly anymore</li>
</ul>


<!--more-->


<h3>what is DNS hikacking?</h3>

<ul>
<li>DNS hijacking(劫持)</li>
<li>to simplifiy the idea

<ul>
<li>when you type in google.com, you will not attach the google.com

<ul>
<li>you will be direct to the baidu.com</li>
</ul>
</li>
<li>and this is the DNS hijacking</li>
</ul>
</li>
<li><strong>and the reason why this will happen is that the DNS server is cracked and the domain name will be parse to the wrong ip.</strong></li>
<li>and recently the govenment is using this kind of strategy</li>
</ul>


<h3>what is DNS cache posioning?</h3>

<ul>
<li>DNS污染</li>
<li>this idea used to be used to block the youtube, facebook website</li>
<li>this is on the protocol layer</li>
<li>and the mechisim is that when you want to launch the particular website

<ul>
<li>the port 53 UDP is check and when they found that you want to attach particular website, they will change the domain name parse DNS server into a wrong one and then you will not be able to get the correct ip.</li>
<li>then you will not be able to get to the website.</li>
</ul>
</li>
</ul>


<h3>How dns works?</h3>

<ul>
<li>first, when we use some domain name like &ldquo;www.facebook.com&rdquo;

<ul>
<li>and when we type the domain name into the website

<ul>
<li>the website will send the name to the dns server to check the ip</li>
<li>then return the ip the our computer</li>
<li>then we will know the ip of the target website

<ul>
<li>and we will be able to get to the website</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>why can we use this in China?</h3>

<ul>
<li>Because in China when you type &ldquo;www.google.com&rdquo;</li>
<li>they block the dns parse not the connection

<ul>
<li>so we will be able to break through the wall if we use the other dns server to help use parse the domain name</li>
</ul>
</li>
</ul>


<h3>how to use opendns</h3>

<ul>
<li>change the dns settings in the PC or laptop

<ul>
<li>if you want to use the google dns

<ul>
<li>set &ldquo;8.8.8.8&rdquo; and &ldquo;8.8.4.4&rdquo;</li>
</ul>
</li>
<li>if you want to use the opendns

<ul>
<li>set &ldquo;208.67.222.222&rdquo; and &ldquo;208.67.220.220&rdquo;</li>
<li>or set &ldquo;42.120.21.30&rdquo; and &ldquo;221.10.251.52&rdquo;</li>
</ul>
</li>
</ul>
</li>
<li>then if you are using Max 10.8 or above

<ul>
<li>you can renew the dns setting using

<ul>
<li>&ldquo;sudo killall -HUP mDNSResponder&rdquo;</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>when not to use opendns</h3>

<ul>
<li>when you are using the payment or something private

<ul>
<li>do not use opendns</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS 报表类库（trial 30days）]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/25/ios-bao-biao-lei-ku-%28trial-30days%29/"/>
    <updated>2014-06-25T04:25:40-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/25/ios-bao-biao-lei-ku-(trial-30days)</id>
    <content type="html"><![CDATA[<h3>一个非常容易使用的报表类库</h3>

<ul>
<li>NChart3D

<ul>
<li>但是只能免费使用30天</li>
<li>并且经过真机调试

<ul>
<li>效果做得很好，除了不能点击某个地方显示具体信息之外其他都做得很好</li>
<li>比如可以方法缩小，左右拖，平移旋转都行</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>在AppDelegate.m里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "AppDelegate.h"
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@implementation AppDelegate
</span><span class='line'>{
</span><span class='line'>    UIWindow *m_window;
</span><span class='line'>}
</span><span class='line'>@synthesize window = m_window;
</span><span class='line'>
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
</span><span class='line'>{
</span><span class='line'>    m_window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
</span><span class='line'>    m_window.userInteractionEnabled = YES;
</span><span class='line'>    m_window.multipleTouchEnabled = YES;
</span><span class='line'>    [m_window makeKeyAndVisible];
</span><span class='line'>    m_window.rootViewController = [[ViewController new] autorelease];
</span><span class='line'>    // Override point for customization after application launch.
</span><span class='line'>    return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Viewcontroller.h里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController&lt;NChartSeriesDataSource&gt;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Viewcontroller.m里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>{
</span><span class='line'>    NChartView *m_view;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>    [m_view release];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view, typically from a nib.
</span><span class='line'>    m_view = [[NChartView alloc] initWithFrame:CGRectZero];
</span><span class='line'>    m_view.chart.licenseKey = @"";
</span><span class='line'>    m_view.chart.cartesianSystem.margin = NChartMarginMake(10.0f, 10.0f, 10.0f, 20.0f);
</span><span class='line'>    m_view.chart.shouldAntialias = YES;
</span><span class='line'>    NChartColumnSeries *serires = [[NChartColumnSeries new] autorelease];
</span><span class='line'>    serires.brush = [NChartSolidColorBrush solidColorBrushWithColor:[UIColor colorWithRed:0.0 green:0.7 blue:0.4 alpha:1.0]];
</span><span class='line'>    serires.dataSource = self;
</span><span class='line'>    [m_view.chart addSeries:serires];
</span><span class='line'>    [m_view.chart updateData];
</span><span class='line'>    self.view = m_view;   //使用新建的view
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSArray *)seriesDataSourcePointsForSeries:(NChartSeries *)series
</span><span class='line'>{
</span><span class='line'>    NSMutableArray *result = [NSMutableArray array];
</span><span class='line'>    for(int i = 0; i &lt; 10; i++)
</span><span class='line'>        [result addObject:[NChartPoint pointWithState:[NChartPointState pointStateAlignedToXWithX:i Y:(rand()%30) + 1]forSeries:series]];
</span><span class='line'>    return result;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSString *)seriesDataSourceNameForSeries:(NChartSeries *)series
</span><span class='line'>{
</span><span class='line'>    return @"My series";
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>效果

<ul>
<li><img src="http://pbking1.github.com/images/ios/ios_table1.png"></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS UILabel and UITextfield]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/25/ios-uilabel-and-uitextfield/"/>
    <updated>2014-06-25T03:00:33-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/25/ios-uilabel-and-uitextfield</id>
    <content type="html"><![CDATA[<h3>label</h3>

<ul>
<li>相当于android里面的textview</li>
<li>用setText来设置内容</li>
<li>setBackground来设置背景颜色</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label1 = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 290, 44)];
</span><span class='line'>[label1 setText:@"项目里程碑                          请选择&gt;"];
</span><span class='line'>[label1 setBackgroundColor:[UIColor whiteColor]];
</span><span class='line'>[self.view addSubview:label1];
</span></code></pre></td></tr></table></div></figure>


<h3>textfield</h3>

<ul>
<li>相当于android里面的edittext</li>
<li>用layer.cornerRadius设置圆角</li>
<li>placeholder设置hint，提示</li>
<li>貌似使用这些方法需要把UITextfield定义在.h里面</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UITextField *text1 = [[UITextField alloc] initWithFrame:CGRectMake(10, 340, 290, 84)];
</span><span class='line'>self.text1.placeholder = @"进度说明";
</span><span class='line'>self.text1.layer.cornerRadius = 10;
</span><span class='line'>[text1 setBackgroundColor:[UIColor whiteColor]];
</span><span class='line'>[self.view addSubview:text1];</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Selector(jump to the Other Page)]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-selector-jump-to-the-other-page/"/>
    <updated>2014-06-24T23:02:32-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-selector-jump-to-the-other-page</id>
    <content type="html"><![CDATA[<h3>响应事件或者跳转</h3>

<ul>
<li>使用每个控件里面的action的selector</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIBarButtonItem *leftbutton = [[UIBarButtonItem alloc] initWithTitle:@"cancel" style:UIBarButtonSystemItemDone target:self action:@selector(goBack)];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>实现selector的跳转

<ul>
<li>定义要跳转到的页面的viewcontroller</li>
<li>用presentModalViewController跳转</li>
<li>用完记得释放资源</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)goBack{
</span><span class='line'>    basicinfo *p1 = [[basicinfo alloc] init];
</span><span class='line'>    [self presentModalViewController:p1 animated:YES];
</span><span class='line'>    [p1 release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS UIButton]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-uibutton/"/>
    <updated>2014-06-24T23:01:58-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-uibutton</id>
    <content type="html"><![CDATA[<h3>IOS的button其实和其他的控件使用方法差不多</h3>

<ul>
<li>首先初始化button，用CGRectMake把控件画在view上</li>
<li>使用setTitle设置button的文字</li>
<li>使用layer来设置边界</li>
<li>用action里面设置selector来跳转或者响应事件</li>
</ul>


<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIButton *button1 = [[UIButton alloc] initWithFrame:CGRectMake(0, 420, 160, 44)];
</span><span class='line'>[button1 setTitle:@"进度填报" forState:UIControlStateNormal];
</span><span class='line'>//button1.backgroundColor = [UIColor colorWithRed:(12/255) green:(22/255) blue:(32/355) alpha:1.0];
</span><span class='line'>[button1.layer setBorderWidth:1.0];
</span><span class='line'>[button1 setTitleColor:[UIColor lightGrayColor] forState:UIControlStateNormal];
</span><span class='line'>[button1 addTarget:self action:@selector(gotorenewpage:) forControlEvents:UIControlEventTouchUpInside];
</span><span class='line'>[self.view addSubview:button1];</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)gotorenewpage:(UIButton *)paramSender{
</span><span class='line'>    viewcontroller *p = [[viewcontroller alloc] init];
</span><span class='line'>    [self presentModalViewController:p animated:YES];
</span><span class='line'>    [p release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Segment Control]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-segment-control/"/>
    <updated>2014-06-24T23:01:49-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-segment-control</id>
    <content type="html"><![CDATA[<h3>segment control</h3>

<ul>
<li>这一段是使用CGrectmake在view上直接按照坐标大小画segment control</li>
<li>因为tabbar只能按照默认的放在底部</li>
<li>因此要使用放在顶部的类似tabbar的效果有两种方式

<ul>
<li>一种就是segment control，每点击一个item就跳转到那个item对应的view那里</li>
<li>还有一种是使用button来仿造tabbar</li>
<li>不过总体来说还是button效果好一点</li>
</ul>
</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>    //segment control
</span><span class='line'>    NSArray *items = [NSArray arrayWithObjects:@"关注项目", @"全部项目", nil];
</span><span class='line'>    UISegmentedControl *segmentedControl = [[UISegmentedControl alloc] initWithItems:items];
</span><span class='line'>    [segmentedControl setFrame:CGRectMake(15, 50, 300, 50)];  //画segment control
</span><span class='line'>    [segmentedControl addTarget:self action:@selector(segmentedControlChangedValue:) forControlEvents:UIControlEventValueChanged];  //响应事件
</span><span class='line'>    [segmentedControl setTag:1];
</span><span class='line'>    [self.view addSubview:segmentedControl];
</span><span class='line'>    [segmentedControl release];
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>接下来通过使用不同的segmentControl里面的index来判断点了哪个，然后进行跳转</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)segmentedControlChangedValue:(UISegmentedControl *)segmentedControl {
</span><span class='line'>    NSInteger selectedindex = [segmentedControl selectedSegmentIndex];
</span><span class='line'>    if(selectedindex == 0){
</span><span class='line'>        partViewController *p = [[partViewController alloc] init];
</span><span class='line'>        [self presentModalViewController:p animated:YES];
</span><span class='line'>        //[self dismissModalViewControllerAnimated:YES];
</span><span class='line'>        [p release];
</span><span class='line'>    }else if(selectedindex == 1){
</span><span class='line'>        allproViewController *a = [[allproViewController alloc] init];
</span><span class='line'>        [self presentModalViewController:a animated:YES];
</span><span class='line'>        //[self dismissModalViewControllerAnimated:YES];
</span><span class='line'>        [a release];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something Basic About Software Testing]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/20/something-basic-about-software-testing/"/>
    <updated>2014-06-20T08:24:14-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/20/something-basic-about-software-testing</id>
    <content type="html"><![CDATA[<h3>一些常识性的问题</h3>

<ul>
<li>软件测试者的目标是什么？

<ul>
<li>找bug，并且尽快的找到和修复</li>
</ul>
</li>
<li>在一个已经完成的产品上修复一个bug比在一开始就找到要难更多倍</li>
<li>为什么完全测试一个软件是不可能的？

<ul>
<li>因为太多输入输出</li>
<li>太多路径组合</li>
</ul>
</li>
<li>测试人员最重要的技能是编程</li>
</ul>


<!--more-->


<h3>Failure, Fault and Error</h3>

<ul>
<li>Failure

<ul>
<li>一个系统的状态出现不正确的行为</li>
</ul>
</li>
<li>Fault

<ul>
<li>也叫“bug”和“defect”</li>
<li>导致failure的原因</li>
</ul>
</li>
<li>Error

<ul>
<li>由于人类的错误导致的fault</li>
</ul>
</li>
<li>test oracle

<ul>
<li>一个用来判断测试是否通过的机制</li>
</ul>
</li>
</ul>


<h3>bug</h3>

<ul>
<li>编程错误比bug要多得多</li>
<li>不是所有的软件在发布之前都会被修复</li>
</ul>


<h3>Software Quarlity</h3>

<ul>
<li>要写出没有bug的程序是不可能的</li>
<li>有三个要素能够导致程序中的bug

<ul>
<li>程序的复杂性</li>
<li>程序的需求可变性</li>
<li>程序的需求不变性</li>
</ul>
</li>
</ul>


<h3>QA和QC</h3>

<ul>
<li>QA面向过程，QC面向产品</li>
<li>QA是制定方案确保系统能够达到目标</li>
<li>QC是指定方案来评估一个系统

<ul>
<li>validation

<ul>
<li>我们建立的系统是否是正确的</li>
</ul>
</li>
<li>verification

<ul>
<li>我们是否使用正确的方法的研发了系统</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>test stub 和 test driven(单元测试)</h3>

<ul>
<li>test stub

<ul>
<li>自顶向下， stub out</li>
</ul>
</li>
<li>test driver

<ul>
<li>自下而上</li>
</ul>
</li>
</ul>


<h3>PMOD</h3>

<ul>
<li>探索性测试方法</li>
<li>黑盒测试

<ul>
<li>忽略内部实现的测试</li>
</ul>
</li>
<li>白盒测试

<ul>
<li>基于分析代码逻辑的测试</li>
</ul>
</li>
<li>基于模型的测试</li>
</ul>


<h3>test oracle</h3>

<ul>
<li>用来检测待测系统在一个特定执行中的行为是否正确的方法</li>
</ul>


<h3>白盒测试</h3>

<ul>
<li>重点

<ul>
<li>动态白盒测试和调试的相似性</li>
<li>单元测试，集成测试，系统测试的等级划分和概念</li>
<li>测试驱动的概念（test driver）</li>
<li>测试的柱和桩的概念和区别</li>
</ul>
</li>
<li>考点

<ul>
<li>动态白盒测试

<ul>
<li>控制流：代码行，分支，条件，基本路径覆盖。循环至少走0次和1次。</li>
<li>数据流： 定义使用对，DCU，DPU，选择合适的测试用例进行覆盖

<ul>
<li>x的du-path

<ul>
<li>起点一定要是def(x)</li>
<li>终点一定要是p-use(x)或者c-use(x)</li>
</ul>
</li>
<li>def

<ul>
<li>用来定义变量

<ul>
<li>x = 0; def(x)</li>
<li><em>y = 1; def(</em>y)</li>
<li>scanf(&ldquo;%d %d&rdquo;. &amp;x, &amp;y); def(x), def(y)</li>
<li>int x[10]; def(x). def(x[0]), def(x[9])</li>
</ul>
</li>
</ul>
</li>
<li>undef

<ul>
<li>不可使用的变量

<ul>
<li>free(p); undef(*p)</li>
</ul>
</li>
</ul>
</li>
<li>定义使用对</li>
<li>Cuse, puse, 选择测试用例覆盖

<ul>
<li>c-use(x): x直接影响计算或者就是输出的一部分

<ul>
<li>y = x + 1;</li>
<li>printf(&ldquo;%d&rdquo;, x);</li>
</ul>
</li>
<li>p-use(x): x间接影响或者会影响一个控制流

<ul>
<li>if(x == 0) y = 1;</li>
<li>switch(x) case 1: &hellip; default:&hellip;</li>
<li>if(A[i + 1] > 0) return ;   p-use(A), p-use(i), p-use(A[i+1])</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>循环覆盖测试：循环要循环执行0次1次多次。  多次，如果没规定，尽量大。

<ul>
<li>如果有循环，用例必须包含0次和1次和多次，多次如果没有说明，随便选个数，如10）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>控制流</p>

<ul>
<li>基本快</li>
<li>分支</li>
<li>循环</li>
<li>基本路径</li>
<li>控制流图

<ul>
<li>用处是使得我们准备覆盖的路径是足够的</li>
<li>有三种

<ul>
<li>条件if （菱形）</li>
<li>合并merge（圆形）</li>
<li>执行computation（长方形）</li>
</ul>
</li>
</ul>
</li>
<li>覆盖

<ul>
<li>基本块覆盖

<ul>
<li>基本块：单入口，单出口，顺序执行</li>
<li>其实就是每一行代码（除了括号和do），然后如果有while和do，则do为一个汇集点指向下一句语句</li>
</ul>
</li>
<li>循环覆盖

<ul>
<li>有两个基本要点

<ul>
<li>一个是循环体</li>
<li>一个是控制条件(if)</li>
</ul>
</li>
<li>其实就是改变循环次数来达到覆盖循环的目的</li>
<li>一般是0，1，多次</li>
</ul>
</li>
<li>基本路径覆盖

<ul>
<li>基本路径集

<ul>
<li>可以用来组成其他路径的最小集合</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>数据流</p>

<ul>
<li>只关心数据的变化而不关心是否有判断条件或者循环</li>
</ul>
</li>
<li>逻辑</li>
<li>交互</li>
<li>突变</li>
</ul>


<h3>黑盒测试</h3>

<ul>
<li>三种级别

<ul>
<li>等级一

<ul>
<li>一个输入 &ndash;> 一个输出</li>
<li>等价类划分（划分输入区域成为等价类）

<ul>
<li>e.g 例如学号为07000-07100

<ul>
<li>求学号的等价类

<ul>
<li>首先是5位数

<ul>
<li>‘07050’</li>
</ul>
</li>
<li>小于07000的五位数

<ul>
<li>‘00000’</li>
</ul>
</li>
<li>大于07100的五位数

<ul>
<li>‘99999’</li>
</ul>
</li>
<li>小于五位数非空的数字

<ul>
<li>‘1’</li>
</ul>
</li>
<li>大于五位数非空的数字

<ul>
<li>‘99999999’</li>
</ul>
</li>
<li>有非数字的

<ul>
<li>‘aa1’</li>
<li>有三种（大于，小于和等于5位数的）</li>
</ul>
</li>
<li>空串

<ul>
<li>“ ”</li>
</ul>
</li>
<li>空

<ul>
<li>&ldquo;&rdquo;</li>
</ul>
</li>
<li>超长的

<ul>
<li>“999999999999999999999999999999999999”</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>边界值分析（对每个等价类进行边界值分析）

<ul>
<li>其实就是找边界值</li>
<li>e.g

<ul>
<li>有几个类</li>
<li>c1:(0,2)  c2:[2,5) c3:[5, 10000)</li>
<li>则c1的边界为0.001，1.999， 2</li>
<li>c2为2.001， 5</li>
<li>c3为5.001</li>
</ul>
</li>
<li>规律为(x,x), [x,x]

<ul>
<li>左边圆括号：x + 0.001</li>
<li>右边圆括号：x &ndash; 0.001(不是很清楚) 和 x</li>
<li>左边方括号：x + 0.001</li>
</ul>
</li>
</ul>
</li>
<li>因果图和决策表（通过把输入输出以边的形式来分析关联）

<ul>
<li>把起因和结果关联起来的图</li>
</ul>
</li>
</ul>
</li>
<li>等级二

<ul>
<li>多个输入 &ndash;> 一个输出</li>
<li>组合覆盖

<ul>
<li>覆盖每个t路交互至少一次</li>
</ul>
</li>
<li>带约束的组合覆盖

<ul>
<li>覆盖符合约束的所有参数组合</li>
<li>删除不可能的参数组合</li>
<li>删除冗余组合</li>
</ul>
</li>
</ul>
</li>
<li>等级三

<ul>
<li>多步多个输入 &ndash;> 一个输出</li>
<li>基于事件的覆盖

<ul>
<li>e.g 例如GUI程序 == 一系列事件</li>
</ul>
</li>
<li>基于状态的覆盖

<ul>
<li>e.g 例如GUI程序 == 一系列状态特征</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>自动测试工具</h3>

<ul>
<li>回归测试</li>
<li>接受测试</li>
<li>beta测试</li>
<li>alpha测试</li>
</ul>


<h3>测试文档</h3>

<ul>
<li>测试计划与测试方案的区别？

<ul>
<li>测试计划

<ul>
<li>组织管理层面</li>
<li> 对测试全过程的组织、资源、原则等进行规定和约束，并制定测试全过程各个阶段的任务及时间进度安排，提出对各项任务的评估、风险分析和需求管理。</li>
<li>也就是行动纲要</li>
</ul>
</li>
<li>测试方案

<ul>
<li>技术层面</li>
<li>描述需要测试的特性、测试的方法、测试环境的规划、测试工具的设计和选择、测试用例的设计方法、测试代码的设计方案。</li>
<li>也就是具体措施</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML Final Exam Note]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/11/the-note-of-the-uml-final-exam/"/>
    <updated>2014-06-11T02:45:34-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/11/the-note-of-the-uml-final-exam</id>
    <content type="html"><![CDATA[<h3>UML final exam note</h3>

<ul>
<li>3个小时</li>
</ul>


<h4>选择题</h4>

<ul>
<li>10个选择，一题2分</li>
<li>去看下up（书上第二章）。</li>
</ul>


<!--more-->


<h4>画图题</h4>

<ul>
<li>考试的时候把图导出来，贴到word里面</li>
<li>除了组件图</li>
<li>剩下的每个图18分钟</li>
<li><p>1.用例图</p>

<ul>
<li>给一个中文文档</li>
<li>用例是什么？

<ul>
<li>text，interaction（system和Actor）</li>
<li>fill goal(一切围绕)</li>
<li>用一个人，然后一个系统的服务来满足一个goal</li>
<li>有可能服务和goal名字一样</li>
<li>像数据库叫后台参与者</li>
<li>像银行那些叫支持性参与者</li>
<li>文档从头到尾只有一个人

<ul>
<li>有的时候可能有一个actress</li>
</ul>
</li>
<li>goal一定是动词或者动名词，来表达实现goal。

<ul>
<li>通常在开始或者结束</li>
</ul>
</li>
<li><p>看段落就好了，不用研究细节</p></li>
<li><p>0分</p>

<ul>
<li>用例图里面出现主菜单，什么什么界面，什么什么功能（功能倾向）</li>
<li>有操作流程倾向（不要画得有顺序）</li>
<li>只要出现就完蛋</li>
<li>没框（boundry）扣一分

<ul>
<li>画了框没写名字扣一分</li>
<li>定范围</li>
</ul>
</li>
<li>Actor主要参与者一定画在图的左边

<ul>
<li>画了管理员扣一分</li>
</ul>
</li>
<li>goal写在框里面也就是椭圆里面的东西

<ul>
<li>一定要有extend或者include</li>
<li>一定要是虚线，实线就会被扣分</li>
<li>箭头方向一定要是正确的，extend指向goal，include相反</li>
<li>主要的节点有两个至三个include或者extend</li>
<li>名字要是动词，不能是名词Actor和用例相连的图，一定要用没有箭头的实线相连</li>
<li>外部子系统一定要画出来</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2.活动图</p>

<ul>
<li>考一个用例的活动图</li>
<li>一定有一个用例在里面</li>
<li>表示控制权的转移</li>
<li>准则

<ul>
<li>老板准则

<ul>
<li>如果画了登陆（扣1分）</li>
</ul>
</li>
<li>基本应用过程准则

<ul>
<li>东西不能太大</li>
<li>把东西说详细</li>
</ul>
</li>
<li>size

<ul>
<li>规模不能太大</li>
<li>单操作的东西不要画</li>
</ul>
</li>
</ul>
</li>
<li>每个用例一定都能找到一个UI</li>
<li>不能include，不然就违背了size准则</li>
<li>简化的写就好了</li>
<li>还有一种多泳道的图

<ul>
<li>考试不考</li>
</ul>
</li>
</ul>
</li>
<li>3.状态图

<ul>
<li>其实把状态计画好了就行了</li>
<li>定义状态

<ul>
<li>把步骤写出来就好了</li>
<li>基本上不用太在意细节</li>
</ul>
</li>
<li>状态图是时间的生命周期</li>
<li>条件的变迁采用guard</li>
<li>考试

<ul>
<li>一定要找到guard</li>
<li>怎么起名？

<ul>
<li>不能说“按continue”，而要说“选房间”</li>
<li>要说用户做的外部事件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>4.领域模型（概念类图）</p>

<ul>
<li>识别一个用例里面的名词</li>
<li>太多动词或者太多线，就0分</li>
<li>一定要找概念（抽象出类）</li>
<li>通常Actor不要画在属性里面</li>
<li>扣分点

<ul>
<li>如果写了button，则扣分</li>
<li>如果出现database，扣分</li>
<li>在一个领域模型里面，这两个东西首要不要出现</li>
<li>命名必须是名词，不能使动词，用了就完蛋</li>
<li>属性给一些重要的就可以了，不要画一个图全部都没有属性的</li>
<li>不要在属性里面写操作！</li>
<li>关联

<ul>
<li>如果关联出现箭头而不是直线</li>
<li>则扣分</li>
<li>箭头一般都是include，所以不要画箭头</li>
<li>关联上一定要有名字（包含contain）</li>
<li>记得写多重性</li>
</ul>
</li>
</ul>
</li>
<li>在一段文档中经常出现的名词，一定要挑出来</li>
<li>抽象出的类不能出现复数或者抽象数据类型</li>
<li>描述类就赶紧加上</li>
<li>写在框里面的名词不能无中生有</li>
</ul>
</li>
<li><p>5.顺序图</p>

<ul>
<li>要用（BCE规则）画</li>
<li>用来表达一个场景的人机交互的事件的序列</li>
<li>一般是表达主场景和频繁出现的</li>
<li>考试考主场景

<ul>
<li>用户达成目标的最便捷的方式</li>
<li>或者最期望的方式</li>
<li>主场景没有if条件</li>
<li>既然是系统顺序图，第一个对象一定是system，不然就0分</li>
<li>要加“：”

<ul>
<li>表示对象</li>
</ul>
</li>
<li>在User后面的那个就是”:System”</li>
</ul>
</li>
</ul>
</li>
<li><p>6.包图</p>

<ul>
<li>比较容易，也比较简洁</li>
<li>使用MVC，来构建城市模型（考题）</li>
<li>然后把需要的类和控制器填到三个package里面</li>
<li>把界面放在视图层</li>
</ul>
</li>
<li><p>7.交互图</p>

<ul>
<li>注意起名字</li>
<li>和顺序图内容差不多</li>
<li>和包图里面的MVC的三个包内容一致

<ul>
<li>比如view就要再包图的view包里面</li>
</ul>
</li>
<li>去官网看一下老师发给教程

<ul>
<li>讲的比较详细</li>
</ul>
</li>
</ul>
</li>
<li><p>8.设计类图</p>

<ul>
<li>把控制器和实体类画进去</li>
<li>除了控制器之外，其他的东西和领域模型里面是一样的</li>
<li>属性的关联一定要实现</li>
</ul>
</li>
<li><p>9.部署图（附加题）</p>

<ul>
<li>差不多的</li>
<li>部署条件是告诉你的</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TOFEL Experience(have Not Passed 100 Yet)]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/09/tofel-experience-have-not-passed-100-yes/"/>
    <updated>2014-06-09T02:45:34-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/09/tofel-experience-have-not-passed-100-yes</id>
    <content type="html"><![CDATA[<ul>
<li>just for myself~~</li>
</ul>


<h3>reading</h3>

<ul>
<li>just reading the computer text book</li>
<li>do some more reading on <the economic> and <new york time></li>
</ul>


<!--more-->


<h3>listening</h3>

<ul>
<li>listen to the TPO carefully and do many times</li>
<li>watch the US or UK movie without seeing what they are saying</li>
</ul>


<h3>writing</h3>

<ul>
<li>write in simple way</li>
<li>do not use too many words that you do not know very well</li>
</ul>


<h3>speaking</h3>

<ul>
<li>speak louder and clearer</li>
<li>do more practice like speaking loudly after lunch or recite the good paper</li>
</ul>


<h4>some tips for taking tofel test in China</h4>

<ul>
<li>ID card is the only thing that are needed for the test</li>
<li>try order the test two month before the data you want</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Sqlite in Html5]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/08/use-sqlite-in-html5/"/>
    <updated>2014-06-08T22:50:05-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/08/use-sqlite-in-html5</id>
    <content type="html"><![CDATA[<ul>
<li>There are three ways to store data using html5

<ul>
<li>using database (sqlite)</li>
<li>using localStorage

<ul>
<li>will only store on client, will not send to server</li>
<li>this data can be read even using different block on the same browser</li>
<li>the data will not disapear unless you delete it</li>
</ul>
</li>
<li>using sessionStorage</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>The localStorage and sessionStorage are storing the data on your computer and after the web page is loaded</p>

<ul>
<li>we can use javascript to get the data</li>
</ul>
</li>
<li><p>running the first time</p>

<ul>
<li>use all the following code can see the db insert and query successfully</li>
</ul>
</li>
<li>but in the second time

<ul>
<li>you should note the create and insert</li>
<li>then you can see the result</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>      &lt;script type="text/javascript"&gt;
</span><span class='line'>          //the first way to store the data
</span><span class='line'>          if(localStorage.pagecount){
</span><span class='line'>              localStorage.pagecount = Number(localStorage.pagecount) + 1;
</span><span class='line'>              }else{
</span><span class='line'>              localStorage.pagecount = 1;
</span><span class='line'>          }
</span><span class='line'>          document.write("Visits: " + localStorage.pagecount + " time(s).");
</span><span class='line'>
</span><span class='line'>          //the second way to store the data
</span><span class='line'>          //using sqlite
</span><span class='line'>          var db = openDatabase("mytestdb", "1.0", "stu list", 1024*1024, function(){});
</span><span class='line'>          //use the command `openDatabase` can create a data base
</span><span class='line'>          //name, version, discription, db size
</span><span class='line'>          alert("&lt;p&gt;create db success&lt;/p&gt;");
</span><span class='line'>          db.transaction(function(tx){
</span><span class='line'>                  tx.executeSql("CREATE TABLE IF NOT EXISTS test(id int UNIQUE, title TEXT, content TEXT)");
</span><span class='line'>                  document.write("&lt;p&gt;create table test successfully&lt;/p&gt;");
</span><span class='line'>                  tx.executeSql("insert into test(id, title, content) values(1, '111', 'swq')");
</span><span class='line'>                  tx.executeSql("insert into test(id, title, content) values(2, 'bbb', 'sawf')");
</span><span class='line'>                  document.write("&lt;p&gt;insert two contents successfully&lt;/p&gt;");
</span><span class='line'>                  tx.executeSql("SELECT * FROM test", [], function(tx, rs){
</span><span class='line'>                      var len = rs.rows.length;
</span><span class='line'>                      alert(len + "");
</span><span class='line'>                      for(var i = 0; i &lt; rs.rows.length; i++){
</span><span class='line'>                          var testObj = rs.rows.item(i);
</span><span class='line'>                          alert(testObj.id + "-----" + testObj.title);
</span><span class='line'>                      }
</span><span class='line'>                  });
</span><span class='line'>          });
</span><span class='line'>      &lt;/script&gt;
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phonegap 框架原理]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/06/phonegap-kuang-jia-yuan-li/"/>
    <updated>2014-06-06T05:03:43-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/06/phonegap-kuang-jia-yuan-li</id>
    <content type="html"><![CDATA[<h4>phonegap 实现原理</h4>

<ul>
<li><code>关键</code>

<ul>
<li>1.用webview在本地来渲染解析html

<ul>
<li><strong>因此实际上他就是一个内嵌的浏览器</strong>

<ul>
<li>类似于一个WebView，但是phonegap对webview做了些改造</li>
</ul>
</li>
</ul>
</li>
<li>2.基于plugin模式来封装调用原生API

<ul>
<li>以原生app的方式来运行</li>
<li>用js调用原生的功能</li>
</ul>
</li>
<li>3.在框架首次启动的时候加载CallbackServer线程，并且监听前端XHR请求和链表中有无数据

<ul>
<li>当XHR请求来了而链表为空，则线程等待10秒

<ul>
<li>如果这个时间内有数据来，那么就唤醒线程把数据传到前端</li>
</ul>
</li>
<li>如果10s后没有数据，则传空数据回前端</li>
<li><code>基于服务器推技术</code></li>
</ul>
</li>
<li>4.同步请求和异步请求有关键的区别</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><code>他如何实现跨平台的</code>

<ul>
<li>phonegap在每一种中都实现了一套后台的框架，分别和每个平台的API进行交互，从而调用它的原生API，然后对应开发人员提供统一的接口，也就是phonegap的API。</li>
<li>因此，开发人员只需要使用web技术就可以对移动平台进行快速开发</li>
<li>而且跨平台也是只是前端跨平台。</li>
</ul>
</li>
<li><code>这个开源的项目的贡献者</code>

<ul>
<li>这个开源项目中IBM贡献的代码比创始者（温哥华的一家小公司）还多。</li>
<li>Apache Cordova是phongap贡献给apache的一个开源项目

<ul>
<li>他有phonegap里面的核心代码</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>phonegap的优点</h4>

<ul>
<li>app的前台兼容性好</li>
<li>标准化， 由于使用的是W3C标准，所以web前端可直接用于web app。</li>
<li>js+html5和java+xml很像</li>
<li>装起来也不麻烦，用起来比较容易</li>
<li>提供硬件访问</li>
</ul>


<h4>phonegap的缺点</h4>

<ul>
<li>反应很慢（亲身实践过）</li>
<li>交互很差</li>
<li>内存消耗大

<ul>
<li>有人做过测试，和用java写android对比，phonegap明显消耗更多内存</li>
<li>而且释放内存很慢</li>
</ul>
</li>
<li>调试也麻烦</li>
</ul>


<h4>有谁在用</h4>

<ul>
<li>wikipedia

<ul>
<li>它的移动应用就是用phonegap写的</li>
</ul>
</li>
<li>Facebook

<ul>
<li>移动版SDK的一部分是cordova的一个分支</li>
</ul>
</li>
<li>Salesforce

<ul>
<li>移动版的SDK的一部分是cordova的一个分支</li>
</ul>
</li>
<li>IBM

<ul>
<li>移动平台建立在phonegap上</li>
<li>并且积极参与到phonegap的开发里面</li>
</ul>
</li>
<li>Microsoft

<ul>
<li>正在积极参与windows phone的那一部分的开发</li>
</ul>
</li>
<li>Adobe

<ul>
<li>2011年Adobe收购了phonegap得私人开发商Notibi，并将phonegap贡献给apache并且开源</li>
</ul>
</li>
<li>blackberry</li>
<li>zynga

<ul>
<li>用phonegap和html5写了不少很好的游戏</li>
</ul>
</li>
<li>cisco</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Classification Method]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/02/matlab-classification-method/"/>
    <updated>2014-06-02T03:15:11-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/02/matlab-classification-method</id>
    <content type="html"><![CDATA[<h3>The method in the system</h3>

<ul>
<li>MultiNomial logistic Regressoin

<ul>
<li>bad in high dimension

<ul>
<li><code>Factor = mnrfit(train_data, train_label);</code></li>
<li><code>scores = mnrval(Factor, test_data);</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>Random Forest</p>

<ul>
<li>good classifier</li>
<li>score is the probability output

<ul>
<li><code>Factor = TreeBagger(numberoftree, train_data, train_label);</code></li>
<li><code>[predict_label, scores] = predict(Factor, test_data);</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Navie Bayes</p>

<ul>
<li><code>Factor = NaiveBayes(train_data, train_label);</code></li>
<li><code>Scores = posterior(Factor, test_data);</code></li>
<li><code>[Scores, predict_label] = posterior(Factor, test_data);</code></li>
<li><code>predict_label = predict(Factor, test_data);</code></li>
<li><code>accuracy = length(find(predict_label == test_label))/length(test_label)*100;</code></li>
</ul>
</li>
<li>SVM

<ul>
<li><code>Factor = svmtrain(train_label, train_data, '-b 1');</code></li>
<li><code>[predict_label, accuracy, scores] = svmpredict(test_label, test_data, Factor, '-b 1');</code></li>
</ul>
</li>
<li>KNN

<ul>
<li><code>predict_label = knnclassify(test_data, train_data, train_label, num_neighbors);</code></li>
<li>In matlab 2012

<ul>
<li><code>Factor = ClassificationKNN.fit(train_data, train_label, 'NumNeighbors', numofneighbours);</code></li>
<li><code>[predict_label, scores] = predict(Factor, test_data);</code></li>
</ul>
</li>
</ul>
</li>
<li>Ensembles for boosting, Bagging or Random Subspace

<ul>
<li>In matlab2012

<ul>
<li><code>Factor = fitensemble(train_data, train_label, 'AdaBoostM2', 100, 'tree');</code></li>
<li><code>Factor = fitensemble(train_data, train_label, 'AdaBoostM2', 100, 'tree', 'type', 'classification');</code></li>
<li><code>Factor = fitensemble(train_data, train_label, 'SubSpace', 50, 'KNN');</code></li>
<li><code>[predict_label, scores] = predict(Factor, test_data);</code></li>
</ul>
</li>
</ul>
</li>
<li>discriminant analysis classifier

<ul>
<li><code>Factor = ClassificationDiscriminant(train_data, train_label);</code></li>
<li><code>Factor = ClassificationDiscriminant(train_data, train_label, 'discrimType', 'non-linear...');</code></li>
<li><code>[predict_label, scores] = predict(Factor, test_data);</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Array Type Change]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/02/matlab-array-type-change/"/>
    <updated>2014-06-02T02:57:28-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/02/matlab-array-type-change</id>
    <content type="html"><![CDATA[<h3>How to convert between cell, double and char array?</h3>

<ul>
<li>there are three type of array in matlab

<ul>
<li>cell array</li>
<li>double array</li>
<li>char array</li>
</ul>
</li>
</ul>


<!--more-->


<h4>How to convert double array to char array?</h4>

<ul>
<li>use <code>num2str</code> or <code>mat2str</code></li>
</ul>


<h4>How to convert char array to double array?</h4>

<ul>
<li>use <code>str2num</code>&lt;0.0001> and <code>str2double</code>&lt;0.01></li>
</ul>


<h4>How to convert cell array to char array?</h4>

<ul>
<li>use <code>cell2mat</code></li>
</ul>


<h4>How to convert char array to cell array?</h4>

<ul>
<li>use <code>cellstr</code></li>
</ul>


<h3>How to convert cell array to double array?</h3>

<ul>
<li>use <code>cell2mat</code> and <code>str2num</code></li>
</ul>


<h4>How to convert double array to cell array?</h4>

<ul>
<li>use <code>num2cell</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Ios Webapp Using Phonegap and Jquery Mobile]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/27/build-ios-webapp-using-phonegap-and-jquery-mobile/"/>
    <updated>2014-05-27T05:30:09-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/27/build-ios-webapp-using-phonegap-and-jquery-mobile</id>
    <content type="html"><![CDATA[<h3>first install phonegap</h3>

<ul>
<li>download <code>phonegap-2.9.1</code>

<ul>
<li>enter the lib/ios/bin</li>
<li>use the command <code>./create ~/Documents/html_app/testphonegap test_phonegap test1</code>

<ul>
<li>to create the project that is located in <code>~/Documents/html_app/</code> and the name of it is <code>test_phonegap</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<h3>then use xcode to open the project</h3>

<ul>
<li>add the following code in the index.html and run the simulater</li>
<li>the jquery mobile is used from internet and we do not need to download it

<ul>
<li>but I can not find out a way to use the jquery mobile js file in my computer</li>
</ul>
</li>
<li>remember to add <code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;</code> to enable the chinese utf-8</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>    &lt;head&gt;
</span><span class='line'>        &lt;link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.css"&gt;
</span><span class='line'>            &lt;script src="http://code.jquery.com/jquery-1.8.3.min.js"&gt;&lt;/script&gt;
</span><span class='line'>            &lt;script src="http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.js"&gt;&lt;/script&gt;
</span><span class='line'>             &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
</span><span class='line'>    &lt;/head&gt;
</span><span class='line'>    &lt;body&gt;
</span><span class='line'>        &lt;div data-role="page" id="pageone"&gt;
</span><span class='line'>            &lt;div data-role="header"&gt;
</span><span class='line'>                &lt;h1&gt;欢迎来到我的主页&lt;/h1&gt;
</span><span class='line'>                &lt;div data-role="navbar"&gt;
</span><span class='line'>                    &lt;ul&gt;
</span><span class='line'>                        &lt;li&gt;&lt;a href="#" class="ui-btn-active" data-icon="home"&gt;首页&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>                        &lt;li&gt;&lt;a href="#pagetwo" data-icon="arrow-r"&gt;页面二&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>                    &lt;/ul&gt;
</span><span class='line'>                &lt;/div&gt;
</span><span class='line'>                &lt;select name="day" id="day"&gt;
</span><span class='line'>                    &lt;optgroup label="Weekdays"&gt;
</span><span class='line'>                        &lt;option value="mon"&gt;Monday&lt;/option&gt;
</span><span class='line'>                        &lt;option value="tue"&gt;Tuesday&lt;/option&gt;
</span><span class='line'>                        &lt;option value="wed"&gt;Wednesday&lt;/option&gt;
</span><span class='line'>                    &lt;/optgroup&gt;
</span><span class='line'>                    &lt;optgroup label="Weekends"&gt;
</span><span class='line'>                        &lt;option value="sat"&gt;Saturday&lt;/option&gt;
</span><span class='line'>                        &lt;option value="sun"&gt;Sunday&lt;/option&gt;
</span><span class='line'>                    &lt;/optgroup&gt;
</span><span class='line'>                &lt;/select&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>            
</span><span class='line'>            &lt;div data-role="content"&gt;
</span><span class='line'>                &lt;p&gt;本例设有 ui-btn-active 类，请注意首页按钮时突出显示的（已选）。&lt;/p&gt;
</span><span class='line'>                &lt;p&gt;如果点击页面二，您会注意到按钮不会突出显示。&lt;/p&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>            
</span><span class='line'>            &lt;div data-role="footer"&gt;
</span><span class='line'>                &lt;h1&gt;我的页脚&lt;/h1&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        
</span><span class='line'>        &lt;div data-role="page" id="pagetwo"&gt;
</span><span class='line'>            &lt;div data-role="header"&gt;
</span><span class='line'>                &lt;h1&gt;欢迎来到我的主页&lt;/h1&gt;
</span><span class='line'>                &lt;div data-role="navbar"&gt;
</span><span class='line'>                    &lt;ul&gt;
</span><span class='line'>                        &lt;li&gt;&lt;a href="#pageone" data-icon="home"&gt;首页&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>                        &lt;li&gt;&lt;a href="#" data-icon="arrow-r"&gt;页面二&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>                    &lt;/ul&gt;
</span><span class='line'>                &lt;/div&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>            
</span><span class='line'>            &lt;div data-role="content"&gt;
</span><span class='line'>                &lt;p&gt;本页中没有被预选的按钮（突出显示）。&lt;/p&gt; 
</span><span class='line'>                &lt;p&gt;如需让按钮被选的外观表示当前正在访问页面，请返回导航栏教程，继续向下阅读。&lt;/p&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>            
</span><span class='line'>            &lt;div data-role="footer"&gt;
</span><span class='line'>                &lt;h1&gt;我的页脚&lt;/h1&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt; 
</span><span class='line'>    &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5和移动平台的原生应用对比]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/27/html5he-yi-dong-ping-tai-de-yuan-sheng-ying-yong-dui-bi/"/>
    <updated>2014-05-27T01:17:39-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/27/html5he-yi-dong-ping-tai-de-yuan-sheng-ying-yong-dui-bi</id>
    <content type="html"><![CDATA[<h3>问题所在</h3>

<ul>
<li>當前熱門已極的移动開發，所面臨的卻是一個使用平台與裝置類型極其複雜的開發環境，光就行動平台而言，便同時有Windows、Mac、iOS與Android四大平台；再就CPU機器碼來說，則有Intel與ARM兩大平台；即使是Android平台，開發者可能面對的會是百家爭鳴、大小廠牌林立的複雜狀況。</li>
</ul>


<h3>哪些App适合用HTML5开发？</h3>

<ul>
<li>搜索产品</li>
<li>社交产品</li>
<li>资讯新闻产品</li>
<li>游戏产品</li>
</ul>


<h3>HTML5的优点</h3>

<ul>
<li>HTML5最主要的优势就在于它适合<strong><code>众多平台</code></strong>，从PC浏览器到手机、平板电脑，甚至将来的智能电视。只要设备浏览器支持HTML5，HTML5应用或游戏在该平台中就可以直接运行。</li>
<li>如今大部分浏览器</li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_1.png"></li>
<li>这带来原生应用所没有的优点(注：原生应用通常需要进行重新设计，方能投放至另一个目标操作系统)。若开发者想要将自己的iOS游戏移植到Android平台，他就需要对游戏做出根本性的调整。有了HTML5技术，此过程就会简单许多。</li>
<li>HTML5可<code>跨平台</code>运行</li>
</ul>


<!--more-->


<ul>
<li><p>Zynga德国工作室的Paul Bakaus(他曾协助公司将此技术植入公司的各款网页和手机游戏中)表示，“推广HTML5技术的理由很多。”</p>

<ul>
<li>他表示，“一个优点就是我们能够轻松将其推广至手机浏览器。例如，你无需进行安装——这是一大优点。再来就是内容更新和跨平台开发。若你创建的是原生应用，多数情况下你需要分别在Android和iOS平台创建内容，也许还有桌面平台。<code>基于HTML5技术，你只需要制作一次，就可以将其推广至各平台</code>。”</li>
</ul>
</li>
<li><p>美国消费者在Apps上花费的时间依然远多于移动Web</p></li>
<li><p><img src="http://pbking1.github.com/images/internship_zst/compare_2.png"></p></li>
<li><p>对HTML5移动Web及其他平台感兴趣的开发者比例</p></li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_6.png"></li>
</ul>


<h3>HTML5的缺点</h3>

<ul>
<li>虽然HTML5原先旨在服务各种设备，但我们依然<code>无法确保其能够顺利适应各种硬件标准。</code></li>
<li>HTML5的运作情况无法预测</li>
<li>为保证获得较高质量的内容，我们得在多种设备上测试应用——只有这样我们才能保证应用能够顺利运作。我相信未来我们会看到更多测试工具及更优质的标准，但Android QA依然是HTML5开发的痛处。</li>
<li><strong><code>声音</code></strong>显然在游戏开发中占据重要位置。但遗憾的是，这是HTML5的一大缺陷所在。该平台的可用API相比原生应用环境略逊一筹。</li>
<li><code>浏览器的HTML5兼容性不统一</code></li>
<li>HTML5应用区别于手机原生应用的重要地方在于<code>其没有统一的应用商店</code>。这有其利弊，我们需要事先把握。显然投身网络平台的主要优点在于发行和更新内容无 需经过审批过程。和苹果iTunes 不同，HTML5允许开发者随时更新或发行游戏，无需等待平台所有者的回应。</li>
<li>开发者对HTML5的几点不满——绿色为满意，红色为不满，从左到右依次为跨平台开发、快速更新、盈利、安全性、碎片化、性能、适时更新、用户体验、发行

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_7.png"></li>
</ul>
</li>
<li><p>一方面，浏览器市场本身就呈现出“群雄割据”之势；另一方面，很多智能手机用户（尤其是Android用户）<strong>不会及时更新软件</strong>。</p>

<ul>
<li><p>即便是最新的浏览器，对HTML5的支持也并不完善——例如我们在近期的一份分析报告中发现，Android上的最新版Chrome浏览器在虽然支持98项HTML5功能，但是也不支持28项功能。</p></li>
<li><p>这种不均衡会影响HTML5的跨平台吸引力，而事实上，大量HTML5开发工作依然是致力于桌面环境的。</p></li>
<li><p>此外，HTML5在移动领域也面临一些<strong>安全性的问题</strong>，部分原因是HTML5应用与数据的互动方式导致的。“保障HTML5数据的安全是件极其困难的事情。”金说道。</p></li>
</ul>
</li>
</ul>


<h3>原生应用的优点</h3>

<ul>
<li>可访问手机所有功能（GPS、摄像头）；</li>
<li>速度更快、性能高、整体用户体验不错；</li>
<li>可线下使用（因为是在跟Web相对地平台上使用的）；</li>
<li>支持大量图形和动画; 容易发现（在App Store里面）和重新发现（应用图标会一直在主页上）；</li>
<li><p>应用下载能创造盈利（当然App Store抽取20-30% 的营收）。</p></li>
<li><p>移动应用云计算技术公司Appcelerator的企业策略总监迈克尔•金（Michael King）表示,原生应用的优势用一个词概括就是：<code>性能</code>。</p>

<ul>
<li><p>Appcelerator 提出了“互动性斜坡（The Slope Of Interactivity）”概念，指出HTML5适合那些互动性不太强的应用，例如那些单纯提供网络内容或界面非常简单的应用。然而，如果沿着互动性斜坡上行，那些互动更多的应用就需要原生手段了。</p></li>
<li><p>但是，有些设备功能时HTML5做不到的，这往往是因为用户的移动浏览器或浏览器版本不支持HTML5实现那些功能。</p></li>
</ul>
</li>
</ul>


<h3>原生应用的缺点</h3>

<ul>
<li>开发成本高；</li>
<li>支持设备非常有限（一般是哪个系统就在哪个平台专属设备上用）；</li>
<li>上线时间不确定（App Store审核过程不一）；</li>
<li>内容限制（App Store限制）；</li>
<li>获得新版本时需重新下载应用更新。</li>
</ul>


<h3>对比</h3>

<ul>
<li>为何从长远来看，HTML5在移动开发领域比原生应用更具优势。

<ul>
<li><p>性能差距：HTML5的监管机构W3C已经大大推动了相关标准的制定和移动浏览器对HTML5功能的支持，但是很多性能方面的问题依然没有解决。</p></li>
<li><p>开发者的心声：我们采访了各种各样的人——从怀疑者、早期使用者到倡导者和先行者，我们向他们提出了同一个问题：“在这场HTML5与原生应用的大争论当中，我们的立场又是什么？”</p></li>
<li>总体而言，我们发现HTML5正在被越来越多人接受，而一些项目已经证明了它的价值。</li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_3.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_4.png"></li>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_5.png"></li>
</ul>
</li>
<li>说到底，HTML5与原生应用在质量上的差别，更多来自于移动开发者运用相关语言的才华和经验，而并非HTML5的局限性</li>
<li><p>你喜欢用什么方法来开发支持多平台的应用？紫色为HTML5、绿色为混合应用、红色为一个原生加一个HTML5、蓝色为原生；从上到下依次为全球化企业、大型企业、中型公司、小公司、初创企业（少于5人）、整体。</p>

<ul>
<li><img src="http://pbking1.github.com/images/internship_zst/compare_8.png"></li>
<li>HTML5是大型企业打造大量应用的一个重要技术趋势（参见上图）。在全球化企业中，近40%的开发人员表示将采用纯HTML5技术开发多平台应用</li>
</ul>
</li>
<li>最近，Business Insider在一份新出炉的报告中分析了HTML5和原生应用的优缺点

<ul>
<li>在<code>用户体验及性能方面</code>，<strong>原生应用要超过HTML5应用</strong>，理由是HTML5依然不能很好地通过所有移动浏览器访问设备原生功能，在打造图形丰富的用户界面和呈现数据方面也存在局限性。</li>
<li>在<code>跨平台部署成本方面</code>，<strong>HTML5要占优势</strong>，因为HTML5是Web领域的通用语言，不受设备或操作系统限制。W3C正在接洽汽车、出版和电视行业的公司以推广Web。</li>
<li>在<code>快速更新和发行控制方面</code>，<strong>HTML5胜过原生应用</strong>。HTML5的一大优势是开放性——它基于Web，所以没有任何一家公司（如谷歌、苹果、亚马逊或三星）可以充当“掌门人”、放缓更新或者瓜分应用收入。不过，HTML5在支持设备厂商推出的创新手机功能时有点慢。</li>
<li>在<code>盈利方面</code>，<strong>原生应用更胜一筹</strong>。苹果App Store和谷歌Google Play等原生应用商店优势明显。而HTML5除了软件开发商各自在线销售应用之外，还没有出现令人信服的盈利模式。</li>
<li>在<code>编程人才数量方面</code>，<strong>HTML5占优势</strong>。HTML5、Javascript和CSS都是Web领域的通用语言，而相比之下，iOS工程师比较短缺而且开价昂贵。</li>
</ul>
</li>
</ul>


<h3>网友评论</h3>

<ul>
<li><p><strong>网友A</strong></p>

<ul>
<li><p>HTML5 技术开发的 Web 应用应该还是有前途的，应该会随着本身的稳定和设备本身的支持也好，性能增强也好，会越来越普遍。不过当前由于种种条件不是特别的成熟。使得HTML5的发展遇到了一些限制。</p></li>
<li><p>当然，要想获得更好的体验，无疑是要用原生的语言来进行应用开发。</p></li>
<li><p>从目前来看HTML5，与原生应用，还不存在多大的竞争关系，前者更多的是尝试，一直在成熟中，从将来来看，也应该分领域，比如要求比较高的游戏，是不太可能全用HTML5开发的。 而对于传统领域到移动领域的转型所做的展示类型的应用，可能HTML5更合适一些，满足要求又跨平台。</p></li>
</ul>
</li>
<li><p>网友B</p>

<ul>
<li>我觉得Web App和Native App是互补的关系，而如果能利用2者的优点制作出Hybrid App那是最好的。</li>
<li>首先说说Web App，从开发成本，适配，还有便捷都是最好的。但是劣势就是在于，HTML5不是很成熟，还有就是对于消息推送，还有调用本地文件能力有点弱。以及在类似中国部分地区网络貌似不是很给力的说。</li>
<li>而Native App在提供用户体验更胜一筹，而且消息推送，调用本地功能【相机、语音等】方便，但因这样就必须针对不同平台提供不同体验。同时开发成本也就高，而且移植到不同平台上也麻烦。最关键就是在于开发的APP是需要审核。</li>
<li>所以如果能利用好HTML5的优点，结合原生态的优点，达到互补用户体验应该可以上一层。</li>
</ul>
</li>
</ul>


<h3>资料来源</h3>

<ul>
<li><a href="http://www.cnblogs.com/Better-Me/p/3478973.html">http://www.cnblogs.com/Better-Me/p/3478973.html</a></li>
<li><a href="http://www.ithome.com.tw/pr/87940">http://www.ithome.com.tw/pr/87940</a></li>
<li><a href="http://mobile.51cto.com/app-show-410661.htm">http://mobile.51cto.com/app-show-410661.htm</a></li>
<li><a href="http://mobile.51cto.com/comment-386277.htm">http://mobile.51cto.com/comment-386277.htm</a></li>
<li><a href="http://mobile.51cto.com/comment-385747.htm">http://mobile.51cto.com/comment-385747.htm</a></li>
<li><a href="http://www.infoq.com/cn/news/2013/03/html5-native-mobile">http://www.infoq.com/cn/news/2013/03/html5-native-mobile</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KNN in Matlab(knnclassify)]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/26/knn-in-matlab-knnclassify/"/>
    <updated>2014-05-26T05:55:05-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/26/knn-in-matlab-knnclassify</id>
    <content type="html"><![CDATA[<ul>
<li>refer from

<ul>
<li><a href="http://blog.csdn.net/boyxiaolong/article/details/7062394">http://blog.csdn.net/boyxiaolong/article/details/7062394</a></li>
<li><a href="http://blog.csdn.net/aladdina/article/details/4141127">http://blog.csdn.net/aladdina/article/details/4141127</a></li>
</ul>
</li>
</ul>


<h3>What is KNN</h3>

<ul>
<li>simlpy, a method use to classify or regression</li>
<li>idea

<ul>
<li>如果一个样本在特征空间中的k个最相 似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。</li>
</ul>
</li>
<li>KNN算法不仅可以用于分类，还可以用于回归。通过找出一个样本的k个最近邻居，将这些邻居的属性的平均值赋给该样本，就可以得到该样本的属性。更有用的方法是将不同距离的邻居对该样本产生的影响给予不同的权值(weight)，如权值与距离成正比。</li>
</ul>


<!--more-->


<h3><code>knnclassify</code> in matlab</h3>

<ul>
<li>sample</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>train_data = load('train.csv');
</span><span class='line'>test_data = load('test.csv');
</span><span class='line'>
</span><span class='line'>X = train_data(:, 3:3074);
</span><span class='line'>Y = train_data(:, 2);
</span><span class='line'>x = test_data(:, 2:3073);
</span><span class='line'>
</span><span class='line'>label = knnclassify(x,X,Y,10,'cosine','random');</span></code></pre></td></tr></table></div></figure>


<ul>
<li>knnclassify(test_data,train_data,train_label,numberoflabel,&lsquo;cosine&rsquo;,&lsquo;random&rsquo;);</li>
</ul>


<h3>main function</h3>

<ul>
<li>1.CLASS = KNNCLASSIFY(SAMPLE,TRAINING,GROUP)

<ul>
<li>标号和训练数据必须有相同的行数；训练数据和测试数据必须有相同的列；函数对于无效值或者空值会作为丢失值或者忽略这一行。</li>
</ul>
</li>
<li>2.CLASS = KNNCLASSIFY(SAMPLE,TRAINING,GROUP,K)

<ul>
<li>此函数允许你设置距离矩阵形式，如：

<ul>
<li>&lsquo;euclidean&rsquo;    欧氏距离，默认的</li>
<li>&lsquo;cityblock&rsquo;    绝对差的和</li>
<li>&lsquo;cosine&rsquo;     角度距离</li>
<li>&lsquo;correlation&rsquo; 相关距离</li>
<li>&lsquo;Hamming&rsquo;      汉明距离</li>
</ul>
</li>
</ul>
</li>
<li>3.CLASS =KNNCLASSIFY(SAMPLE,TRAINING,GROUP,K,DISTANCE,RULE)

<ul>
<li>本函数允许你选择如何对样本进行分类，如你可以选择：

<ul>
<li>&lsquo;nearest&rsquo;  最近的K个的最多数</li>
<li>&lsquo;random&rsquo;    随机的最多数</li>
<li>&lsquo;consensus&rsquo; 投票法，默认的</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Black Box Testing on App]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/26/quick-black-box-testing-on-app/"/>
    <updated>2014-05-26T02:39:28-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/26/quick-black-box-testing-on-app</id>
    <content type="html"><![CDATA[<h3>some quick black box testing tools</h3>

<ul>
<li>calabash</li>
<li>appium</li>
<li>appgrader</li>
<li>monkey(adb 自带)</li>
</ul>


<!--more-->


<h3>and if you want to install app on the blue stack simulater</h3>

<ul>
<li>use SnapPea_apk_installer</li>
<li><a href="http://mac.softpedia.com/dyn-postdownload.php?p=133201&amp;t=0&amp;i=1">http://mac.softpedia.com/dyn-postdownload.php?p=133201&amp;t=0&amp;i=1</a></li>
</ul>


<h3>appium</h3>

<ul>
<li>how to install

<ul>
<li><code>brew install node</code>      # get node.js</li>
<li><code>npm install -g appium</code> # get appium</li>
<li><code>npm install wd</code>        # get appium client</li>
<li><code>appium &amp;</code>              # start appium</li>
<li><code>node your-appium-test.js</code></li>
</ul>
</li>
</ul>


<h3>monkey</h3>

<ul>
<li><p>Monkey测试是Android平台下自动化测试的一种快速有效的手段，通过Monkey工具可以模拟用户触摸屏幕、滑动轨迹球、按键等操作来对模拟器或者手机设备上的软件进行压力测试，检测该软件的稳定性、健壮性。它的原理是向系统发送伪随机的用户事件流（如按键输入、触摸输入、手势输入等），实现对正在开发的应用程序进行压力测试。</p></li>
<li><p>Monkey的特性
 -（1）测试的对象仅为应用程序包（apk包），有一定的局限性；
 -（2）Monkey测试使用的事件流数据流是随机的，不能进行自定义；
 -（3）可对MonkeyTest的对象、事件数量、类型、频率等进行设置。</p></li>
<li><p>Monkey测试的停止条件
  -（1）如果先顶了Monkey运行在一个或几个特定的包上，那么它会检测试图转到它包的操作，并对其进行阻止；
  -（2）如果应用程序崩溃或接收到任何失控异常，Monkey将停止并报错；
  -（3）如果应用程序产生了应用程序不响应（application not responding）的错误，Monkey将会停止并报错。
通过多次并且不同设定下的Monkey测试才算它是一个稳定性和健壮性足够的程序。</p></li>
<li><p>随着测试的深入，我们需要忽略App的崩溃（App的崩溃会导致Monkey测试的停止），而不是停住，monkey同样能做到。&mdash;ignore crashes
甚至，它还能生成profiling报告。 &mdash;hprof</p></li>
<li><p>Monkey具体参数的设定可参考：</p>

<ul>
<li><a href="http://developer.android.com/tools/help/monkey.html">http://developer.android.com/tools/help/monkey.html</a></li>
</ul>
</li>
<li><p>使用方法</p>

<ul>
<li>本方法基于mac上的bluestack模拟器</li>
<li>1.首先打开bluestack模拟器，然后进行<code>adb connect localhost:10001</code></li>
<li>2.显示连接上了之后，使用SnapPea_APK_Installer安装需要测试的apk</li>
<li>3.然后成功安装上之后。由于需要知道应用程序的主Activity，则用<code>adb shell</code>进入模拟器的系统，然后再<code>data/data</code>里面看名字，但是由于bluestack没有破解，所以权限不够，看不了</li>
<li>4.因此，用命令<code>adb shell monkey 100</code>,让他随机测一下，然后看看报的主程序名字是什么。

<ul>
<li>adb shell monkey [options]

<ul>
<li>如果不指定options，Monkey将以无反馈模式启动，并把事件任意发送到安装在目标环境中的全部包。下面是一个更为典型的命令行示例，它启动指定的应用程序，并向其发送1000个伪随机事件：</li>
</ul>
</li>
</ul>
</li>
<li>5.再用<code>adb shell monkey -p com.baofood -v 1000000 -hprof</code>去测试

<ul>
<li>monkey -p（package的意思）  指定文件名 -v（测试的次数和频率） number（次数）</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
