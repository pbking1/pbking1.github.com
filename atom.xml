<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KING]]></title>
  <link href="http://pbking1.github.com/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-02-08T19:01:17-05:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xapian_tutorial_3]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/06/xapian-tutorial-3/"/>
    <updated>2015-02-06T02:50:50-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/06/xapian-tutorial-3</id>
    <content type="html"><![CDATA[<h4>filter</h4>

<ul>
<li>There is a <code>faceted Search</code>, which is to preview the result of the query in many category.

<ul>
<li>like if we search for &lsquo;apple&rsquo;

<ul>
<li>the result may be classified into two

<ul>
<li>one is apple fruit</li>
<li>one is apple company</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>actually, this is a filter.

<ul>
<li>we can classify before index, and store into index</li>
<li>and use value to filter them when query</li>
</ul>
</li>
</ul>


<h4>how to build filter value</h4>

<ul>
<li>use <code>Document::add_value</code></li>
</ul>


<h4>how to use filter when query</h4>

<ul>
<li>two ways

<ul>
<li>one is use <code>Xapian::MatchDecider</code>, this return a bool value.

<ul>
<li>or we can use <code>Xapian::ValueSetMatchDecider</code>

<ul>
<li><code>Xapian::ValueSetMatchDecider(slot, inclusive)</code>

<ul>
<li>slot means which slot to filter</li>
<li>inclusive means using filter or reduce</li>
</ul>
</li>
<li>use <code>Xapian::ValueSetMatchDecider::add_value(string)</code>

<ul>
<li>user can decide one or many set of value

<ul>
<li>when document belong to one of these value

<ul>
<li>make it filter or stay</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>use <code>MatchSpy</code></li>
</ul>
</li>
</ul>


<h4>sample</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Public Speech Note]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/05/public-speech-note/"/>
    <updated>2015-02-05T22:50:10-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/05/public-speech-note</id>
    <content type="html"><![CDATA[<h3>public speech technic note</h3>

<h4>audience</h4>

<ul>
<li>focus on a single person

<ul>
<li>reduce pressure</li>
</ul>
</li>
<li>audience is very important</li>
<li>help emotionally connect to audience</li>
<li>help you visualise one single person to talk to</li>
</ul>


<!--more-->


<h4>venue(speech place)</h4>

<ul>
<li>room dynamic

<ul>
<li>size and shape</li>
<li>how many seats</li>
<li>raised stage</li>
<li>floor plan</li>
<li>anything unusual</li>
</ul>
</li>
<li>audience dynamic

<ul>
<li>broad room style</li>
<li>line style</li>
<li>meeting style</li>
</ul>
</li>
<li>speaker equipment

<ul>
<li>ask for any equipment I may need</li>
</ul>
</li>
</ul>


<h4>develop personal credibility</h4>

<ul>
<li>make people believe you speak</li>
<li>introduction is very important</li>
<li>use confidence and competence to build credibility

<ul>
<li>confidence

<ul>
<li>dress appropriately

<ul>
<li>find an insider to tell you</li>
</ul>
</li>
<li>use non-verbal skills

<ul>
<li>make eye contact</li>
<li>let the audience to look at your body</li>
</ul>
</li>
<li>sound confidence

<ul>
<li>first sound must be clear</li>
</ul>
</li>
</ul>
</li>
<li>demonstrate(prove) competence

<ul>
<li>speak the topic you familiar about</li>
<li>share your experience

<ul>
<li>just a brief detail</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>generate idea for the speech</h4>

<ul>
<li>collect ideas

<ul>
<li>use note</li>
<li>use card</li>
</ul>
</li>
<li>open your mind</li>
<li>note the idea

<ul>
<li>fact and information</li>
<li>stories</li>
<li>things that inspires you</li>
</ul>
</li>
</ul>


<h4>find the story</h4>

<ul>
<li>story trigger

<ul>
<li><strong>something happens to someone</strong>

<ul>
<li>why happen</li>
</ul>
</li>
<li>what is the story behind the number</li>
<li>what did she do differentlyy</li>
</ul>
</li>
<li>who, what, where, when</li>
<li>overcome obstacles</li>
<li>using creativity</li>
<li>tell the story according to the fact</li>
</ul>


<h4>building story broad</h4>

<ul>
<li>recall key details</li>
<li>draw the step</li>
</ul>


<h4>rehearsing(排练)</h4>

<ul>
<li>rehearse the position(sitting or standing)</li>
<li>rehearse the actual clothes</li>
<li>use a real audience</li>
<li>record and watch yourself</li>
<li>listen to yourself</li>
<li>rehearse the real hours</li>
</ul>


<h4>warming up</h4>

<ul>
<li>in the morning

<ul>
<li>do not clearing your throat</li>
<li>get up early</li>
<li>avoid cold drinks</li>
<li>sing, talk or hum(use your voice before speech)</li>
</ul>
</li>
<li>in the afternoon or night

<ul>
<li>save your voice</li>
<li>avoid caffeine</li>
<li>avoid CO2 drink</li>
</ul>
</li>
</ul>


<h4>saying yes to the microphone</h4>

<ul>
<li>test before start</li>
<li>may sound loud to you but not to the audience</li>
</ul>


<h4>nervous</h4>

<ul>
<li>keep hand behind your back and look up</li>
</ul>


<h4>strong opening</h4>

<ul>
<li>cold open

<ul>
<li>ask an open-ended question

<ul>
<li>do not ask yes-no question</li>
</ul>
</li>
<li>open with a story

<ul>
<li>have mystery</li>
</ul>
</li>
<li>tell them to image something

<ul>
<li>make your audience part of your presentation</li>
</ul>
</li>
<li>a quote or a fact

<ul>
<li>risk approach</li>
<li>use surprising fact</li>
</ul>
</li>
</ul>
</li>
<li>common mistake

<ul>
<li>un-original phrases</li>
<li>clearing your throat</li>
<li>technical issue</li>
<li>telling a joke</li>
</ul>
</li>
</ul>


<h4>introducing your agenda</h4>

<ul>
<li>the agenda

<ul>
<li>purpose</li>
<li>topic</li>
<li>participant</li>
<li>length</li>
</ul>
</li>
</ul>


<h4>use more vocal variety</h4>

<ul>
<li>声音起伏</li>
<li>volume

<ul>
<li>break a pattern</li>
</ul>
</li>
</ul>


<h4>eliminating crutch</h4>

<ul>
<li>when feel under pressure

<ul>
<li>try to relax</li>
</ul>
</li>
<li>reduce or avoid stress</li>
</ul>


<h4>how to use props(道具) and visual aids</h4>

<ul>
<li>demonstration

<ul>
<li>showing is far more effective than talking</li>
</ul>
</li>
<li>provide a graphic or chart</li>
<li>for dramatic fact</li>
<li>practise the props

<ul>
<li>if thing go wrong

<ul>
<li>how to recover</li>
</ul>
</li>
</ul>
</li>
<li>presentation is important</li>
</ul>


<h4>strong close</h4>

<ul>
<li>make the end word very clear</li>
<li>short summary</li>
<li>re-state title</li>
<li>call to action</li>
<li>a personal tagline</li>
<li>a quote</li>
<li>a final story

<ul>
<li>emotionally powerful</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xapian_tutorial_2]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/05/xapian-tutorial-2/"/>
    <updated>2015-02-05T19:54:20-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/05/xapian-tutorial-2</id>
    <content type="html"><![CDATA[<h3>The expand of synonym(同义词)</h3>

<ul>
<li>such as ‘I love you‘ and &lsquo;ILU&rsquo;</li>
<li>process to do this

<ul>
<li>Write the synonym into database

<ul>
<li>use <code>WriteDatabase::add_synonym(term,synonym)</code></li>
<li>but we can only do &lsquo;I love you&rsquo; &ndash;> &lsquo;ILU&rsquo;

<ul>
<li>if we want to reverse it, we need to add the reverse version</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>use the synonym when query</h3>

<ul>
<li>use <code>QueryParser::set_database()</code> to set db</li>
<li>when using the <code>QueryParser::set_database()</code>, the second parameter use <code>FLAG_SYNONYM</code> or <code>FLAG_AUTO_SYNONYMS</code></li>
<li><code>FLAG_SYNONYM</code> is the ~WORD format in the query sentence. expend the synonym of the word automatically</li>
<li><code>FLAG_AUTO_SYNONYMS</code> is expend all the phrase, do not need to write ~</li>
</ul>


<!--more-->


<h3>sample</h3>

<ul>
<li>makefile

<ul>
<li></li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    all:
</span><span class='line'>      g++ -o index -I/usr/local/include -l xapian index.cpp
</span><span class='line'>      g++ -o query -I/usr/local/include -l xapian query.cpp
</span><span class='line'>    clean:
</span><span class='line'>      rm -rf index index_data/ query</span></code></pre></td></tr></table></div></figure>


<ul>
<li>index.cpp</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> #include&lt;xapian.h&gt;
</span><span class='line'> #include&lt;iostream&gt;
</span><span class='line'> #include&lt;string&gt;
</span><span class='line'> using namespace std;
</span><span class='line'> #define CONTENT "70:69， I love you This is man basketball race history the smallest point difference race ， smile to last is east man Chinese 。 Which can be said ， This time is the most famous victory and can be said this is the most lucky resuly 。After the end of the game, the coach of the Chinese aa and The boss bb hang togetherm and the two guy are so happy that the chinese win。"
</span><span class='line'> #define INDEX_PATH "./index_data"
</span><span class='line'> #define WORD1 "I love you"
</span><span class='line'> #define WORD2 "ILU"
</span><span class='line'>int main(int argc, char *argv[]){
</span><span class='line'>try{
</span><span class='line'>  //The text to be indexed
</span><span class='line'>  string content(CONTENT);
</span><span class='line'>
</span><span class='line'>  //open a database and write
</span><span class='line'>  Xapian::WritableDatabase db(string(INDEX_PATH), Xapian::DB_CREATE_OR_OPEN);
</span><span class='line'>  
</span><span class='line'>  //term generator
</span><span class='line'>  Xapian::TermGenerator indexer;
</span><span class='line'>
</span><span class='line'>  //add synonym
</span><span class='line'>  db.add_synonym(string(WORD1), string(WORD2));
</span><span class='line'>
</span><span class='line'>  //Make document
</span><span class='line'>  Xapian::Document doc;
</span><span class='line'>  doc.set_data(content);
</span><span class='line'>  indexer.set_document(doc);
</span><span class='line'>  indexer.index_text(content);
</span><span class='line'>
</span><span class='line'>  //add document to db
</span><span class='line'>  db.add_document(doc);
</span><span class='line'>
</span><span class='line'>  //flush to disk
</span><span class='line'>  db.commit();
</span><span class='line'>
</span><span class='line'>}catch(const Xapian::Error &e){
</span><span class='line'>  cout&lt;&lt;e.get_description()&lt;&lt;endl;
</span><span class='line'>}
</span><span class='line'>return 0;}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>query.cpp</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> #include&lt;xapian.h&gt;
</span><span class='line'> #include&lt;iostream&gt;
</span><span class='line'> #include&lt;string&gt;
</span><span class='line'>using namespace std;
</span><span class='line'> #define QUERY "~ILU AND Chinese"
</span><span class='line'> #define INDEX_PATH "./index_data"
</span><span class='line'> #define F_DOCID 1
</span><span class='line'>int main(){
</span><span class='line'>  
</span><span class='line'>try{
</span><span class='line'>  //The string for query
</span><span class='line'>  string query_str(QUERY);
</span><span class='line'>  //open the database
</span><span class='line'>  Xapian::Database db(string(INDEX_PATH));
</span><span class='line'>  
</span><span class='line'>  //open search handle
</span><span class='line'>  Xapian::Enquire enquire(db);
</span><span class='line'>
</span><span class='line'>  //Parser Query
</span><span class='line'>  Xapian::QueryParser qp;
</span><span class='line'>  qp.set_database(db);
</span><span class='line'>  Xapian::Query query = qp.parse_query(query_str, Xapian::QueryParser::FLAG_SYNONYM);
</span><span class='line'>  cout&lt;&lt;"Query is "&lt;&lt;query.get_description()&lt;&lt;endl;
</span><span class='line'>
</span><span class='line'>  //find the top 10 result
</span><span class='line'>  enquire.set_query(query);
</span><span class='line'>  Xapian::MSet result = enquire.get_mset(0,10);
</span><span class='line'>  cout&lt;&lt;result.get_matches_estimated()&lt;&lt;" result found"&lt;&lt;endl;
</span><span class='line'>
</span><span class='line'>  //print the result
</span><span class='line'>  for(Xapian::MSetIterator iter = result.begin(); iter != result.end(); iter++){
</span><span class='line'>      Xapian::Document doc = iter.get_document();
</span><span class='line'>      cout&lt;&lt;iter.get_rank()&lt;&lt;": docid "&lt;&lt;doc.get_value(F_DOCID)&lt;&lt;", data"&lt;&lt;doc.get_data()&lt;&lt;endl;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}catch(const Xapian::Error e){
</span><span class='line'>  cout&lt;&lt;e.get_description()&lt;&lt;endl;
</span><span class='line'>}
</span><span class='line'>return 0;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xapian_tutorial_1]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/05/xapian-tutorial-1/"/>
    <updated>2015-02-05T16:40:48-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/05/xapian-tutorial-1</id>
    <content type="html"><![CDATA[<ul>
<li>note:some of the content and code are refer from <a href="http://www.coder4.com/archives/2218">http://www.coder4.com/archives/2218</a></li>
</ul>


<h3>basic index build and search</h3>

<ul>
<li>first of all, xapian is an open source c++ search engine.</li>
<li>also note that xapian is called &ldquo;Zap-in&rdquo;</li>
</ul>


<!--more-->


<h4>basic data structure</h4>

<ul>
<li>used for search

<ul>
<li><code>Xapian::Database</code>

<ul>
<li>used to read index</li>
</ul>
</li>
<li><code>Xapian::Enquire</code>

<ul>
<li>use with Database</li>
<li>use to search</li>
</ul>
</li>
<li><code>Xapian::QueryParser</code>

<ul>
<li>query sentence parser</li>
</ul>
</li>
<li><code>Xapian::Query</code>

<ul>
<li>query</li>
</ul>
</li>
<li><code>Xapian::MSet</code>

<ul>
<li>the result set returned by searching</li>
</ul>
</li>
</ul>
</li>
<li>used for build index

<ul>
<li><code>Xapian::WritableDatabase</code>

<ul>
<li>use for built index</li>
</ul>
</li>
<li><code>Xapian::TermGenerator</code>

<ul>
<li>use for cut sentence, build index.</li>
</ul>
</li>
</ul>
</li>
<li>for both

<ul>
<li><code>Xapian::Document</code>

<ul>
<li>abstract of document</li>
</ul>
</li>
<li> <code>Xapian::SimpleStopper</code>

<ul>
<li> the word used for ending</li>
</ul>
</li>
<li> <code>Xapian::Error</code>

<ul>
<li> exception</li>
<li> use get_description() to get detailed info.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>how to build index</h4>

<ul>
<li>open a <code>Xapian::WritableDatabase</code></li>
<li>Then prepare for the document

<ul>
<li>use <code>set_data(string)</code> to set data(only one)</li>
<li>use <code>add_value(slot, string)</code> to set field(can have more), slot can not be -1</li>
<li>these two method is only used for storage

<ul>
<li>not used for parse or index</li>
</ul>
</li>
</ul>
</li>
<li>build index field

<ul>
<li>use <code>Document.add_term(word, pos)</code></li>
<li>use <code>Xapian::TermGenerator</code> and <code>.set_document(doc)</code>

<ul>
<li>then pass the string using delimiter space into index_text</li>
<li>then the doc will have the index field of this document</li>
</ul>
</li>
</ul>
</li>
<li>after building the document, import into database</li>
<li>use DB.commit()</li>
</ul>


<h4>how to query</h4>

<ul>
<li>open <code>Xapian::Database</code>, the path is the same as WriteableDatabase</li>
<li>use DB to construct <code>Xapian::Enquire</code></li>
<li>use <code>Xapian::QueryParser</code> to parse the string and generate <code>Xapian::Query</code></li>
<li>use <code>enquire.set_query()</code> to query</li>
<li>get the result set by using <code>enquire.get_mset(start, len)</code>.</li>
<li>use <code>Xapian::MsetIterator</code> to traverse the MSet.

<ul>
<li>use <code>get_rank()</code> to get the rank</li>
<li>use <code>get_document</code> to get the document</li>
</ul>
</li>
</ul>


<h4>query grammer</h4>

<ul>
<li><code>Term | Term | Term</code></li>
<li><code>Term -&gt; Term ~ Term</code>

<ul>
<li><code>~</code> is used for similar word</li>
</ul>
</li>
</ul>


<h4>About field</h4>

<ul>
<li>When building index

<ul>
<li>use <code>Xapian::TermGenerator</code> for example

<ul>
<li>we need to set the <code>TermGenerator.set_database(db)</code></li>
<li>when building the index field

<ul>
<li><code>index_text(text, wdf_inc=1, prefix)</code>

<ul>
<li>The second and third parameter are default</li>
<li>The second is TF increase</li>
<li>The third is prefix</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>When query

<ul>
<li>add mapping using <code>Xapian::QueryParser</code></li>
<li><code>.add_prefix("title", "T")</code></li>
<li>Then the <code>qp.parse_query</code> can have field when query the string</li>
<li>for example

<ul>
<li>&lsquo;title:news AND content:basketball&rsquo;</li>
<li>and now there are two field</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>sample code</h4>

<ul>
<li>create_index.cpp</li>
</ul>


<p>&#8220;`
 #include&lt;xapian.h></p>

<h1>include<iostream></h1>

<h1>include<string></h1>

<p>using namespace std;</p>

<h1>define CONTENT &ldquo;70:69， This is man basketball race history the smallest point difference race ， smile to last is east man Chinese 。 Which can be said ， This time is the most famous victory and can be said this is the most lucky resuly 。After the end of the game, the coach of the Chinese aa and The boss bb hang togetherm and the two guy are so happy that the chinese win。&rdquo;</h1>

<h1>define TITLE &ldquo;This is a news&rdquo;</h1>

<h1>define INDEX_PATH &ldquo;./index_data&rdquo;</h1>

<h1>define F_DOCID 1</h1>

<p>int main(int argc, char *argv[]){</p>

<pre><code>try{
    //The text to be indexed
    string content(CONTENT);
    string title(TITLE);

    //open a database and write
    Xapian::WritableDatabase db(string(INDEX_PATH), Xapian::DB_CREATE_OR_OPEN);

    //term generator
    Xapian::TermGenerator indexer;

    //Make document
    Xapian::Document doc;
    doc.add_value(F_DOCID, string("1104"));
    doc.set_data(content);
    indexer.set_document(doc);
    indexer.index_text(title, 1, "T");
    indexer.index_text(content, 1, "C");

    //add document to db
    db.add_document(doc);

    //flush to disk
    db.commit();

}catch(const Xapian::Error &amp;e){
    cout&lt;&lt;e.get_description()&lt;&lt;endl;
}
return 0;
</code></pre>

<p>}</p>

<p> &#8220;`</p>

<ul>
<li>search.cpp</li>
</ul>


<p> &#8220;`</p>

<h1>include&lt;xapian.h></h1>

<h1>include<iostream></h1>

<h1>include<string></h1>

<p>using namespace std;</p>

<h1>define QUERY &ldquo;title:news AND content:70&rdquo;</h1>

<h1>define INDEX_PATH &ldquo;./index_data&rdquo;</h1>

<h1>define F_DOCID 1</h1>

<p>int main(){</p>

<pre><code>try{
    //The string for query
    string query_str(QUERY);

    //open the database
    Xapian::Database db(string(INDEX_PATH));

    //open search handle
    Xapian::Enquire enquire(db);

    //Parser Query
    Xapian::QueryParser qp;
    qp.add_prefix("title", "T");
    qp.add_prefix("content", "C");
    Xapian::Query query = qp.parse_query(query_str);
    cout&lt;&lt;"Query is "&lt;&lt;query.get_description()&lt;&lt;endl;

    //find the top 10 result
    enquire.set_query(query);
    Xapian::MSet result = enquire.get_mset(0,10);
    cout&lt;&lt;result.get_matches_estimated()&lt;&lt;" result found"&lt;&lt;endl;

    //print the result
    for(Xapian::MSetIterator iter = result.begin(); iter != result.end(); iter++){
        Xapian::Document doc = iter.get_document();
        cout&lt;&lt;iter.get_rank()&lt;&lt;": docid "&lt;&lt;doc.get_value(F_DOCID)&lt;&lt;", data"&lt;&lt;doc.get_data()&lt;&lt;endl;
    }

}catch(const Xapian::Error e){
    cout&lt;&lt;e.get_description()&lt;&lt;endl;
}
return 0;
</code></pre>

<p>}</p>

<p> &#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference Between Malloc and New in C++]]></title>
    <link href="http://pbking1.github.com/blog/2015/01/27/difference-between-malloc-and-new-in-c-plus-plus/"/>
    <updated>2015-01-27T15:30:52-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/01/27/difference-between-malloc-and-new-in-c-plus-plus</id>
    <content type="html"><![CDATA[<h3>new and delete</h3>

<ul>
<li>the way it allocate and release memory

<ul>
<li>the memory is allocate from <code>Free Store</code></li>
<li>will return a fully typed pointer

<ul>
<li>if failed will not return NULL</li>
</ul>
</li>
<li>the compiler will calculate the size</li>
<li>reallocate is not handled intuitively, using copy constructor</li>
<li>whether called malloc and delete can be user defined</li>
<li>can add a new memory allocator to deal with low memory</li>
<li>new and delete can be overwrite legally</li>
<li>use constructor/destructor to initial/destory object</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>new 动态创建和释放数组或者单个对象</p>

<ul>
<li>动态创建对象的时候，只需要指定其数据类型，不必为该对象命名</li>
<li>如果分配失败了，会抛出异常。</li>
<li>new 表达式返回指向该新建对象的指针</li>
<li>我们可以通过这个指针来访问新建的对象</li>
<li>int *p = new int

<ul>
<li>返回类型为int*类型， 分配大小为sizeof(int)</li>
</ul>
</li>
<li>int *p = new int[100]

<ul>
<li>返回类型为int*类型, 分配大小为sizeof(int) * 100</li>
</ul>
</li>
</ul>
</li>
<li><p>三种特殊指针</p>

<ul>
<li>void* 表示未确定类型的指针，更明确的说是指申请内存空间时还不知道user是用来储存什么类型的数据的。</li>
<li>零值指针：值为0的指针。可以是任何一种指针类型。</li>
<li>NULL指针：不提供任何地址信息的指针</li>
</ul>
</li>
<li><p>new 动态创建的对象是可以初始化的。</p>

<ul>
<li>e.g int *p = new int(1000)</li>
<li>如果不初始化，就会使用这个类的默认构造函数来初始化。

<ul>
<li>e.g int *p = new int()  //初始化为0</li>
</ul>
</li>
<li>但是如果对象是内置的，就没有初始化

<ul>
<li>e.g int *p = new int //指向一个没有初始化的int

<ul>
<li>string *str = new string()  //初始化为空串，因为string自带的默认构造函数会初始化为空串</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>delete</p>

<ul>
<li>delete p;

<ul>
<li>但是释放完p的内存之后，p会变成不确定的指针</li>
<li>因此要把p赋值为0

<ul>
<li>明确指针不再指向任何对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>malloc and free</h3>

<ul>
<li><p>the way it allocate and release memory</p>

<ul>
<li>the memory is allocate from <code>Heap</code></li>
<li>will return a void pointer

<ul>
<li>will return NULL if failed</li>
</ul>
</li>
<li>the space and size need to be specified(固定)</li>
<li>will not called new/delete</li>
<li>it is simple to reallocate large memory</li>
<li>user can not write code into allocation sequence to help with low memory</li>
<li>malloc/free can not be overriden legally</li>
</ul>
</li>
<li><p>malloc 动态内存分配</p>

<ul>
<li>void *malloc(int size)</li>
<li>向系统申请分配指定size个字节的内存空间</li>
<li>申请之后要检查是否分配成功</li>
<li>不用之后要释放：把纸箱这块内存的指针指向NULL, 防止程序不小心使用了它

<ul>
<li>如果忘了释放就是内存泄露</li>
</ul>
</li>
<li>操作系统中有一个记录空闲内存位置的链表，每次收到程序申请的时候，就会遍历这个链表，找到第一个空间大于申请的空间的堆节点，然后把该节点从链表中删除，把这个节点的空间分配给程序。</li>
<li> int p;

<ul>
<li>p = (int*)malloc(sizeof(int) * 128)</li>
<li>p指针会存储存储单元的首地址</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vi Regular Expression and Data Processing(1)]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/21/vi-regular-expression-1/"/>
    <updated>2014-11-21T15:07:04-05:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/21/vi-regular-expression-1</id>
    <content type="html"><![CDATA[<h3>data processing is very important before data mining</h3>

<ul>
<li>like if you are going to do some data mining in the linkedin public profile</li>
<li>1.find out the number of the people that have

<pre><code> - education
 - experience
 - skills
 - have all
</code></pre></li>
<li>2.find out all the skills and list the number of user who own them in a diagram</li>
<li>3.find out all the company number</li>
<li>4.find out all the people that is in US</li>
<li>5.find out all the education level of all people

<pre><code> - like undergraduate, graduate, phd
</code></pre></li>
<li>6.find out all the experience about job numbers

<pre><code> - like 1 job, 2 jobs, 3 jobs
</code></pre></li>
</ul>


<!--more-->


<h3>regular expression in VIM</h3>

<ul>
<li>delete the line that match the particular format

<ul>
<li>like match all the lines in a document that match &lsquo;name: current&rsquo;

<ul>
<li>:%s/^name:\tcurrent.*$//g</li>
<li>:%s/skill_num:0\n//g</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>count the number</h3>

<ul>
<li><p>the number of the education, the number of the experience and the number of the skill</p>

<ul>
<li>like

<ul>
<li>grep &lsquo;skill_num&rsquo; *.txt > ./checklist/skill_num.txt

<ul>
<li>:%s/output[1-9][0-9]*.txt:skill_num://

<ul>
<li>delete the tag</li>
</ul>
</li>
</ul>
</li>
<li>grep &lsquo;experience_num&rsquo; *.txt > checklist/exp_num.txt

<ul>
<li>:%s/output[1-9][0-9]*.txt:experience_number://

<ul>
<li>delete the tag</li>
</ul>
</li>
</ul>
</li>
<li>grep &lsquo;education_nun&rsquo; *.txt > ./checklist/edu_num.txt

<ul>
<li>:%s/output[1-9][0-9]*.txt:education_nun://

<ul>
<li>delete the tag before the number</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>use the number of the education, experience and skills to plot the tendency</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clear all;
</span><span class='line'>clc;
</span><span class='line'>edu = csvread('edu.csv');
</span><span class='line'>exp = csvread('exp.csv');
</span><span class='line'>skill = csvread('skill.csv');
</span><span class='line'>
</span><span class='line'>figure
</span><span class='line'>
</span><span class='line'>%education number
</span><span class='line'>edu_res = zeros(size(edu));
</span><span class='line'>edu = sort(edu);
</span><span class='line'>for i=1:size(edu)-1
</span><span class='line'>   if edu(i) == edu(i + 1)
</span><span class='line'>       edu_res(edu(i)) = edu_res(edu(i)) + 1;
</span><span class='line'>   elseif edu(i) ~= edu(i + 1)
</span><span class='line'>       edu_res(edu(i+1)) = edu_res(edu(i+1)) + 1;
</span><span class='line'>   end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>subplot(3,1,1); %add plot into one image
</span><span class='line'>plot(edu_res(1:15, :));
</span><span class='line'>title('education line plot')
</span><span class='line'>xlabel('index of education number')
</span><span class='line'>ylabel('number of the people')
</span><span class='line'>
</span><span class='line'>%experience number
</span><span class='line'>exp_res = zeros(size(exp));
</span><span class='line'>exp = sort(exp);
</span><span class='line'>for i=1:size(exp)-1
</span><span class='line'>   if exp(i) == exp(i + 1)
</span><span class='line'>       exp_res(exp(i)) = exp_res(exp(i)) + 1;
</span><span class='line'>   elseif exp(i) ~= exp(i + 1)
</span><span class='line'>       exp_res(exp(i+1)) = exp_res(exp(i+1)) + 1;
</span><span class='line'>   end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>subplot(3,1,2); %add plot into one image
</span><span class='line'>plot(exp_res(1:43, :));
</span><span class='line'>title('experience line plot')
</span><span class='line'>xlabel('index of experience number')
</span><span class='line'>ylabel('number of the people')
</span><span class='line'>
</span><span class='line'>%skill number
</span><span class='line'>skill_res = zeros(size(skill));
</span><span class='line'>skill = sort(skill);
</span><span class='line'>for i=1:size(skill)-1
</span><span class='line'>   if skill(i) == skill(i + 1)
</span><span class='line'>       skill_res(skill(i)) = skill_res(skill(i)) + 1;
</span><span class='line'>   elseif skill(i) ~= skill(i + 1)
</span><span class='line'>       skill_res(skill(i+1)) = skill_res(skill(i+1)) + 1;
</span><span class='line'>   end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>subplot(3,1,3); %add plot into one image
</span><span class='line'>plot(skill_res(1:50, :));
</span><span class='line'>title('skill line plot')
</span><span class='line'>xlabel('index of skill number')
</span><span class='line'>ylabel('number of the people')</span></code></pre></td></tr></table></div></figure>


<h3>diff the file</h3>

<ul>
<li>diff whole_file subfile | grep &ldquo;&lt; &rdquo; | sed &rsquo;s/&lt; //g&#8217;

<ul>
<li>using this command can get all the content in the subfile out of the wholefile</li>
</ul>
</li>
</ul>


<h3>if you want to separate one very long string</h3>

<ul>
<li>use &ldquo;\r&rdquo; to replace &ldquo;,&rdquo; not &ldquo;\n&rdquo; in vim</li>
<li>or use

<ul>
<li><code>tr ", " "\n"</code></li>
</ul>
</li>
</ul>


<h3>erase the empty line</h3>

<ul>
<li><code>sed 's/^*$//g' file</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iupui Mason High Performance Mass]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/05/iupui-mason-high-performance-mass/"/>
    <updated>2014-11-05T20:55:25-05:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/05/iupui-mason-high-performance-mass</id>
    <content type="html"><![CDATA[<h3>In the iupui mason server</h3>

<ul>
<li>there are 20 server, each have 10 gigabit ethernet</li>
<li>4 cpu in each server

<ul>
<li>8 core processor each cpu</li>
<li>total 32 core in each server</li>
</ul>
</li>
<li>in the /scratch or /tmp there are total 400 GB disk storage

<ul>
<li>and the file will be delete after 14 days since they are created</li>
<li></li>
</ul>
</li>
</ul>


<!--more-->


<h3>when login</h3>

<ul>
<li>use &ldquo;<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#117;&#x73;&#101;&#114;&#110;&#x61;&#109;&#101;&#x40;&#x6d;&#x61;&#x73;&#x6f;&#x6e;&#46;&#105;&#110;&#x64;&#x69;&#x61;&#x6e;&#97;&#x2e;&#101;&#100;&#117;">&#x75;&#x73;&#x65;&#114;&#x6e;&#x61;&#x6d;&#x65;&#x40;&#109;&#97;&#115;&#111;&#110;&#x2e;&#x69;&#x6e;&#100;&#105;&#x61;&#110;&#97;&#46;&#x65;&#x64;&#117;</a>&rdquo;

<ul>
<li>will result in two server

<ul>
<li>h1.mason.indiana.edu</li>
<li>h2.mason.indiana.edu</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>cpu/memory limit</h3>

<ul>
<li>user process on login node are limited to 20 minutes CPU time

<ul>
<li>if exceeded, will be killed automatically</li>
</ul>
</li>
<li>use TORQUE <code>qsub</code> to submit job that need more than 20 minutes cpu time

<ul>
<li><p><code>qsub</code></p>

<ul>
<li><code>qsub -l walltime=10:00:00 job.script</code>

<ul>
<li>for the system default time is 60 minutes

<ul>
<li>so use walltime to use more time</li>
</ul>
</li>
</ul>
</li>
<li><code>qsub -l nodes=1:ppn=2 job.script</code>

<ul>
<li>run the script in a node and using two core processers</li>
</ul>
</li>
<li><code>qsub -l nodes=4:ppn=31,vmem=100gb -l walltime=20:00:00 jobscript.script</code>

<ul>
<li>if use multi commands, use <code>-l</code> to separate the argument</li>
</ul>
</li>
</ul>
</li>
<li><p><code>qstat</code></p>

<ul>
<li><code>qstat -a</code>

<ul>
<li>display all job</li>
</ul>
</li>
<li><code>qstat -n</code>

<ul>
<li>list the nodes allocated to a job</li>
</ul>
</li>
<li><code>qstat -r</code>

<ul>
<li>list the job that are running</li>
</ul>
</li>
<li><code>qstat -u username@host</code>

<ul>
<li>display the job owned by the username</li>
</ul>
</li>
</ul>
</li>
<li><code>qdel</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Python Package on Redhat Without Root Access]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/01/how-to-install-python-package-on-redhat-without-root-access/"/>
    <updated>2014-11-01T00:01:13-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/01/how-to-install-python-package-on-redhat-without-root-access</id>
    <content type="html"><![CDATA[<h3>dependent of scrapy</h3>

<ul>
<li>remember that the scrapt need python2.7 to run</li>
<li>and there will be lots of package need to be installed</li>
</ul>


<h3>What to do when need to install python package on the server without root access</h3>

<ul>
<li>today I went through a problem that I want to have the python package installed on the high performance server but without the root access</li>
<li>and what I need to do is to install the python 2.7.3 first and then install all the package that scrapy need and finaly get scrapy run</li>
</ul>


<!--more-->


<h3>process I use</h3>

<ul>
<li>And one most important things you need to care about is that

<ul>
<li><p>first install python</p>

<ul>
<li>download the python first and compile the package of it.</li>
<li>then remember the export the python path to the .bashrc and .bash_profile</li>
<li>so that when you simply type <code>python</code> it will not use the default setting of the system</li>
<li>or you can type the absolute path of the python and use the python in the bin directory</li>
</ul>
</li>
<li><p>then install the scrapy from source</p>

<ul>
<li><p>but when you finish install the scrapy</p>

<ul>
<li>you will find out that it will tell you that you do not have some package like Twist , zope, interface and lxml, and cssselect</li>
<li>so what you need to do is to fix all this missing stuff</li>
<li>so use <code>wget</code> to download the source file of these missing file and install them</li>
</ul>
</li>
<li><p>the will comes the most difficult part</p>

<ul>
<li>when you try to install the lxml

<ul>
<li>you will find out that the system do not have the require of the lxml package

<ul>
<li>the libxml2 and libxslt</li>
<li>so what you need to do is to download all the file</li>
<li>and build it from source

<ul>
<li>and remember to add prefix and correct all the path error</li>
<li>and it would be a good way to output the error log to a file and analyze them using the <code>&gt;&amp; output file</code></li>
<li><strong>and do not hesitate to modify the Makefile or setup.py file when neccessary</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>also there are problem when try to install cffi and libffi

<ul>
<li>when compile the libffi library

<ul>
<li>remember to include the path of the libffi library when building the cffi

<ul>
<li>use <code>build_ext -l library_absolute_path -l library2_absolute_path</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>after install the scrapy successfully

<ul>
<li>use the scrapy executable file in the bin of the scrapy source code</li>
<li><code>python2.7 ./scrapy crawl linkedin.com</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014_indianapolis_redefined_hackathron]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/30/2014-indianapolis-redefined-hackathron/"/>
    <updated>2014-10-30T21:25:44-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/30/2014-indianapolis-redefined-hackathron</id>
    <content type="html"><![CDATA[<h3>The hackathron take 24 hours to write an app that can be used for attracting people to indianapolis</h3>

<ul>
<li>and I first design a python version of app</li>
<li>then I use bootstrap theme to develop a mobile compatible web app with php link to the mysql database.</li>
</ul>


<!--more-->


<h3>The code</h3>

<ul>
<li>I have already post the code in github</li>
<li><a href="https://github.com/pbking1/Intro-to-indy">https://github.com/pbking1/Intro-to-indy</a></li>
</ul>


<h3>The summary</h3>

<ul>
<li>using the bootstrap theme can minimise the work in the front end and make the development focus more on the back end logic or database.</li>
<li>talking to a mentor will definitaly help you develop a better software</li>
<li>read the description document carefully before coding</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database_and_backend_injection]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/23/database-and-backend-injection/"/>
    <updated>2014-10-23T09:13:16-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/23/database-and-backend-injection</id>
    <content type="html"><![CDATA[<h3>database ER diagram</h3>

<ul>
<li><img src="http://pbking1.github.com/images/php_project/lab4_db.jpg"></li>
<li>some change in the database <strong>relationship</strong></li>
<li><img src="http://pbking1.github.com/images/php_project/database_lingma_structure.png" style="height: 300px; width: 300px"></li>
<li>we have

<ul>
<li>T_ADMIN</li>
<li>T_USER</li>
<li>T_USER_CLASS</li>
<li>T_PROJECT</li>
<li>T_PRO_LEVEL</li>
<li>T_PROJECT_STATISTICS</li>
<li>T_TASK</li>
<li>T_SUBTASK</li>
<li>T_MATERIAL</li>
<li>T_CUSTOMER</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><strong>Table structure</strong></li>
<li><img src="http://pbking1.github.com/images/php_project/1.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/2.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/3.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/4.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/5.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/6.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/7.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/8.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/9.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/10.png">

<h3>database insertion</h3></li>
<li>database connection</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$conn = mysql_connect("localhost","pengbin","pengbin");
</span><span class='line'>mysql_select_db("pengbin_db", $conn);</span></code></pre></td></tr></table></div></figure>


<ul>
<li>database insertion</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sql = "insert into T_CUSTOMER (CustomerName, CustomerAddress, Notes, Active) values ('$_POST[name]','$_POST[address]','$_POST[note]','$_POST[Active]')";
</span><span class='line'>mysql_query($sql, $conn);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Regular Expression]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/03/python-regular-expression/"/>
    <updated>2014-10-03T13:00:03-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/03/python-regular-expression</id>
    <content type="html"><![CDATA[<h3>regular expression</h3>

<ul>
<li>use the match string

<ul>
<li>but not all the string can be matched</li>
</ul>
</li>
</ul>


<!--more-->


<h3>basic character in python</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import re</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ordinary character

<ul>
<li>like re&#8217;test&#8217; will match the string test</li>
</ul>
</li>
<li>oral character

<ul>
<li>like . ^ $ * + ? {} [] \ | ()</li>
<li>like []

<ul>
<li>use to direct to a range of the string set</li>
<li><code>
s = r'abc'
re.findall(s, "aaaaaaaabc")
//use []
rt = "top tip tap twp tep"
r1 = r"t[io]p"
re.findall(r1, rt)
//output ['top'], ['tip']
r2 = r"t[^io]p"
re.findall(r2, rt)
//output ['tap'],['tep'], ['twp']
</code></li>
<li>and oral character is no use in the []</li>
<li>also can use <code>r'0-3'</code> replace <code>r'0123'</code>

<ul>
<li>use &lsquo;r&rsquo;[0-3a-cA-C]&lsquo;&rsquo; replace <code>r'[0123abcABC]'</code></li>
</ul>
</li>
</ul>
</li>
<li>like ^

<ul>
<li>use the match the head of the line</li>
<li><code>
s = r'^t'
st = 'tss'
//output ['t']
</code></li>
</ul>
</li>
<li>like $

<ul>
<li>use to match the end of the line</li>
</ul>
</li>
<li>like \

<ul>
<li>used if you want to transform the oral character into a original one</li>
<li>use &lsquo;^&rsquo; to make ^ as a original character</li>
<li>and can be used as

<ul>
<li>\d match [0-9]</li>
<li>\D match [^0-9]</li>
<li>\s match [\t\n\r\f\v]

<ul>
<li>means and empty character</li>
</ul>
</li>
<li>\S match [^\t\n\r\f\v]

<ul>
<li>means non empty character</li>
</ul>
</li>
<li>\w match [a-zA-Z0-9]</li>
<li>\W match [^a-zA-Z0-9]</li>
</ul>
</li>
</ul>
</li>
<li>like *

<ul>
<li>match multiple character</li>
<li>means repeat the character in front of the * for 0-many times</li>
<li><code>
r = r'ab*'
rt = 'abbbbbb'
re.findall(r, rt)
//output['abbbbbb']
</code></li>
</ul>
</li>
<li>like +

<ul>
<li>match the charter that appear more than one time</li>
</ul>
</li>
<li>like ?

<ul>
<li> match the charter that appear zero or one time</li>
<li>can be used as minimum match

<ul>
<li><code>r = r'ab+?'</code></li>
<li><code>rt = 'abbbbbb'</code></li>
<li>output the ab</li>
</ul>
</li>
</ul>
</li>
<li>like the {}

<ul>
<li>means that the character can be repeat how many times</li>
<li><code>
r = r'a{1,3}'
rt = 'aaaaa'
then can match a, aa, aaa
</code></li>
<li>{0,} == *</li>
<li>{1,} == +</li>
<li>{0,1} == ?</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>functions</h3>

<ul>
<li>compile the expression to speed up

<ul>
<li><code>
r = r'\d{3,4}-?\d{8}'
p_telephone = re.compile(r)
p_telephone.findall('010-12345678')
//output ['010-12345678']
</code></li>
<li>and you can add attribute while compile</li>
</ul>
</li>
<li><p>there are some normal functions</p>

<ul>
<li>match

<ul>
<li>only search from the front</li>
<li><code>
p_telephone.match('o010-12345678')
//output nothing because the 010-12345678 is not start from the begin
</code></li>
</ul>
</li>
<li>search

<ul>
<li>search the whole string</li>
<li>no matter where the number is , if you can find it, you can find it.</li>
</ul>
</li>
<li>findall</li>
<li>finditer

<ul>
<li>the same as findall but you need to use iter so that you can get the value</li>
</ul>
</li>
</ul>
</li>
<li><p>and there are sub(), subn(), split()</p>

<ul>
<li>sub()

<ul>
<li><code>
r = r'c..t'
re.sub(r, 'aaa', 'caat cast cccc')
//output 'aaa aaa cccc'
</code></li>
</ul>
</li>
<li>subn()

<ul>
<li>the difference between sub and subj is that subj provide a count of the how many stuff you replace</li>
<li><code>
r = r'c..t'
re.subn(r, 'aaa', 'caat cast cccc')
//output 'aaa aaa cccc', 2
</code></li>
</ul>
</li>
<li>split()

<ul>
<li>split the string using a regular express</li>
<li><code>
re.split(r'[\+\*\-]', '1+2-3*5')
//output ['1', '2', '3', '5']
</code></li>
</ul>
</li>
<li>use <code>dir(re)</code> to see what functions re have</li>
</ul>
</li>
</ul>


<h3>flags in re module</h3>

<table>
<thead>
<tr>
<th>flags </th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>dotall, S</td>
<td> let . match all the character contains \n</td>
</tr>
<tr>
<td>ignore case, I </td>
<td>make the match no sensitive about the uppercase and lowercase</td>
</tr>
<tr>
<td>locale, L </td>
<td> do locale-aware match, match the French or the other language</td>
</tr>
<tr>
<td>multiline, M </td>
<td> match multiline, affect ^ and $</td>
</tr>
<tr>
<td>verbose, X </td>
<td> can use the REs verbose status, and make the organise more clearly</td>
</tr>
</tbody>
</table>


<h3>devision</h3>

<ul>
<li>()</li>
<li><code>email = r'\w{3}@\w+(\.com|\.cn)'</code></li>
<li>use the () to divide the .com and .cn</li>
<li>so that we can use the regular form to match email address</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mpi_parallel_programming_2]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-2/"/>
    <updated>2014-09-15T15:28:34-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-2</id>
    <content type="html"><![CDATA[<h3>data type</h3>

<ul>
<li><p>there are only these data type in the MPI</p>

<ul>
<li>if you want to use struct or multi array, you need to do something else</li>
</ul>
</li>
<li><table>
<thead>
<tr>
<th></th>
<th>MPI data type</th>
<th> c data type</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>MPI_CHAR</td>
<td>signed char|</td>
</tr>
<tr>
<td></td>
<td>MPI_SHORT</td>
<td>signed short int|</td>
</tr>
<tr>
<td></td>
<td>MPI_INT</td>
<td>signed int|</td>
</tr>
<tr>
<td></td>
<td>MPI_LONG</td>
<td>signed long int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED_CHAR</td>
<td>unsigned long int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED_SHORT</td>
<td>unsigned short int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED</td>
<td>unsigned int|</td>
</tr>
<tr>
<td></td>
<td>MPI_FLOAT</td>
<td>float|</td>
</tr>
<tr>
<td></td>
<td>MPI_DOUBLE</td>
<td>double|</td>
</tr>
<tr>
<td></td>
<td>MPI_LONG_DOUBLE</td>
<td>long double|</td>
</tr>
<tr>
<td></td>
<td>MPI_BYTE</td>
<td>|</td>
</tr>
<tr>
<td></td>
<td>MPI_MPI_PACKED</td>
<td>|</td>
</tr>
</tbody>
</table>
</li>
</ul>


<!--more-->


<h3>about the status</h3>

<ul>
<li>the MPI_status combine a lots of information

<ul>
<li>there are at least three member in the status

<ul>
<li>MPI_SOURCE, MPI_TAG, MPI_ERROR</li>
</ul>
</li>
</ul>
</li>
<li>and we can get the size of the message using

<ul>
<li>MPI_Get_Count(MPI_Status <em>status, MPI_Datatype datatype, int</em> count_ptr);</li>
</ul>
</li>
</ul>


<h3>The broadcast idea</h3>

<ul>
<li>you can use the MPI_Bcast idea to send the message to all the other process;

<ul>
<li>MPI_Bcast(void *message, int count, MPI_Datatype datatype, int root, MPI_Comm comm)</li>
</ul>
</li>
</ul>


<h3>gather the data and scatter the data</h3>

<ul>
<li>use MPI_Gather

<ul>
<li>MPI_Gather(void <em>send_data, int send_count, MPI_Datatype send_type, void</em> recv_data, int recv_count, MPI_Datatype recv_type, int root, MPI_Comm comm)</li>
</ul>
</li>
<li>use MPI_Scatter to scatter the data

<ul>
<li>MPI_Scatter(void <em>send_data, int send_count, MPI_Datatype send_type, void </em>recv_data, int recv_count, MPI_Datatype recv_type, int root, MPI_Comm comm);</li>
<li>MPI_Scatter split the data referenced by send_data on the process with rank root into k segment.each of which consists of send_count elements of type send_type.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mpi_parallel_programming_1]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-1/"/>
    <updated>2014-09-15T14:19:13-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-1</id>
    <content type="html"><![CDATA[<h3>difference between SIMD and MIMD</h3>

<ul>
<li>difference kinds of computer architecture is using the Flynn to classify

<ul>
<li>SISD</li>
<li>SIMD</li>
<li>MISD</li>
<li>MIMD</li>
</ul>
</li>
<li>we only talk about the SIMD and MIMD here

<ul>
<li>SIMD means that one command deal with many data streams

<ul>
<li>most of the single core machine is SIMD machine</li>
<li>and these kinds of machine is most used in the image processing and multimedia processing.</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<pre><code>- MIMD means that many commands deal with many data streams
    - the lastest multicore platform is a MIMD machine
    - the MIMD are asynchronous
    - 
</code></pre>

<h4>the multi core hardware architecture</h4>

<ul>
<li>the multicore CPU is combine many CPU into one chip. and each CPU core has a single processor.

<ul>
<li>each core has it&rsquo;s own cache. (some other may share one cache between multi CPU)</li>
</ul>
</li>
</ul>


<h3>message passing</h3>

<ul>
<li>There are two methods in the message passing

<ul>
<li>MPI_Send

<ul>
<li>void * buffer, int count, MPI_Datatype datatype, int destination, int tag, MPI_Comm communicator</li>
<li>e.g

<ul>
<li>MPI_Send(&amp;x, 1, MPI_FLOAT, 1, 0, MPI_COMM_WORLD);</li>
</ul>
</li>
</ul>
</li>
<li>MPI_Recv

<ul>
<li>void * buffer, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm communicator, MPI_Status status</li>
<li>MPI_Recv(&amp;x, 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD, &amp;status);</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>sample program</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "mpi.h"
</span><span class='line'>int main(int argc, char *argv[]){
</span><span class='line'>  int rank; //rank of the process
</span><span class='line'>  int source; //rank of the sender
</span><span class='line'>  int dest;   //rank of the receiver
</span><span class='line'>  int num;    //number of the processers
</span><span class='line'>  int tags;
</span><span class='line'>  char messages[1000];
</span><span class='line'>  MPI_Status status;
</span><span class='line'>
</span><span class='line'>  //setting up the MPI
</span><span class='line'>  MPI_init(&argc, &argv);
</span><span class='line'>
</span><span class='line'>  //find out the rank of the curret program
</span><span class='line'>  MPI_Comm_rank(MPI_COMM_WORLD, rank);
</span><span class='line'>
</span><span class='line'>  //find out the number of the processers
</span><span class='line'>  MPI_Common_Size(MPI_COMM_WORLD, &p);
</span><span class='line'>
</span><span class='line'>  if(rank != 0){ //if the current program is not the root program
</span><span class='line'>      sprintf(message, "hello from %d", rank);
</span><span class='line'>      dest = 0;
</span><span class='line'>      MPI_Send(message, strlen(message) + 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
</span><span class='line'>  }else{
</span><span class='line'>      sprintf(message, "hello from ");
</span><span class='line'>      MPI_Recv(message, 100, MPI_CHAR, source, tag, MPI_COMM_WORLD, &status);
</span><span class='line'>      printf("%s\n", message);
</span><span class='line'>  }
</span><span class='line'>  MPI_Finalize();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>how to run the program</h3>

<ul>
<li>for c++

<ul>
<li><code>mpic++ -o test test.cpp</code></li>
</ul>
</li>
<li>for c

<ul>
<li><code>mpicc -o test test.c</code></li>
</ul>
</li>
<li>run

<ul>
<li>for m core computer

<ul>
<li><code>mpirun -np m test</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solution to Access Denied for User 'Root'@'localhost' (Using password:YES)]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/09/solution-to-access-denied-for-user-root-at-localhost-using-password/"/>
    <updated>2014-09-09T11:49:30-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/09/solution-to-access-denied-for-user-root-at-localhost-using-password</id>
    <content type="html"><![CDATA[<h3>Access denied for user &lsquo;root&rsquo;@&lsquo;localhost&rsquo; (using password:YES)</h3>

<ul>
<li>in mac

<ul>
<li>open the my.conf in the directory /usr/local/mysql</li>
<li>add <code>skip-grant-tables</code></li>
<li>restart the mysql service

<ul>
<li><code>sudo /usr/local/mysql/bin/mysqld_safe &amp;</code></li>
</ul>
</li>
<li>then use <code>mysql -uroot -p</code>

<ul>
<li>you can login without password</li>
<li>then update the password after <code>use mysql;</code></li>
<li><code>update user set password=PASSWORD("rootadmin") where user='root';</code></li>
</ul>
</li>
<li>after that

<ul>
<li>delete the <code>skip-grant-tables</code> add in the my.conf file</li>
</ul>
</li>
<li>restart the mysql service</li>
<li>then you can use the <code>mysql -u root -q</code> to login with your new password</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Tutorial(1)]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/08/php-tutorial-1/"/>
    <updated>2014-09-08T15:46:01-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/08/php-tutorial-1</id>
    <content type="html"><![CDATA[<h3>class 1</h3>

<ul>
<li>how the web site work when you request for the page

<ul>
<li>when you log into the internet, you request for the web server for a file that is the page.</li>
<li>if the web server is request for a html file, the server just give it back</li>
<li>else if it is the php file, the server send the php file to the php interpreter and process the php

<ul>
<li>and after the process, the interpreter give it back</li>
<li>(for php is an interpret kind of language and it do not need to be compile)</li>
<li>and then the server send the php file back to the web browser</li>
</ul>
</li>
<li>if the php is interacting with the database, then the code of the php will have sql query with the database.

<ul>
<li>after the query, send back to the php interpreter and then send back to the server and then send back to the web browser</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<p></p>

<ul>
<li>All in all, there are can be three layer in the environment

<ul>
<li>the front is the browser

<ul>
<li>html, css, coding logic</li>
</ul>
</li>
<li>the middle is the server

<ul>
<li>web server and php interpreter</li>
</ul>
</li>
<li>the database aspect is the third

<ul>
<li>mysql database engine</li>
<li>phpMyAdmin(DBMS)</li>
</ul>
</li>
</ul>
</li>
<li>the php interpretation run from the top of the file to the bottom of the top</li>
</ul>


<h3>class 2</h3>

<ul>
<li>&lsquo;&rsquo; these two symbol can be the end of the string</li>
<li>the HEREdoc mechnic is the

<ul>
<li>remember that the final HERE should have no space in front of it</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print &lt;&lt;&lt;HERE
</span><span class='line'>        &lt;p&gt;&lt;/p&gt;
</span><span class='line'>HERE;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>or you can use the filter_input method to validate the email easily.

<ul>
<li>such as without &ldquo;.&rdquo; &ldquo;space&rdquo; and so on.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FMDB and Tableview in IOS]]></title>
    <link href="http://pbking1.github.com/blog/2014/07/08/fmdb-and-tableview-in-ios/"/>
    <updated>2014-07-08T04:01:33-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/07/08/fmdb-and-tableview-in-ios</id>
    <content type="html"><![CDATA[<h3>What is FMDB?</h3>

<ul>
<li>FMDB is a framework that used to simplified the sqlite3 operation</li>
<li>and we can use this framework to operate the sqlite easily</li>
<li>and we need to download the fmdb package in github

<ul>
<li>then copy the fmdb folder to our project</li>
<li>include the sqlite3 framework in your project</li>
</ul>
</li>
<li>then you only need to write <code>import"FMDB.h"</code>

<ul>
<li>you will be able to use the api of fmdb</li>
</ul>
</li>
</ul>


<!--more-->


<h3>tableview is one of the most important thing in IOS</h3>

<ul>
<li>just like the listview in android</li>
<li>and the line in the tableview is called cell</li>
</ul>


<h3>source code</h3>

<ul>
<li>in the source code

<ul>
<li>we do not use storybroad or xib</li>
<li>we just draw the things on the view</li>
</ul>
</li>
<li>Viewcontroller.h</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController&lt;UITableViewDataSource, UITableViewDelegate&gt;{
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@property NSInteger tag;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Viewcontroller.m</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import "FMDB.h"
</span><span class='line'>#import "detailViewController.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>NSMutableArray *listofname;
</span><span class='line'>@synthesize tag;
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  listofname = [[NSMutableArray alloc]init];
</span><span class='line'>    UITableView *tableview = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, 320, 600)];
</span><span class='line'>    
</span><span class='line'>    //used to define the database 
</span><span class='line'>    NSString *docdir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
</span><span class='line'>    NSString *dbpath = [docdir stringByAppendingPathComponent:@"db1.sqlite"];
</span><span class='line'>    FMDatabase *db = [FMDatabase databaseWithPath:dbpath];
</span><span class='line'>    [db open];
</span><span class='line'>    //open the database
</span><span class='line'>    if(![db open]){
</span><span class='line'>        NSLog(@"could not open db");
</span><span class='line'>    }
</span><span class='line'>    //drop the table everytime because if you do not do this
</span><span class='line'>    //the insert sentense will happen every time
</span><span class='line'>    [db executeUpdate:@"drop table exercise"];
</span><span class='line'>    [db executeUpdate:@"drop table poetries"];
</span><span class='line'>    [db executeUpdate:@"create table exercise(_id integer, content text, answer text)"];
</span><span class='line'>    [db executeUpdate:@"create table poetries(_id integer, title text, author text, age text, size integer, line1 text, line2 text, line3 text, line4 text, explain text)"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(1,'赋得古原草送别','白居易','唐','5','离离原上草','一岁一枯荣','野火烧不尽','春风吹又生','译文：茂盛的野草长在古原上的野草多么茂盛，每年枯萎又每年新生。熊熊野火不能将它烧尽，春风吹过它又重获生命。')"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(2,'春夜喜雨','杜甫','唐','5','好雨知时节','当春乃发生','随风潜入夜','润物细无声','译文：春雨知道适应季节，当万物萌发生长时，它伴随着春风，在夜晚偷偷地及时降临，滋润万物又细微无声。') "];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(3,'悯农','李绅','唐','5','锄禾日当午','汗滴禾下土','谁知盘中餐','粒粒皆辛苦','译文：这首悯农诗，写出了农民劳动的艰辛和对浪费粮食的愤慨。在盛夏的正午，农民顶着火辣辣的太阳锄地，汗水淼淌滴在庄稼地里。可是谁又知道，碗中的每一粒饭都包含着农民的辛苦啊!' )"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(4,'静夜思','李白','唐','5','床前明月光','疑是地上霜','举头望明月','低头思故乡','译文：那透过窗户映照在床前的月光，起初以为是一层层的白霜。仰首看那空中的一轮明月，不由得低下头来沉思，愈加想念自己的故乡。')"];
</span><span class='line'>
</span><span class='line'>    //query the database
</span><span class='line'>    FMResultSet *rs = [db executeQuery:@"select * from poetries"];
</span><span class='line'>    while ([rs next]) {
</span><span class='line'>      //add the title column in to the source of the table view
</span><span class='line'>        [listofname addObject:[rs stringForColumn:@"title"]];
</span><span class='line'>    }
</span><span class='line'>    [db close];
</span><span class='line'>    
</span><span class='line'>    [tableview setDelegate:self];   //add the source and delegate
</span><span class='line'>    [tableview setDataSource:self];
</span><span class='line'>    [self.view addSubview:tableview];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define the action in the cell 
</span><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    static NSString *cellidentifier = @"name";  
</span><span class='line'>    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellidentifier];
</span><span class='line'>    
</span><span class='line'>    if(cell == nil){
</span><span class='line'>        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellidentifier];
</span><span class='line'>    }
</span><span class='line'>    NSString *cellvalue = [listofname objectAtIndex:indexPath.row];
</span><span class='line'>    cell.textLabel.text = cellvalue;
</span><span class='line'>    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
</span><span class='line'>    
</span><span class='line'>    cell.userInteractionEnabled = YES;
</span><span class='line'>    
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
</span><span class='line'>{
</span><span class='line'>    return [listofname count];    //define the number of the row in tableview
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSInteger)tableView:(UITableView *)tableView indentationLevelForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    return 0;   //define the indent
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define the event when click the cell(very important)
</span><span class='line'>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    int mark = indexPath.row;  //pass the row number to the next controller using tag
</span><span class='line'>    detailViewController *dv = [[detailViewController alloc] init];
</span><span class='line'>    dv.tag = mark;
</span><span class='line'>    [self presentModalViewController:dv animated:YES];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>    [listofname dealloc];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidUnload
</span><span class='line'>{
</span><span class='line'>    [super viewDidUnload];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>detailViewController.h</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface detailViewController : UIViewController
</span><span class='line'>
</span><span class='line'>@property NSInteger tag;
</span><span class='line'>@property UILabel *label;
</span><span class='line'>@property UILabel *line1label;
</span><span class='line'>@property UILabel *line2label;
</span><span class='line'>@property UILabel *line3label;
</span><span class='line'>@property UILabel *line4label;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>detailViewController.m</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "detailViewController.h"
</span><span class='line'>#import "FMDB.h"
</span><span class='line'>@interface detailViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation detailViewController
</span><span class='line'>
</span><span class='line'>@synthesize tag;
</span><span class='line'>@synthesize label;
</span><span class='line'>@synthesize line1label;
</span><span class='line'>@synthesize line2label;
</span><span class='line'>@synthesize line3label;
</span><span class='line'>@synthesize line4label;
</span><span class='line'>NSMutableArray *listofname;
</span><span class='line'>
</span><span class='line'>- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
</span><span class='line'>{
</span><span class='line'>    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
</span><span class='line'>    if (self) {
</span><span class='line'>        // Custom initialization
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    self.view.backgroundColor = [UIColor whiteColor];
</span><span class='line'>    NSString *tmep = [NSString stringWithFormat:@"%d", self.tag + 1]; 
</span><span class='line'>    //convert the integer tag into string
</span><span class='line'>
</span><span class='line'>    NSString *docdir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
</span><span class='line'>    NSString *dbpath = [docdir stringByAppendingPathComponent:@"db1.sqlite"];
</span><span class='line'>    FMDatabase *db = [FMDatabase databaseWithPath:dbpath];
</span><span class='line'>    [db open];
</span><span class='line'>    if(![db open]){
</span><span class='line'>        NSLog(@"could not open db");
</span><span class='line'>    }
</span><span class='line'>    //use the tag passed by the previous controller and query the database
</span><span class='line'>    FMResultSet *rs = [db executeQuery:@"select * from poetries where _id = ?", tmep];
</span><span class='line'>    
</span><span class='line'>    line1label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 300, 20)];
</span><span class='line'>    line2label = [[UILabel alloc] initWithFrame:CGRectMake(10, 50, 300, 20)];
</span><span class='line'>    line3label = [[UILabel alloc] initWithFrame:CGRectMake(10, 80, 300, 20)];
</span><span class='line'>    line4label = [[UILabel alloc] initWithFrame:CGRectMake(10, 100, 300, 20)];
</span><span class='line'>    while ([rs next]) {
</span><span class='line'>        line1label.text = [rs stringForColumn:@"line1"];
</span><span class='line'>        line2label.text = [rs stringForColumn:@"line2"];
</span><span class='line'>        line3label.text = [rs stringForColumn:@"line3"];
</span><span class='line'>        line4label.text = [rs stringForColumn:@"line4"];
</span><span class='line'>    }
</span><span class='line'>    [self.view addSubview:line1label];
</span><span class='line'>    [self.view addSubview:line2label];
</span><span class='line'>    [self.view addSubview:line3label];
</span><span class='line'>    [self.view addSubview:line4label];
</span><span class='line'>    [db close];
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Opendns to Cross the Great Firewall in China]]></title>
    <link href="http://pbking1.github.com/blog/2014/07/08/use-opendns-to-cross-the-great-firewall-in-china/"/>
    <updated>2014-07-08T03:22:39-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/07/08/use-opendns-to-cross-the-great-firewall-in-china</id>
    <content type="html"><![CDATA[<h3>once upon a time</h3>

<ul>
<li>we can log in facebook and google directly</li>
<li>but nowadays we can not</li>
<li>and because DNS hijacking and DNS cache posioning, we can not log in directly anymore</li>
</ul>


<!--more-->


<h3>what is DNS hikacking?</h3>

<ul>
<li>DNS hijacking(劫持)</li>
<li>to simplifiy the idea

<ul>
<li>when you type in google.com, you will not attach the google.com

<ul>
<li>you will be direct to the baidu.com</li>
</ul>
</li>
<li>and this is the DNS hijacking</li>
</ul>
</li>
<li><strong>and the reason why this will happen is that the DNS server is cracked and the domain name will be parse to the wrong ip.</strong></li>
<li>and recently the govenment is using this kind of strategy</li>
</ul>


<h3>what is DNS cache posioning?</h3>

<ul>
<li>DNS污染</li>
<li>this idea used to be used to block the youtube, facebook website</li>
<li>this is on the protocol layer</li>
<li>and the mechisim is that when you want to launch the particular website

<ul>
<li>the port 53 UDP is check and when they found that you want to attach particular website, they will change the domain name parse DNS server into a wrong one and then you will not be able to get the correct ip.</li>
<li>then you will not be able to get to the website.</li>
</ul>
</li>
</ul>


<h3>How dns works?</h3>

<ul>
<li>first, when we use some domain name like &ldquo;www.facebook.com&rdquo;

<ul>
<li>and when we type the domain name into the website

<ul>
<li>the website will send the name to the dns server to check the ip</li>
<li>then return the ip the our computer</li>
<li>then we will know the ip of the target website

<ul>
<li>and we will be able to get to the website</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>why can we use this in China?</h3>

<ul>
<li>Because in China when you type &ldquo;www.google.com&rdquo;</li>
<li>they block the dns parse not the connection

<ul>
<li>so we will be able to break through the wall if we use the other dns server to help use parse the domain name</li>
</ul>
</li>
</ul>


<h3>how to use opendns</h3>

<ul>
<li>change the dns settings in the PC or laptop

<ul>
<li>if you want to use the google dns

<ul>
<li>set &ldquo;8.8.8.8&rdquo; and &ldquo;8.8.4.4&rdquo;</li>
</ul>
</li>
<li>if you want to use the opendns

<ul>
<li>set &ldquo;208.67.222.222&rdquo; and &ldquo;208.67.220.220&rdquo;</li>
<li>or set &ldquo;42.120.21.30&rdquo; and &ldquo;221.10.251.52&rdquo;</li>
</ul>
</li>
</ul>
</li>
<li>then if you are using Max 10.8 or above

<ul>
<li>you can renew the dns setting using

<ul>
<li>&ldquo;sudo killall -HUP mDNSResponder&rdquo;</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>when not to use opendns</h3>

<ul>
<li>when you are using the payment or something private

<ul>
<li>do not use opendns</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS 报表类库（trial 30days）]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/25/ios-bao-biao-lei-ku-%28trial-30days%29/"/>
    <updated>2014-06-25T04:25:40-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/25/ios-bao-biao-lei-ku-(trial-30days)</id>
    <content type="html"><![CDATA[<h3>一个非常容易使用的报表类库</h3>

<ul>
<li>NChart3D

<ul>
<li>但是只能免费使用30天</li>
<li>并且经过真机调试

<ul>
<li>效果做得很好，除了不能点击某个地方显示具体信息之外其他都做得很好</li>
<li>比如可以方法缩小，左右拖，平移旋转都行</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>在AppDelegate.m里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "AppDelegate.h"
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@implementation AppDelegate
</span><span class='line'>{
</span><span class='line'>    UIWindow *m_window;
</span><span class='line'>}
</span><span class='line'>@synthesize window = m_window;
</span><span class='line'>
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
</span><span class='line'>{
</span><span class='line'>    m_window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
</span><span class='line'>    m_window.userInteractionEnabled = YES;
</span><span class='line'>    m_window.multipleTouchEnabled = YES;
</span><span class='line'>    [m_window makeKeyAndVisible];
</span><span class='line'>    m_window.rootViewController = [[ViewController new] autorelease];
</span><span class='line'>    // Override point for customization after application launch.
</span><span class='line'>    return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Viewcontroller.h里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController&lt;NChartSeriesDataSource&gt;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Viewcontroller.m里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>{
</span><span class='line'>    NChartView *m_view;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>    [m_view release];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view, typically from a nib.
</span><span class='line'>    m_view = [[NChartView alloc] initWithFrame:CGRectZero];
</span><span class='line'>    m_view.chart.licenseKey = @"";
</span><span class='line'>    m_view.chart.cartesianSystem.margin = NChartMarginMake(10.0f, 10.0f, 10.0f, 20.0f);
</span><span class='line'>    m_view.chart.shouldAntialias = YES;
</span><span class='line'>    NChartColumnSeries *serires = [[NChartColumnSeries new] autorelease];
</span><span class='line'>    serires.brush = [NChartSolidColorBrush solidColorBrushWithColor:[UIColor colorWithRed:0.0 green:0.7 blue:0.4 alpha:1.0]];
</span><span class='line'>    serires.dataSource = self;
</span><span class='line'>    [m_view.chart addSeries:serires];
</span><span class='line'>    [m_view.chart updateData];
</span><span class='line'>    self.view = m_view;   //使用新建的view
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSArray *)seriesDataSourcePointsForSeries:(NChartSeries *)series
</span><span class='line'>{
</span><span class='line'>    NSMutableArray *result = [NSMutableArray array];
</span><span class='line'>    for(int i = 0; i &lt; 10; i++)
</span><span class='line'>        [result addObject:[NChartPoint pointWithState:[NChartPointState pointStateAlignedToXWithX:i Y:(rand()%30) + 1]forSeries:series]];
</span><span class='line'>    return result;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSString *)seriesDataSourceNameForSeries:(NChartSeries *)series
</span><span class='line'>{
</span><span class='line'>    return @"My series";
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>效果

<ul>
<li><img src="http://pbking1.github.com/images/ios/ios_table1.png"></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS UILabel and UITextfield]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/25/ios-uilabel-and-uitextfield/"/>
    <updated>2014-06-25T03:00:33-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/25/ios-uilabel-and-uitextfield</id>
    <content type="html"><![CDATA[<h3>label</h3>

<ul>
<li>相当于android里面的textview</li>
<li>用setText来设置内容</li>
<li>setBackground来设置背景颜色</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label1 = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 290, 44)];
</span><span class='line'>[label1 setText:@"项目里程碑                          请选择&gt;"];
</span><span class='line'>[label1 setBackgroundColor:[UIColor whiteColor]];
</span><span class='line'>[self.view addSubview:label1];
</span></code></pre></td></tr></table></div></figure>


<h3>textfield</h3>

<ul>
<li>相当于android里面的edittext</li>
<li>用layer.cornerRadius设置圆角</li>
<li>placeholder设置hint，提示</li>
<li>貌似使用这些方法需要把UITextfield定义在.h里面</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UITextField *text1 = [[UITextField alloc] initWithFrame:CGRectMake(10, 340, 290, 84)];
</span><span class='line'>self.text1.placeholder = @"进度说明";
</span><span class='line'>self.text1.layer.cornerRadius = 10;
</span><span class='line'>[text1 setBackgroundColor:[UIColor whiteColor]];
</span><span class='line'>[self.view addSubview:text1];</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Selector(jump to the Other Page)]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-selector-jump-to-the-other-page/"/>
    <updated>2014-06-24T23:02:32-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-selector-jump-to-the-other-page</id>
    <content type="html"><![CDATA[<h3>响应事件或者跳转</h3>

<ul>
<li>使用每个控件里面的action的selector</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIBarButtonItem *leftbutton = [[UIBarButtonItem alloc] initWithTitle:@"cancel" style:UIBarButtonSystemItemDone target:self action:@selector(goBack)];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>实现selector的跳转

<ul>
<li>定义要跳转到的页面的viewcontroller</li>
<li>用presentModalViewController跳转</li>
<li>用完记得释放资源</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)goBack{
</span><span class='line'>    basicinfo *p1 = [[basicinfo alloc] init];
</span><span class='line'>    [self presentModalViewController:p1 animated:YES];
</span><span class='line'>    [p1 release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
