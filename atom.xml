<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KING]]></title>
  <link href="http://pbking1.github.com/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2014-11-05T21:27:29-05:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iupui Mason High Performance Mass]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/05/iupui-mason-high-performance-mass/"/>
    <updated>2014-11-05T20:55:25-05:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/05/iupui-mason-high-performance-mass</id>
    <content type="html"><![CDATA[<h3>In the iupui mason server</h3>

<ul>
<li>there are 20 server, each have 10 gigabit ethernet</li>
<li>4 cpu in each server

<ul>
<li>8 core processor each cpu</li>
<li>total 32 core in each server</li>
</ul>
</li>
<li>in the /scratch or /tmp there are total 400 GB disk storage

<ul>
<li>and the file will be delete after 14 days since they are created</li>
<li></li>
</ul>
</li>
</ul>


<!--more-->


<h3>when login</h3>

<ul>
<li>use &ldquo;<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#x75;&#115;&#101;&#114;&#x6e;&#x61;&#x6d;&#x65;&#x40;&#109;&#x61;&#x73;&#x6f;&#x6e;&#x2e;&#x69;&#x6e;&#100;&#105;&#97;&#x6e;&#x61;&#46;&#101;&#x64;&#x75;">&#117;&#x73;&#x65;&#114;&#110;&#97;&#109;&#101;&#x40;&#x6d;&#x61;&#115;&#111;&#x6e;&#46;&#105;&#110;&#x64;&#x69;&#x61;&#x6e;&#x61;&#46;&#x65;&#x64;&#x75;</a>&rdquo;

<ul>
<li>will result in two server

<ul>
<li>h1.mason.indiana.edu</li>
<li>h2.mason.indiana.edu</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>cpu/memory limit</h3>

<ul>
<li>user process on login node are limited to 20 minutes CPU time

<ul>
<li>if exceeded, will be killed automatically</li>
</ul>
</li>
<li>use TORQUE <code>qsub</code> to submit job that need more than 20 minutes cpu time

<ul>
<li><p><code>qsub</code></p>

<ul>
<li><code>qsub -l walltime=10:00:00 job.script</code>

<ul>
<li>for the system default time is 60 minutes

<ul>
<li>so use walltime to use more time</li>
</ul>
</li>
</ul>
</li>
<li><code>qsub -l nodes=1:ppn=2 job.script</code>

<ul>
<li>run the script in a node and using two core processers</li>
</ul>
</li>
<li><code>qsub -l nodes=4:ppn=31,vmem=100gb -l walltime=20:00:00 jobscript.script</code>

<ul>
<li>if use multi commands, use <code>-l</code> to separate the argument</li>
</ul>
</li>
</ul>
</li>
<li><p><code>qstat</code></p>

<ul>
<li><code>qstat -a</code>

<ul>
<li>display all job</li>
</ul>
</li>
<li><code>qstat -n</code>

<ul>
<li>list the nodes allocated to a job</li>
</ul>
</li>
<li><code>qstat -r</code>

<ul>
<li>list the job that are running</li>
</ul>
</li>
<li><code>qstat -u username@host</code>

<ul>
<li>display the job owned by the username</li>
</ul>
</li>
</ul>
</li>
<li><code>qdel</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Python Package on Redhat Without Root Access]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/01/how-to-install-python-package-on-redhat-without-root-access/"/>
    <updated>2014-11-01T00:01:13-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/01/how-to-install-python-package-on-redhat-without-root-access</id>
    <content type="html"><![CDATA[<h3>What to do when need to install python package on the server without root access</h3>

<ul>
<li>today I went through a problem that I want to have the python package installed on the high performance server but without the root access</li>
<li>and what I need to do is to install the python 2.7.3 first and then install all the package that scrapy need and finaly get scrapy run</li>
</ul>


<!--more-->


<h3>process I use</h3>

<ul>
<li>And one most important things you need to care about is that

<ul>
<li><p>first install python</p>

<ul>
<li>download the python first and compile the package of it.</li>
<li>then remember the export the python path to the .bashrc and .bash_profile</li>
<li>so that when you simply type <code>python</code> it will not use the default setting of the system</li>
<li>or you can type the absolute path of the python and use the python in the bin directory</li>
</ul>
</li>
<li><p>then install the scrapy from source</p>

<ul>
<li><p>but when you finish install the scrapy</p>

<ul>
<li>you will find out that it will tell you that you do not have some package like Twist , zope, interface and lxml, and cssselect</li>
<li>so what you need to do is to fix all this missing stuff</li>
<li>so use <code>wget</code> to download the source file of these missing file and install them</li>
</ul>
</li>
<li><p>the will comes the most difficult part</p>

<ul>
<li>when you try to install the lxml

<ul>
<li>you will find out that the system do not have the require of the lxml package

<ul>
<li>the libxml2 and libxslt</li>
<li>so what you need to do is to download all the file</li>
<li>and build it from source

<ul>
<li>and remember to add prefix and correct all the path error</li>
<li>and it would be a good way to output the error log to a file and analyze them using the <code>&gt;&amp; output file</code></li>
<li><strong>and do not hesitate to modify the Makefile or setup.py file when neccessary</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014_indianapolis_redefined_hackathron]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/30/2014-indianapolis-redefined-hackathron/"/>
    <updated>2014-10-30T21:25:44-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/30/2014-indianapolis-redefined-hackathron</id>
    <content type="html"><![CDATA[<h3>The hackathron take 24 hours to write an app that can be used for attracting people to indianapolis</h3>

<ul>
<li>and I first design a python version of app</li>
<li>then I use bootstrap theme to develop a mobile compatible web app with php link to the mysql database.</li>
</ul>


<!--more-->


<h3>The code</h3>

<ul>
<li>I have already post the code in github</li>
<li><a href="https://github.com/pbking1/Intro-to-indy">https://github.com/pbking1/Intro-to-indy</a></li>
</ul>


<h3>The summary</h3>

<ul>
<li>using the bootstrap theme can minimise the work in the front end and make the development focus more on the back end logic or database.</li>
<li>talking to a mentor will definitaly help you develop a better software</li>
<li>read the description document carefully before coding</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database_and_backend_injection]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/23/database-and-backend-injection/"/>
    <updated>2014-10-23T09:13:16-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/23/database-and-backend-injection</id>
    <content type="html"><![CDATA[<h3>database ER diagram</h3>

<ul>
<li><img src="http://pbking1.github.com/images/php_project/lab4_db.jpg"></li>
<li>some change in the database <strong>relationship</strong></li>
<li><img src="http://pbking1.github.com/images/php_project/database_lingma_structure.png" style="height: 300px; width: 300px"></li>
<li>we have

<ul>
<li>T_ADMIN</li>
<li>T_USER</li>
<li>T_USER_CLASS</li>
<li>T_PROJECT</li>
<li>T_PRO_LEVEL</li>
<li>T_PROJECT_STATISTICS</li>
<li>T_TASK</li>
<li>T_SUBTASK</li>
<li>T_MATERIAL</li>
<li>T_CUSTOMER</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><strong>Table structure</strong></li>
<li><img src="http://pbking1.github.com/images/php_project/1.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/2.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/3.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/4.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/5.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/6.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/7.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/8.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/9.png"></li>
<li><img src="http://pbking1.github.com/images/php_project/10.png">

<h3>database insertion</h3></li>
<li>database connection</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$conn = mysql_connect("localhost","pengbin","pengbin");
</span><span class='line'>mysql_select_db("pengbin_db", $conn);</span></code></pre></td></tr></table></div></figure>


<ul>
<li>database insertion</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sql = "insert into T_CUSTOMER (CustomerName, CustomerAddress, Notes, Active) values ('$_POST[name]','$_POST[address]','$_POST[note]','$_POST[Active]')";
</span><span class='line'>mysql_query($sql, $conn);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Regular Expression]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/03/python-regular-expression/"/>
    <updated>2014-10-03T13:00:03-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/03/python-regular-expression</id>
    <content type="html"><![CDATA[<h3>regular expression</h3>

<ul>
<li>use the match string

<ul>
<li>but not all the string can be matched</li>
</ul>
</li>
</ul>


<!--more-->


<h3>basic character in python</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import re</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ordinary character

<ul>
<li>like re&#8217;test&#8217; will match the string test</li>
</ul>
</li>
<li>oral character

<ul>
<li>like . ^ $ * + ? {} [] \ | ()</li>
<li>like []

<ul>
<li>use to direct to a range of the string set</li>
<li><code>
s = r'abc'
re.findall(s, "aaaaaaaabc")
//use []
rt = "top tip tap twp tep"
r1 = r"t[io]p"
re.findall(r1, rt)
//output ['top'], ['tip']
r2 = r"t[^io]p"
re.findall(r2, rt)
//output ['tap'],['tep'], ['twp']
</code></li>
<li>and oral character is no use in the []</li>
<li>also can use <code>r'0-3'</code> replace <code>r'0123'</code>

<ul>
<li>use &lsquo;r&rsquo;[0-3a-cA-C]&lsquo;&rsquo; replace <code>r'[0123abcABC]'</code></li>
</ul>
</li>
</ul>
</li>
<li>like ^

<ul>
<li>use the match the head of the line</li>
<li><code>
s = r'^t'
st = 'tss'
//output ['t']
</code></li>
</ul>
</li>
<li>like $

<ul>
<li>use to match the end of the line</li>
</ul>
</li>
<li>like \

<ul>
<li>used if you want to transform the oral character into a original one</li>
<li>use &lsquo;^&rsquo; to make ^ as a original character</li>
<li>and can be used as

<ul>
<li>\d match [0-9]</li>
<li>\D match [^0-9]</li>
<li>\s match [\t\n\r\f\v]

<ul>
<li>means and empty character</li>
</ul>
</li>
<li>\S match [^\t\n\r\f\v]

<ul>
<li>means non empty character</li>
</ul>
</li>
<li>\w match [a-zA-Z0-9]</li>
<li>\W match [^a-zA-Z0-9]</li>
</ul>
</li>
</ul>
</li>
<li>like *

<ul>
<li>match multiple character</li>
<li>means repeat the character in front of the * for 0-many times</li>
<li><code>
r = r'ab*'
rt = 'abbbbbb'
re.findall(r, rt)
//output['abbbbbb']
</code></li>
</ul>
</li>
<li>like +

<ul>
<li>match the charter that appear more than one time</li>
</ul>
</li>
<li>like ?

<ul>
<li> match the charter that appear zero or one time</li>
<li>can be used as minimum match

<ul>
<li><code>r = r'ab+?'</code></li>
<li><code>rt = 'abbbbbb'</code></li>
<li>output the ab</li>
</ul>
</li>
</ul>
</li>
<li>like the {}

<ul>
<li>means that the character can be repeat how many times</li>
<li><code>
r = r'a{1,3}'
rt = 'aaaaa'
then can match a, aa, aaa
</code></li>
<li>{0,} == *</li>
<li>{1,} == +</li>
<li>{0,1} == ?</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>functions</h3>

<ul>
<li>compile the expression to speed up

<ul>
<li><code>
r = r'\d{3,4}-?\d{8}'
p_telephone = re.compile(r)
p_telephone.findall('010-12345678')
//output ['010-12345678']
</code></li>
<li>and you can add attribute while compile</li>
</ul>
</li>
<li><p>there are some normal functions</p>

<ul>
<li>match

<ul>
<li>only search from the front</li>
<li><code>
p_telephone.match('o010-12345678')
//output nothing because the 010-12345678 is not start from the begin
</code></li>
</ul>
</li>
<li>search

<ul>
<li>search the whole string</li>
<li>no matter where the number is , if you can find it, you can find it.</li>
</ul>
</li>
<li>findall</li>
<li>finditer

<ul>
<li>the same as findall but you need to use iter so that you can get the value</li>
</ul>
</li>
</ul>
</li>
<li><p>and there are sub(), subn(), split()</p>

<ul>
<li>sub()

<ul>
<li><code>
r = r'c..t'
re.sub(r, 'aaa', 'caat cast cccc')
//output 'aaa aaa cccc'
</code></li>
</ul>
</li>
<li>subn()

<ul>
<li>the difference between sub and subj is that subj provide a count of the how many stuff you replace</li>
<li><code>
r = r'c..t'
re.subn(r, 'aaa', 'caat cast cccc')
//output 'aaa aaa cccc', 2
</code></li>
</ul>
</li>
<li>split()

<ul>
<li>split the string using a regular express</li>
<li><code>
re.split(r'[\+\*\-]', '1+2-3*5')
//output ['1', '2', '3', '5']
</code></li>
</ul>
</li>
<li>use <code>dir(re)</code> to see what functions re have</li>
</ul>
</li>
</ul>


<h3>flags in re module</h3>

<table>
<thead>
<tr>
<th>flags </th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>dotall, S</td>
<td> let . match all the character contains \n</td>
</tr>
<tr>
<td>ignore case, I </td>
<td>make the match no sensitive about the uppercase and lowercase</td>
</tr>
<tr>
<td>locale, L </td>
<td> do locale-aware match, match the French or the other language</td>
</tr>
<tr>
<td>multiline, M </td>
<td> match multiline, affect ^ and $</td>
</tr>
<tr>
<td>verbose, X </td>
<td> can use the REs verbose status, and make the organise more clearly</td>
</tr>
</tbody>
</table>


<h3>devision</h3>

<ul>
<li>()</li>
<li><code>email = r'\w{3}@\w+(\.com|\.cn)'</code></li>
<li>use the () to divide the .com and .cn</li>
<li>so that we can use the regular form to match email address</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mpi_parallel_programming_2]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-2/"/>
    <updated>2014-09-15T15:28:34-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-2</id>
    <content type="html"><![CDATA[<h3>data type</h3>

<ul>
<li><p>there are only these data type in the MPI</p>

<ul>
<li>if you want to use struct or multi array, you need to do something else</li>
</ul>
</li>
<li><table>
<thead>
<tr>
<th></th>
<th>MPI data type</th>
<th> c data type</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>MPI_CHAR</td>
<td>signed char|</td>
</tr>
<tr>
<td></td>
<td>MPI_SHORT</td>
<td>signed short int|</td>
</tr>
<tr>
<td></td>
<td>MPI_INT</td>
<td>signed int|</td>
</tr>
<tr>
<td></td>
<td>MPI_LONG</td>
<td>signed long int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED_CHAR</td>
<td>unsigned long int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED_SHORT</td>
<td>unsigned short int|</td>
</tr>
<tr>
<td></td>
<td>MPI_UNSIGNED</td>
<td>unsigned int|</td>
</tr>
<tr>
<td></td>
<td>MPI_FLOAT</td>
<td>float|</td>
</tr>
<tr>
<td></td>
<td>MPI_DOUBLE</td>
<td>double|</td>
</tr>
<tr>
<td></td>
<td>MPI_LONG_DOUBLE</td>
<td>long double|</td>
</tr>
<tr>
<td></td>
<td>MPI_BYTE</td>
<td>|</td>
</tr>
<tr>
<td></td>
<td>MPI_MPI_PACKED</td>
<td>|</td>
</tr>
</tbody>
</table>
</li>
</ul>


<!--more-->


<h3>about the status</h3>

<ul>
<li>the MPI_status combine a lots of information

<ul>
<li>there are at least three member in the status

<ul>
<li>MPI_SOURCE, MPI_TAG, MPI_ERROR</li>
</ul>
</li>
</ul>
</li>
<li>and we can get the size of the message using

<ul>
<li>MPI_Get_Count(MPI_Status <em>status, MPI_Datatype datatype, int</em> count_ptr);</li>
</ul>
</li>
</ul>


<h3>The broadcast idea</h3>

<ul>
<li>you can use the MPI_Bcast idea to send the message to all the other process;

<ul>
<li>MPI_Bcast(void *message, int count, MPI_Datatype datatype, int root, MPI_Comm comm)</li>
</ul>
</li>
</ul>


<h3>gather the data and scatter the data</h3>

<ul>
<li>use MPI_Gather

<ul>
<li>MPI_Gather(void <em>send_data, int send_count, MPI_Datatype send_type, void</em> recv_data, int recv_count, MPI_Datatype recv_type, int root, MPI_Comm comm)</li>
</ul>
</li>
<li>use MPI_Scatter to scatter the data

<ul>
<li>MPI_Scatter(void <em>send_data, int send_count, MPI_Datatype send_type, void </em>recv_data, int recv_count, MPI_Datatype recv_type, int root, MPI_Comm comm);</li>
<li>MPI_Scatter split the data referenced by send_data on the process with rank root into k segment.each of which consists of send_count elements of type send_type.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mpi_parallel_programming_1]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-1/"/>
    <updated>2014-09-15T14:19:13-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/15/mpi-parallel-programming-1</id>
    <content type="html"><![CDATA[<h3>difference between SIMD and MIMD</h3>

<ul>
<li>difference kinds of computer architecture is using the Flynn to classify

<ul>
<li>SISD</li>
<li>SIMD</li>
<li>MISD</li>
<li>MIMD</li>
</ul>
</li>
<li>we only talk about the SIMD and MIMD here

<ul>
<li>SIMD means that one command deal with many data streams

<ul>
<li>most of the single core machine is SIMD machine</li>
<li>and these kinds of machine is most used in the image processing and multimedia processing.</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<pre><code>- MIMD means that many commands deal with many data streams
    - the lastest multicore platform is a MIMD machine
    - the MIMD are asynchronous
    - 
</code></pre>

<h4>the multi core hardware architecture</h4>

<ul>
<li>the multicore CPU is combine many CPU into one chip. and each CPU core has a single processor.

<ul>
<li>each core has it&rsquo;s own cache. (some other may share one cache between multi CPU)</li>
</ul>
</li>
</ul>


<h3>message passing</h3>

<ul>
<li>There are two methods in the message passing

<ul>
<li>MPI_Send

<ul>
<li>void * buffer, int count, MPI_Datatype datatype, int destination, int tag, MPI_Comm communicator</li>
<li>e.g

<ul>
<li>MPI_Send(&amp;x, 1, MPI_FLOAT, 1, 0, MPI_COMM_WORLD);</li>
</ul>
</li>
</ul>
</li>
<li>MPI_Recv

<ul>
<li>void * buffer, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm communicator, MPI_Status status</li>
<li>MPI_Recv(&amp;x, 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD, &amp;status);</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>sample program</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "mpi.h"
</span><span class='line'>int main(int argc, char *argv[]){
</span><span class='line'>  int rank; //rank of the process
</span><span class='line'>  int source; //rank of the sender
</span><span class='line'>  int dest;   //rank of the receiver
</span><span class='line'>  int num;    //number of the processers
</span><span class='line'>  int tags;
</span><span class='line'>  char messages[1000];
</span><span class='line'>  MPI_Status status;
</span><span class='line'>
</span><span class='line'>  //setting up the MPI
</span><span class='line'>  MPI_init(&argc, &argv);
</span><span class='line'>
</span><span class='line'>  //find out the rank of the curret program
</span><span class='line'>  MPI_Comm_rank(MPI_COMM_WORLD, rank);
</span><span class='line'>
</span><span class='line'>  //find out the number of the processers
</span><span class='line'>  MPI_Common_Size(MPI_COMM_WORLD, &p);
</span><span class='line'>
</span><span class='line'>  if(rank != 0){ //if the current program is not the root program
</span><span class='line'>      sprintf(message, "hello from %d", rank);
</span><span class='line'>      dest = 0;
</span><span class='line'>      MPI_Send(message, strlen(message) + 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
</span><span class='line'>  }else{
</span><span class='line'>      sprintf(message, "hello from ");
</span><span class='line'>      MPI_Recv(message, 100, MPI_CHAR, source, tag, MPI_COMM_WORLD, &status);
</span><span class='line'>      printf("%s\n", message);
</span><span class='line'>  }
</span><span class='line'>  MPI_Finalize();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>how to run the program</h3>

<ul>
<li>for c++

<ul>
<li><code>mpic++ -o test test.cpp</code></li>
</ul>
</li>
<li>for c

<ul>
<li><code>mpicc -o test test.c</code></li>
</ul>
</li>
<li>run

<ul>
<li>for m core computer

<ul>
<li><code>mpirun -np m test</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solution to Access Denied for User 'Root'@'localhost' (Using password:YES)]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/09/solution-to-access-denied-for-user-root-at-localhost-using-password/"/>
    <updated>2014-09-09T11:49:30-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/09/solution-to-access-denied-for-user-root-at-localhost-using-password</id>
    <content type="html"><![CDATA[<h3>Access denied for user &lsquo;root&rsquo;@&lsquo;localhost&rsquo; (using password:YES)</h3>

<ul>
<li>in mac

<ul>
<li>open the my.conf in the directory /usr/local/mysql</li>
<li>add <code>skip-grant-tables</code></li>
<li>restart the mysql service

<ul>
<li><code>sudo /usr/local/mysql/bin/mysqld_safe &amp;</code></li>
</ul>
</li>
<li>then use <code>mysql -uroot -p</code>

<ul>
<li>you can login without password</li>
<li>then update the password after <code>use mysql;</code></li>
<li><code>update user set password=PASSWORD("rootadmin") where user='root';</code></li>
</ul>
</li>
<li>after that

<ul>
<li>delete the <code>skip-grant-tables</code> add in the my.conf file</li>
</ul>
</li>
<li>restart the mysql service</li>
<li>then you can use the <code>mysql -u root -q</code> to login with your new password</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Tutorial(1)]]></title>
    <link href="http://pbking1.github.com/blog/2014/09/08/php-tutorial-1/"/>
    <updated>2014-09-08T15:46:01-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/09/08/php-tutorial-1</id>
    <content type="html"><![CDATA[<h3>class 1</h3>

<ul>
<li>how the web site work when you request for the page

<ul>
<li>when you log into the internet, you request for the web server for a file that is the page.</li>
<li>if the web server is request for a html file, the server just give it back</li>
<li>else if it is the php file, the server send the php file to the php interpreter and process the php

<ul>
<li>and after the process, the interpreter give it back</li>
<li>(for php is an interpret kind of language and it do not need to be compile)</li>
<li>and then the server send the php file back to the web browser</li>
</ul>
</li>
<li>if the php is interacting with the database, then the code of the php will have sql query with the database.

<ul>
<li>after the query, send back to the php interpreter and then send back to the server and then send back to the web browser</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<p></p>

<ul>
<li>All in all, there are can be three layer in the environment

<ul>
<li>the front is the browser

<ul>
<li>html, css, coding logic</li>
</ul>
</li>
<li>the middle is the server

<ul>
<li>web server and php interpreter</li>
</ul>
</li>
<li>the database aspect is the third

<ul>
<li>mysql database engine</li>
<li>phpMyAdmin(DBMS)</li>
</ul>
</li>
</ul>
</li>
<li>the php interpretation run from the top of the file to the bottom of the top</li>
</ul>


<h3>class 2</h3>

<ul>
<li>&lsquo;&rsquo; these two symbol can be the end of the string</li>
<li>the HEREdoc mechnic is the

<ul>
<li>remember that the final HERE should have no space in front of it</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print &lt;&lt;&lt;HERE
</span><span class='line'>        &lt;p&gt;&lt;/p&gt;
</span><span class='line'>HERE;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>or you can use the filter_input method to validate the email easily.

<ul>
<li>such as without &ldquo;.&rdquo; &ldquo;space&rdquo; and so on.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FMDB and Tableview in IOS]]></title>
    <link href="http://pbking1.github.com/blog/2014/07/08/fmdb-and-tableview-in-ios/"/>
    <updated>2014-07-08T04:01:33-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/07/08/fmdb-and-tableview-in-ios</id>
    <content type="html"><![CDATA[<h3>What is FMDB?</h3>

<ul>
<li>FMDB is a framework that used to simplified the sqlite3 operation</li>
<li>and we can use this framework to operate the sqlite easily</li>
<li>and we need to download the fmdb package in github

<ul>
<li>then copy the fmdb folder to our project</li>
<li>include the sqlite3 framework in your project</li>
</ul>
</li>
<li>then you only need to write <code>import"FMDB.h"</code>

<ul>
<li>you will be able to use the api of fmdb</li>
</ul>
</li>
</ul>


<!--more-->


<h3>tableview is one of the most important thing in IOS</h3>

<ul>
<li>just like the listview in android</li>
<li>and the line in the tableview is called cell</li>
</ul>


<h3>source code</h3>

<ul>
<li>in the source code

<ul>
<li>we do not use storybroad or xib</li>
<li>we just draw the things on the view</li>
</ul>
</li>
<li>Viewcontroller.h</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController&lt;UITableViewDataSource, UITableViewDelegate&gt;{
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@property NSInteger tag;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Viewcontroller.m</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import "FMDB.h"
</span><span class='line'>#import "detailViewController.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>NSMutableArray *listofname;
</span><span class='line'>@synthesize tag;
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  listofname = [[NSMutableArray alloc]init];
</span><span class='line'>    UITableView *tableview = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, 320, 600)];
</span><span class='line'>    
</span><span class='line'>    //used to define the database 
</span><span class='line'>    NSString *docdir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
</span><span class='line'>    NSString *dbpath = [docdir stringByAppendingPathComponent:@"db1.sqlite"];
</span><span class='line'>    FMDatabase *db = [FMDatabase databaseWithPath:dbpath];
</span><span class='line'>    [db open];
</span><span class='line'>    //open the database
</span><span class='line'>    if(![db open]){
</span><span class='line'>        NSLog(@"could not open db");
</span><span class='line'>    }
</span><span class='line'>    //drop the table everytime because if you do not do this
</span><span class='line'>    //the insert sentense will happen every time
</span><span class='line'>    [db executeUpdate:@"drop table exercise"];
</span><span class='line'>    [db executeUpdate:@"drop table poetries"];
</span><span class='line'>    [db executeUpdate:@"create table exercise(_id integer, content text, answer text)"];
</span><span class='line'>    [db executeUpdate:@"create table poetries(_id integer, title text, author text, age text, size integer, line1 text, line2 text, line3 text, line4 text, explain text)"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(1,'赋得古原草送别','白居易','唐','5','离离原上草','一岁一枯荣','野火烧不尽','春风吹又生','译文：茂盛的野草长在古原上的野草多么茂盛，每年枯萎又每年新生。熊熊野火不能将它烧尽，春风吹过它又重获生命。')"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(2,'春夜喜雨','杜甫','唐','5','好雨知时节','当春乃发生','随风潜入夜','润物细无声','译文：春雨知道适应季节，当万物萌发生长时，它伴随着春风，在夜晚偷偷地及时降临，滋润万物又细微无声。') "];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(3,'悯农','李绅','唐','5','锄禾日当午','汗滴禾下土','谁知盘中餐','粒粒皆辛苦','译文：这首悯农诗，写出了农民劳动的艰辛和对浪费粮食的愤慨。在盛夏的正午，农民顶着火辣辣的太阳锄地，汗水淼淌滴在庄稼地里。可是谁又知道，碗中的每一粒饭都包含着农民的辛苦啊!' )"];
</span><span class='line'>    [db executeUpdate:@"insert into poetries(_id,title,author,age,size,line1,line2,line3,line4,explain) values(4,'静夜思','李白','唐','5','床前明月光','疑是地上霜','举头望明月','低头思故乡','译文：那透过窗户映照在床前的月光，起初以为是一层层的白霜。仰首看那空中的一轮明月，不由得低下头来沉思，愈加想念自己的故乡。')"];
</span><span class='line'>
</span><span class='line'>    //query the database
</span><span class='line'>    FMResultSet *rs = [db executeQuery:@"select * from poetries"];
</span><span class='line'>    while ([rs next]) {
</span><span class='line'>      //add the title column in to the source of the table view
</span><span class='line'>        [listofname addObject:[rs stringForColumn:@"title"]];
</span><span class='line'>    }
</span><span class='line'>    [db close];
</span><span class='line'>    
</span><span class='line'>    [tableview setDelegate:self];   //add the source and delegate
</span><span class='line'>    [tableview setDataSource:self];
</span><span class='line'>    [self.view addSubview:tableview];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define the action in the cell 
</span><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    static NSString *cellidentifier = @"name";  
</span><span class='line'>    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellidentifier];
</span><span class='line'>    
</span><span class='line'>    if(cell == nil){
</span><span class='line'>        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellidentifier];
</span><span class='line'>    }
</span><span class='line'>    NSString *cellvalue = [listofname objectAtIndex:indexPath.row];
</span><span class='line'>    cell.textLabel.text = cellvalue;
</span><span class='line'>    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
</span><span class='line'>    
</span><span class='line'>    cell.userInteractionEnabled = YES;
</span><span class='line'>    
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
</span><span class='line'>{
</span><span class='line'>    return [listofname count];    //define the number of the row in tableview
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSInteger)tableView:(UITableView *)tableView indentationLevelForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    return 0;   //define the indent
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define the event when click the cell(very important)
</span><span class='line'>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    int mark = indexPath.row;  //pass the row number to the next controller using tag
</span><span class='line'>    detailViewController *dv = [[detailViewController alloc] init];
</span><span class='line'>    dv.tag = mark;
</span><span class='line'>    [self presentModalViewController:dv animated:YES];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>    [listofname dealloc];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidUnload
</span><span class='line'>{
</span><span class='line'>    [super viewDidUnload];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>detailViewController.h</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface detailViewController : UIViewController
</span><span class='line'>
</span><span class='line'>@property NSInteger tag;
</span><span class='line'>@property UILabel *label;
</span><span class='line'>@property UILabel *line1label;
</span><span class='line'>@property UILabel *line2label;
</span><span class='line'>@property UILabel *line3label;
</span><span class='line'>@property UILabel *line4label;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>detailViewController.m</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "detailViewController.h"
</span><span class='line'>#import "FMDB.h"
</span><span class='line'>@interface detailViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation detailViewController
</span><span class='line'>
</span><span class='line'>@synthesize tag;
</span><span class='line'>@synthesize label;
</span><span class='line'>@synthesize line1label;
</span><span class='line'>@synthesize line2label;
</span><span class='line'>@synthesize line3label;
</span><span class='line'>@synthesize line4label;
</span><span class='line'>NSMutableArray *listofname;
</span><span class='line'>
</span><span class='line'>- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
</span><span class='line'>{
</span><span class='line'>    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
</span><span class='line'>    if (self) {
</span><span class='line'>        // Custom initialization
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    self.view.backgroundColor = [UIColor whiteColor];
</span><span class='line'>    NSString *tmep = [NSString stringWithFormat:@"%d", self.tag + 1]; 
</span><span class='line'>    //convert the integer tag into string
</span><span class='line'>
</span><span class='line'>    NSString *docdir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
</span><span class='line'>    NSString *dbpath = [docdir stringByAppendingPathComponent:@"db1.sqlite"];
</span><span class='line'>    FMDatabase *db = [FMDatabase databaseWithPath:dbpath];
</span><span class='line'>    [db open];
</span><span class='line'>    if(![db open]){
</span><span class='line'>        NSLog(@"could not open db");
</span><span class='line'>    }
</span><span class='line'>    //use the tag passed by the previous controller and query the database
</span><span class='line'>    FMResultSet *rs = [db executeQuery:@"select * from poetries where _id = ?", tmep];
</span><span class='line'>    
</span><span class='line'>    line1label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 300, 20)];
</span><span class='line'>    line2label = [[UILabel alloc] initWithFrame:CGRectMake(10, 50, 300, 20)];
</span><span class='line'>    line3label = [[UILabel alloc] initWithFrame:CGRectMake(10, 80, 300, 20)];
</span><span class='line'>    line4label = [[UILabel alloc] initWithFrame:CGRectMake(10, 100, 300, 20)];
</span><span class='line'>    while ([rs next]) {
</span><span class='line'>        line1label.text = [rs stringForColumn:@"line1"];
</span><span class='line'>        line2label.text = [rs stringForColumn:@"line2"];
</span><span class='line'>        line3label.text = [rs stringForColumn:@"line3"];
</span><span class='line'>        line4label.text = [rs stringForColumn:@"line4"];
</span><span class='line'>    }
</span><span class='line'>    [self.view addSubview:line1label];
</span><span class='line'>    [self.view addSubview:line2label];
</span><span class='line'>    [self.view addSubview:line3label];
</span><span class='line'>    [self.view addSubview:line4label];
</span><span class='line'>    [db close];
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Opendns to Cross the Great Firewall in China]]></title>
    <link href="http://pbking1.github.com/blog/2014/07/08/use-opendns-to-cross-the-great-firewall-in-china/"/>
    <updated>2014-07-08T03:22:39-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/07/08/use-opendns-to-cross-the-great-firewall-in-china</id>
    <content type="html"><![CDATA[<h3>once upon a time</h3>

<ul>
<li>we can log in facebook and google directly</li>
<li>but nowadays we can not</li>
<li>and because DNS hijacking and DNS cache posioning, we can not log in directly anymore</li>
</ul>


<!--more-->


<h3>what is DNS hikacking?</h3>

<ul>
<li>DNS hijacking(劫持)</li>
<li>to simplifiy the idea

<ul>
<li>when you type in google.com, you will not attach the google.com

<ul>
<li>you will be direct to the baidu.com</li>
</ul>
</li>
<li>and this is the DNS hijacking</li>
</ul>
</li>
<li><strong>and the reason why this will happen is that the DNS server is cracked and the domain name will be parse to the wrong ip.</strong></li>
<li>and recently the govenment is using this kind of strategy</li>
</ul>


<h3>what is DNS cache posioning?</h3>

<ul>
<li>DNS污染</li>
<li>this idea used to be used to block the youtube, facebook website</li>
<li>this is on the protocol layer</li>
<li>and the mechisim is that when you want to launch the particular website

<ul>
<li>the port 53 UDP is check and when they found that you want to attach particular website, they will change the domain name parse DNS server into a wrong one and then you will not be able to get the correct ip.</li>
<li>then you will not be able to get to the website.</li>
</ul>
</li>
</ul>


<h3>How dns works?</h3>

<ul>
<li>first, when we use some domain name like &ldquo;www.facebook.com&rdquo;

<ul>
<li>and when we type the domain name into the website

<ul>
<li>the website will send the name to the dns server to check the ip</li>
<li>then return the ip the our computer</li>
<li>then we will know the ip of the target website

<ul>
<li>and we will be able to get to the website</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>why can we use this in China?</h3>

<ul>
<li>Because in China when you type &ldquo;www.google.com&rdquo;</li>
<li>they block the dns parse not the connection

<ul>
<li>so we will be able to break through the wall if we use the other dns server to help use parse the domain name</li>
</ul>
</li>
</ul>


<h3>how to use opendns</h3>

<ul>
<li>change the dns settings in the PC or laptop

<ul>
<li>if you want to use the google dns

<ul>
<li>set &ldquo;8.8.8.8&rdquo; and &ldquo;8.8.4.4&rdquo;</li>
</ul>
</li>
<li>if you want to use the opendns

<ul>
<li>set &ldquo;208.67.222.222&rdquo; and &ldquo;208.67.220.220&rdquo;</li>
<li>or set &ldquo;42.120.21.30&rdquo; and &ldquo;221.10.251.52&rdquo;</li>
</ul>
</li>
</ul>
</li>
<li>then if you are using Max 10.8 or above

<ul>
<li>you can renew the dns setting using

<ul>
<li>&ldquo;sudo killall -HUP mDNSResponder&rdquo;</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>when not to use opendns</h3>

<ul>
<li>when you are using the payment or something private

<ul>
<li>do not use opendns</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS 报表类库（trial 30days）]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/25/ios-bao-biao-lei-ku-%28trial-30days%29/"/>
    <updated>2014-06-25T04:25:40-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/25/ios-bao-biao-lei-ku-(trial-30days)</id>
    <content type="html"><![CDATA[<h3>一个非常容易使用的报表类库</h3>

<ul>
<li>NChart3D

<ul>
<li>但是只能免费使用30天</li>
<li>并且经过真机调试

<ul>
<li>效果做得很好，除了不能点击某个地方显示具体信息之外其他都做得很好</li>
<li>比如可以方法缩小，左右拖，平移旋转都行</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>在AppDelegate.m里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "AppDelegate.h"
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@implementation AppDelegate
</span><span class='line'>{
</span><span class='line'>    UIWindow *m_window;
</span><span class='line'>}
</span><span class='line'>@synthesize window = m_window;
</span><span class='line'>
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
</span><span class='line'>{
</span><span class='line'>    m_window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
</span><span class='line'>    m_window.userInteractionEnabled = YES;
</span><span class='line'>    m_window.multipleTouchEnabled = YES;
</span><span class='line'>    [m_window makeKeyAndVisible];
</span><span class='line'>    m_window.rootViewController = [[ViewController new] autorelease];
</span><span class='line'>    // Override point for customization after application launch.
</span><span class='line'>    return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Viewcontroller.h里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController&lt;NChartSeriesDataSource&gt;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Viewcontroller.m里面添加如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import "NChart3D/NChart3D.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>{
</span><span class='line'>    NChartView *m_view;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>    [m_view release];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view, typically from a nib.
</span><span class='line'>    m_view = [[NChartView alloc] initWithFrame:CGRectZero];
</span><span class='line'>    m_view.chart.licenseKey = @"";
</span><span class='line'>    m_view.chart.cartesianSystem.margin = NChartMarginMake(10.0f, 10.0f, 10.0f, 20.0f);
</span><span class='line'>    m_view.chart.shouldAntialias = YES;
</span><span class='line'>    NChartColumnSeries *serires = [[NChartColumnSeries new] autorelease];
</span><span class='line'>    serires.brush = [NChartSolidColorBrush solidColorBrushWithColor:[UIColor colorWithRed:0.0 green:0.7 blue:0.4 alpha:1.0]];
</span><span class='line'>    serires.dataSource = self;
</span><span class='line'>    [m_view.chart addSeries:serires];
</span><span class='line'>    [m_view.chart updateData];
</span><span class='line'>    self.view = m_view;   //使用新建的view
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSArray *)seriesDataSourcePointsForSeries:(NChartSeries *)series
</span><span class='line'>{
</span><span class='line'>    NSMutableArray *result = [NSMutableArray array];
</span><span class='line'>    for(int i = 0; i &lt; 10; i++)
</span><span class='line'>        [result addObject:[NChartPoint pointWithState:[NChartPointState pointStateAlignedToXWithX:i Y:(rand()%30) + 1]forSeries:series]];
</span><span class='line'>    return result;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSString *)seriesDataSourceNameForSeries:(NChartSeries *)series
</span><span class='line'>{
</span><span class='line'>    return @"My series";
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>效果

<ul>
<li><img src="http://pbking1.github.com/images/ios/ios_table1.png"></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS UILabel and UITextfield]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/25/ios-uilabel-and-uitextfield/"/>
    <updated>2014-06-25T03:00:33-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/25/ios-uilabel-and-uitextfield</id>
    <content type="html"><![CDATA[<h3>label</h3>

<ul>
<li>相当于android里面的textview</li>
<li>用setText来设置内容</li>
<li>setBackground来设置背景颜色</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label1 = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 290, 44)];
</span><span class='line'>[label1 setText:@"项目里程碑                          请选择&gt;"];
</span><span class='line'>[label1 setBackgroundColor:[UIColor whiteColor]];
</span><span class='line'>[self.view addSubview:label1];
</span></code></pre></td></tr></table></div></figure>


<h3>textfield</h3>

<ul>
<li>相当于android里面的edittext</li>
<li>用layer.cornerRadius设置圆角</li>
<li>placeholder设置hint，提示</li>
<li>貌似使用这些方法需要把UITextfield定义在.h里面</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UITextField *text1 = [[UITextField alloc] initWithFrame:CGRectMake(10, 340, 290, 84)];
</span><span class='line'>self.text1.placeholder = @"进度说明";
</span><span class='line'>self.text1.layer.cornerRadius = 10;
</span><span class='line'>[text1 setBackgroundColor:[UIColor whiteColor]];
</span><span class='line'>[self.view addSubview:text1];</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Selector(jump to the Other Page)]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-selector-jump-to-the-other-page/"/>
    <updated>2014-06-24T23:02:32-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-selector-jump-to-the-other-page</id>
    <content type="html"><![CDATA[<h3>响应事件或者跳转</h3>

<ul>
<li>使用每个控件里面的action的selector</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIBarButtonItem *leftbutton = [[UIBarButtonItem alloc] initWithTitle:@"cancel" style:UIBarButtonSystemItemDone target:self action:@selector(goBack)];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>实现selector的跳转

<ul>
<li>定义要跳转到的页面的viewcontroller</li>
<li>用presentModalViewController跳转</li>
<li>用完记得释放资源</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)goBack{
</span><span class='line'>    basicinfo *p1 = [[basicinfo alloc] init];
</span><span class='line'>    [self presentModalViewController:p1 animated:YES];
</span><span class='line'>    [p1 release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS UIButton]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-uibutton/"/>
    <updated>2014-06-24T23:01:58-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-uibutton</id>
    <content type="html"><![CDATA[<h3>IOS的button其实和其他的控件使用方法差不多</h3>

<ul>
<li>首先初始化button，用CGRectMake把控件画在view上</li>
<li>使用setTitle设置button的文字</li>
<li>使用layer来设置边界</li>
<li>用action里面设置selector来跳转或者响应事件</li>
</ul>


<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIButton *button1 = [[UIButton alloc] initWithFrame:CGRectMake(0, 420, 160, 44)];
</span><span class='line'>[button1 setTitle:@"进度填报" forState:UIControlStateNormal];
</span><span class='line'>//button1.backgroundColor = [UIColor colorWithRed:(12/255) green:(22/255) blue:(32/355) alpha:1.0];
</span><span class='line'>[button1.layer setBorderWidth:1.0];
</span><span class='line'>[button1 setTitleColor:[UIColor lightGrayColor] forState:UIControlStateNormal];
</span><span class='line'>[button1 addTarget:self action:@selector(gotorenewpage:) forControlEvents:UIControlEventTouchUpInside];
</span><span class='line'>[self.view addSubview:button1];</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)gotorenewpage:(UIButton *)paramSender{
</span><span class='line'>    viewcontroller *p = [[viewcontroller alloc] init];
</span><span class='line'>    [self presentModalViewController:p animated:YES];
</span><span class='line'>    [p release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Segment Control]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-segment-control/"/>
    <updated>2014-06-24T23:01:49-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-segment-control</id>
    <content type="html"><![CDATA[<h3>segment control</h3>

<ul>
<li>这一段是使用CGrectmake在view上直接按照坐标大小画segment control</li>
<li>因为tabbar只能按照默认的放在底部</li>
<li>因此要使用放在顶部的类似tabbar的效果有两种方式

<ul>
<li>一种就是segment control，每点击一个item就跳转到那个item对应的view那里</li>
<li>还有一种是使用button来仿造tabbar</li>
<li>不过总体来说还是button效果好一点</li>
</ul>
</li>
</ul>


<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>    //segment control
</span><span class='line'>    NSArray *items = [NSArray arrayWithObjects:@"关注项目", @"全部项目", nil];
</span><span class='line'>    UISegmentedControl *segmentedControl = [[UISegmentedControl alloc] initWithItems:items];
</span><span class='line'>    [segmentedControl setFrame:CGRectMake(15, 50, 300, 50)];  //画segment control
</span><span class='line'>    [segmentedControl addTarget:self action:@selector(segmentedControlChangedValue:) forControlEvents:UIControlEventValueChanged];  //响应事件
</span><span class='line'>    [segmentedControl setTag:1];
</span><span class='line'>    [self.view addSubview:segmentedControl];
</span><span class='line'>    [segmentedControl release];
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>接下来通过使用不同的segmentControl里面的index来判断点了哪个，然后进行跳转</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)segmentedControlChangedValue:(UISegmentedControl *)segmentedControl {
</span><span class='line'>    NSInteger selectedindex = [segmentedControl selectedSegmentIndex];
</span><span class='line'>    if(selectedindex == 0){
</span><span class='line'>        partViewController *p = [[partViewController alloc] init];
</span><span class='line'>        [self presentModalViewController:p animated:YES];
</span><span class='line'>        //[self dismissModalViewControllerAnimated:YES];
</span><span class='line'>        [p release];
</span><span class='line'>    }else if(selectedindex == 1){
</span><span class='line'>        allproViewController *a = [[allproViewController alloc] init];
</span><span class='line'>        [self presentModalViewController:a animated:YES];
</span><span class='line'>        //[self dismissModalViewControllerAnimated:YES];
</span><span class='line'>        [a release];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something Basic About Software Testing]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/20/something-basic-about-software-testing/"/>
    <updated>2014-06-20T08:24:14-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/20/something-basic-about-software-testing</id>
    <content type="html"><![CDATA[<h3>一些常识性的问题</h3>

<ul>
<li>软件测试者的目标是什么？

<ul>
<li>找bug，并且尽快的找到和修复</li>
</ul>
</li>
<li>在一个已经完成的产品上修复一个bug比在一开始就找到要难更多倍</li>
<li>为什么完全测试一个软件是不可能的？

<ul>
<li>因为太多输入输出</li>
<li>太多路径组合</li>
</ul>
</li>
<li>测试人员最重要的技能是编程</li>
</ul>


<!--more-->


<h3>Failure, Fault and Error</h3>

<ul>
<li>Failure

<ul>
<li>一个系统的状态出现不正确的行为</li>
</ul>
</li>
<li>Fault

<ul>
<li>也叫“bug”和“defect”</li>
<li>导致failure的原因</li>
</ul>
</li>
<li>Error

<ul>
<li>由于人类的错误导致的fault</li>
</ul>
</li>
<li>test oracle

<ul>
<li>一个用来判断测试是否通过的机制</li>
</ul>
</li>
</ul>


<h3>bug</h3>

<ul>
<li>编程错误比bug要多得多</li>
<li>不是所有的软件在发布之前都会被修复</li>
</ul>


<h3>Software Quarlity</h3>

<ul>
<li>要写出没有bug的程序是不可能的</li>
<li>有三个要素能够导致程序中的bug

<ul>
<li>程序的复杂性</li>
<li>程序的需求可变性</li>
<li>程序的需求不变性</li>
</ul>
</li>
</ul>


<h3>QA和QC</h3>

<ul>
<li>QA面向过程，QC面向产品</li>
<li>QA是制定方案确保系统能够达到目标</li>
<li>QC是指定方案来评估一个系统

<ul>
<li>validation

<ul>
<li>我们建立的系统是否是正确的</li>
</ul>
</li>
<li>verification

<ul>
<li>我们是否使用正确的方法的研发了系统</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>test stub 和 test driven(单元测试)</h3>

<ul>
<li>test stub

<ul>
<li>自顶向下， stub out</li>
</ul>
</li>
<li>test driver

<ul>
<li>自下而上</li>
</ul>
</li>
</ul>


<h3>PMOD</h3>

<ul>
<li>探索性测试方法</li>
<li>黑盒测试

<ul>
<li>忽略内部实现的测试</li>
</ul>
</li>
<li>白盒测试

<ul>
<li>基于分析代码逻辑的测试</li>
</ul>
</li>
<li>基于模型的测试</li>
</ul>


<h3>test oracle</h3>

<ul>
<li>用来检测待测系统在一个特定执行中的行为是否正确的方法</li>
</ul>


<h3>白盒测试</h3>

<ul>
<li>重点

<ul>
<li>动态白盒测试和调试的相似性</li>
<li>单元测试，集成测试，系统测试的等级划分和概念</li>
<li>测试驱动的概念（test driver）</li>
<li>测试的柱和桩的概念和区别</li>
</ul>
</li>
<li>考点

<ul>
<li>动态白盒测试

<ul>
<li>控制流：代码行，分支，条件，基本路径覆盖。循环至少走0次和1次。</li>
<li>数据流： 定义使用对，DCU，DPU，选择合适的测试用例进行覆盖

<ul>
<li>x的du-path

<ul>
<li>起点一定要是def(x)</li>
<li>终点一定要是p-use(x)或者c-use(x)</li>
</ul>
</li>
<li>def

<ul>
<li>用来定义变量

<ul>
<li>x = 0; def(x)</li>
<li><em>y = 1; def(</em>y)</li>
<li>scanf(&ldquo;%d %d&rdquo;. &amp;x, &amp;y); def(x), def(y)</li>
<li>int x[10]; def(x). def(x[0]), def(x[9])</li>
</ul>
</li>
</ul>
</li>
<li>undef

<ul>
<li>不可使用的变量

<ul>
<li>free(p); undef(*p)</li>
</ul>
</li>
</ul>
</li>
<li>定义使用对</li>
<li>Cuse, puse, 选择测试用例覆盖

<ul>
<li>c-use(x): x直接影响计算或者就是输出的一部分

<ul>
<li>y = x + 1;</li>
<li>printf(&ldquo;%d&rdquo;, x);</li>
</ul>
</li>
<li>p-use(x): x间接影响或者会影响一个控制流

<ul>
<li>if(x == 0) y = 1;</li>
<li>switch(x) case 1: &hellip; default:&hellip;</li>
<li>if(A[i + 1] > 0) return ;   p-use(A), p-use(i), p-use(A[i+1])</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>循环覆盖测试：循环要循环执行0次1次多次。  多次，如果没规定，尽量大。

<ul>
<li>如果有循环，用例必须包含0次和1次和多次，多次如果没有说明，随便选个数，如10）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>控制流</p>

<ul>
<li>基本快</li>
<li>分支</li>
<li>循环</li>
<li>基本路径</li>
<li>控制流图

<ul>
<li>用处是使得我们准备覆盖的路径是足够的</li>
<li>有三种

<ul>
<li>条件if （菱形）</li>
<li>合并merge（圆形）</li>
<li>执行computation（长方形）</li>
</ul>
</li>
</ul>
</li>
<li>覆盖

<ul>
<li>基本块覆盖

<ul>
<li>基本块：单入口，单出口，顺序执行</li>
<li>其实就是每一行代码（除了括号和do），然后如果有while和do，则do为一个汇集点指向下一句语句</li>
</ul>
</li>
<li>循环覆盖

<ul>
<li>有两个基本要点

<ul>
<li>一个是循环体</li>
<li>一个是控制条件(if)</li>
</ul>
</li>
<li>其实就是改变循环次数来达到覆盖循环的目的</li>
<li>一般是0，1，多次</li>
</ul>
</li>
<li>基本路径覆盖

<ul>
<li>基本路径集

<ul>
<li>可以用来组成其他路径的最小集合</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>数据流</p>

<ul>
<li>只关心数据的变化而不关心是否有判断条件或者循环</li>
</ul>
</li>
<li>逻辑</li>
<li>交互</li>
<li>突变</li>
</ul>


<h3>黑盒测试</h3>

<ul>
<li>三种级别

<ul>
<li>等级一

<ul>
<li>一个输入 &ndash;> 一个输出</li>
<li>等价类划分（划分输入区域成为等价类）

<ul>
<li>e.g 例如学号为07000-07100

<ul>
<li>求学号的等价类

<ul>
<li>首先是5位数

<ul>
<li>‘07050’</li>
</ul>
</li>
<li>小于07000的五位数

<ul>
<li>‘00000’</li>
</ul>
</li>
<li>大于07100的五位数

<ul>
<li>‘99999’</li>
</ul>
</li>
<li>小于五位数非空的数字

<ul>
<li>‘1’</li>
</ul>
</li>
<li>大于五位数非空的数字

<ul>
<li>‘99999999’</li>
</ul>
</li>
<li>有非数字的

<ul>
<li>‘aa1’</li>
<li>有三种（大于，小于和等于5位数的）</li>
</ul>
</li>
<li>空串

<ul>
<li>“ ”</li>
</ul>
</li>
<li>空

<ul>
<li>&ldquo;&rdquo;</li>
</ul>
</li>
<li>超长的

<ul>
<li>“999999999999999999999999999999999999”</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>边界值分析（对每个等价类进行边界值分析）

<ul>
<li>其实就是找边界值</li>
<li>e.g

<ul>
<li>有几个类</li>
<li>c1:(0,2)  c2:[2,5) c3:[5, 10000)</li>
<li>则c1的边界为0.001，1.999， 2</li>
<li>c2为2.001， 5</li>
<li>c3为5.001</li>
</ul>
</li>
<li>规律为(x,x), [x,x]

<ul>
<li>左边圆括号：x + 0.001</li>
<li>右边圆括号：x &ndash; 0.001(不是很清楚) 和 x</li>
<li>左边方括号：x + 0.001</li>
</ul>
</li>
</ul>
</li>
<li>因果图和决策表（通过把输入输出以边的形式来分析关联）

<ul>
<li>把起因和结果关联起来的图</li>
</ul>
</li>
</ul>
</li>
<li>等级二

<ul>
<li>多个输入 &ndash;> 一个输出</li>
<li>组合覆盖

<ul>
<li>覆盖每个t路交互至少一次</li>
</ul>
</li>
<li>带约束的组合覆盖

<ul>
<li>覆盖符合约束的所有参数组合</li>
<li>删除不可能的参数组合</li>
<li>删除冗余组合</li>
</ul>
</li>
</ul>
</li>
<li>等级三

<ul>
<li>多步多个输入 &ndash;> 一个输出</li>
<li>基于事件的覆盖

<ul>
<li>e.g 例如GUI程序 == 一系列事件</li>
</ul>
</li>
<li>基于状态的覆盖

<ul>
<li>e.g 例如GUI程序 == 一系列状态特征</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>自动测试工具</h3>

<ul>
<li>回归测试</li>
<li>接受测试</li>
<li>beta测试</li>
<li>alpha测试</li>
</ul>


<h3>测试文档</h3>

<ul>
<li>测试计划与测试方案的区别？

<ul>
<li>测试计划

<ul>
<li>组织管理层面</li>
<li> 对测试全过程的组织、资源、原则等进行规定和约束，并制定测试全过程各个阶段的任务及时间进度安排，提出对各项任务的评估、风险分析和需求管理。</li>
<li>也就是行动纲要</li>
</ul>
</li>
<li>测试方案

<ul>
<li>技术层面</li>
<li>描述需要测试的特性、测试的方法、测试环境的规划、测试工具的设计和选择、测试用例的设计方法、测试代码的设计方案。</li>
<li>也就是具体措施</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML Final Exam Note]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/11/the-note-of-the-uml-final-exam/"/>
    <updated>2014-06-11T02:45:34-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/11/the-note-of-the-uml-final-exam</id>
    <content type="html"><![CDATA[<h3>UML final exam note</h3>

<ul>
<li>3个小时</li>
</ul>


<h4>选择题</h4>

<ul>
<li>10个选择，一题2分</li>
<li>去看下up（书上第二章）。</li>
</ul>


<!--more-->


<h4>画图题</h4>

<ul>
<li>考试的时候把图导出来，贴到word里面</li>
<li>除了组件图</li>
<li>剩下的每个图18分钟</li>
<li><p>1.用例图</p>

<ul>
<li>给一个中文文档</li>
<li>用例是什么？

<ul>
<li>text，interaction（system和Actor）</li>
<li>fill goal(一切围绕)</li>
<li>用一个人，然后一个系统的服务来满足一个goal</li>
<li>有可能服务和goal名字一样</li>
<li>像数据库叫后台参与者</li>
<li>像银行那些叫支持性参与者</li>
<li>文档从头到尾只有一个人

<ul>
<li>有的时候可能有一个actress</li>
</ul>
</li>
<li>goal一定是动词或者动名词，来表达实现goal。

<ul>
<li>通常在开始或者结束</li>
</ul>
</li>
<li><p>看段落就好了，不用研究细节</p></li>
<li><p>0分</p>

<ul>
<li>用例图里面出现主菜单，什么什么界面，什么什么功能（功能倾向）</li>
<li>有操作流程倾向（不要画得有顺序）</li>
<li>只要出现就完蛋</li>
<li>没框（boundry）扣一分

<ul>
<li>画了框没写名字扣一分</li>
<li>定范围</li>
</ul>
</li>
<li>Actor主要参与者一定画在图的左边

<ul>
<li>画了管理员扣一分</li>
</ul>
</li>
<li>goal写在框里面也就是椭圆里面的东西

<ul>
<li>一定要有extend或者include</li>
<li>一定要是虚线，实线就会被扣分</li>
<li>箭头方向一定要是正确的，extend指向goal，include相反</li>
<li>主要的节点有两个至三个include或者extend</li>
<li>名字要是动词，不能是名词Actor和用例相连的图，一定要用没有箭头的实线相连</li>
<li>外部子系统一定要画出来</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2.活动图</p>

<ul>
<li>考一个用例的活动图</li>
<li>一定有一个用例在里面</li>
<li>表示控制权的转移</li>
<li>准则

<ul>
<li>老板准则

<ul>
<li>如果画了登陆（扣1分）</li>
</ul>
</li>
<li>基本应用过程准则

<ul>
<li>东西不能太大</li>
<li>把东西说详细</li>
</ul>
</li>
<li>size

<ul>
<li>规模不能太大</li>
<li>单操作的东西不要画</li>
</ul>
</li>
</ul>
</li>
<li>每个用例一定都能找到一个UI</li>
<li>不能include，不然就违背了size准则</li>
<li>简化的写就好了</li>
<li>还有一种多泳道的图

<ul>
<li>考试不考</li>
</ul>
</li>
</ul>
</li>
<li>3.状态图

<ul>
<li>其实把状态计画好了就行了</li>
<li>定义状态

<ul>
<li>把步骤写出来就好了</li>
<li>基本上不用太在意细节</li>
</ul>
</li>
<li>状态图是时间的生命周期</li>
<li>条件的变迁采用guard</li>
<li>考试

<ul>
<li>一定要找到guard</li>
<li>怎么起名？

<ul>
<li>不能说“按continue”，而要说“选房间”</li>
<li>要说用户做的外部事件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>4.领域模型（概念类图）</p>

<ul>
<li>识别一个用例里面的名词</li>
<li>太多动词或者太多线，就0分</li>
<li>一定要找概念（抽象出类）</li>
<li>通常Actor不要画在属性里面</li>
<li>扣分点

<ul>
<li>如果写了button，则扣分</li>
<li>如果出现database，扣分</li>
<li>在一个领域模型里面，这两个东西首要不要出现</li>
<li>命名必须是名词，不能使动词，用了就完蛋</li>
<li>属性给一些重要的就可以了，不要画一个图全部都没有属性的</li>
<li>不要在属性里面写操作！</li>
<li>关联

<ul>
<li>如果关联出现箭头而不是直线</li>
<li>则扣分</li>
<li>箭头一般都是include，所以不要画箭头</li>
<li>关联上一定要有名字（包含contain）</li>
<li>记得写多重性</li>
</ul>
</li>
</ul>
</li>
<li>在一段文档中经常出现的名词，一定要挑出来</li>
<li>抽象出的类不能出现复数或者抽象数据类型</li>
<li>描述类就赶紧加上</li>
<li>写在框里面的名词不能无中生有</li>
</ul>
</li>
<li><p>5.顺序图</p>

<ul>
<li>要用（BCE规则）画</li>
<li>用来表达一个场景的人机交互的事件的序列</li>
<li>一般是表达主场景和频繁出现的</li>
<li>考试考主场景

<ul>
<li>用户达成目标的最便捷的方式</li>
<li>或者最期望的方式</li>
<li>主场景没有if条件</li>
<li>既然是系统顺序图，第一个对象一定是system，不然就0分</li>
<li>要加“：”

<ul>
<li>表示对象</li>
</ul>
</li>
<li>在User后面的那个就是”:System”</li>
</ul>
</li>
</ul>
</li>
<li><p>6.包图</p>

<ul>
<li>比较容易，也比较简洁</li>
<li>使用MVC，来构建城市模型（考题）</li>
<li>然后把需要的类和控制器填到三个package里面</li>
<li>把界面放在视图层</li>
</ul>
</li>
<li><p>7.交互图</p>

<ul>
<li>注意起名字</li>
<li>和顺序图内容差不多</li>
<li>和包图里面的MVC的三个包内容一致

<ul>
<li>比如view就要再包图的view包里面</li>
</ul>
</li>
<li>去官网看一下老师发给教程

<ul>
<li>讲的比较详细</li>
</ul>
</li>
</ul>
</li>
<li><p>8.设计类图</p>

<ul>
<li>把控制器和实体类画进去</li>
<li>除了控制器之外，其他的东西和领域模型里面是一样的</li>
<li>属性的关联一定要实现</li>
</ul>
</li>
<li><p>9.部署图（附加题）</p>

<ul>
<li>差不多的</li>
<li>部署条件是告诉你的</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TOFEL Experience(have Not Passed 100 Yet)]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/09/tofel-experience-have-not-passed-100-yes/"/>
    <updated>2014-06-09T02:45:34-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/09/tofel-experience-have-not-passed-100-yes</id>
    <content type="html"><![CDATA[<ul>
<li>just for myself~~</li>
</ul>


<h3>reading</h3>

<ul>
<li>just reading the computer text book</li>
<li>do some more reading on <the economic> and <new york time></li>
</ul>


<!--more-->


<h3>listening</h3>

<ul>
<li>listen to the TPO carefully and do many times</li>
<li>watch the US or UK movie without seeing what they are saying</li>
</ul>


<h3>writing</h3>

<ul>
<li>write in simple way</li>
<li>do not use too many words that you do not know very well</li>
</ul>


<h3>speaking</h3>

<ul>
<li>speak louder and clearer</li>
<li>do more practice like speaking loudly after lunch or recite the good paper</li>
</ul>


<h4>some tips for taking tofel test in China</h4>

<ul>
<li>ID card is the only thing that are needed for the test</li>
<li>try order the test two month before the data you want</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Sqlite in Html5]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/08/use-sqlite-in-html5/"/>
    <updated>2014-06-08T22:50:05-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/08/use-sqlite-in-html5</id>
    <content type="html"><![CDATA[<ul>
<li>There are three ways to store data using html5

<ul>
<li>using database (sqlite)</li>
<li>using localStorage

<ul>
<li>will only store on client, will not send to server</li>
<li>this data can be read even using different block on the same browser</li>
<li>the data will not disapear unless you delete it</li>
</ul>
</li>
<li>using sessionStorage</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>The localStorage and sessionStorage are storing the data on your computer and after the web page is loaded</p>

<ul>
<li>we can use javascript to get the data</li>
</ul>
</li>
<li><p>running the first time</p>

<ul>
<li>use all the following code can see the db insert and query successfully</li>
</ul>
</li>
<li>but in the second time

<ul>
<li>you should note the create and insert</li>
<li>then you can see the result</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>      &lt;script type="text/javascript"&gt;
</span><span class='line'>          //the first way to store the data
</span><span class='line'>          if(localStorage.pagecount){
</span><span class='line'>              localStorage.pagecount = Number(localStorage.pagecount) + 1;
</span><span class='line'>              }else{
</span><span class='line'>              localStorage.pagecount = 1;
</span><span class='line'>          }
</span><span class='line'>          document.write("Visits: " + localStorage.pagecount + " time(s).");
</span><span class='line'>
</span><span class='line'>          //the second way to store the data
</span><span class='line'>          //using sqlite
</span><span class='line'>          var db = openDatabase("mytestdb", "1.0", "stu list", 1024*1024, function(){});
</span><span class='line'>          //use the command `openDatabase` can create a data base
</span><span class='line'>          //name, version, discription, db size
</span><span class='line'>          alert("&lt;p&gt;create db success&lt;/p&gt;");
</span><span class='line'>          db.transaction(function(tx){
</span><span class='line'>                  tx.executeSql("CREATE TABLE IF NOT EXISTS test(id int UNIQUE, title TEXT, content TEXT)");
</span><span class='line'>                  document.write("&lt;p&gt;create table test successfully&lt;/p&gt;");
</span><span class='line'>                  tx.executeSql("insert into test(id, title, content) values(1, '111', 'swq')");
</span><span class='line'>                  tx.executeSql("insert into test(id, title, content) values(2, 'bbb', 'sawf')");
</span><span class='line'>                  document.write("&lt;p&gt;insert two contents successfully&lt;/p&gt;");
</span><span class='line'>                  tx.executeSql("SELECT * FROM test", [], function(tx, rs){
</span><span class='line'>                      var len = rs.rows.length;
</span><span class='line'>                      alert(len + "");
</span><span class='line'>                      for(var i = 0; i &lt; rs.rows.length; i++){
</span><span class='line'>                          var testObj = rs.rows.item(i);
</span><span class='line'>                          alert(testObj.id + "-----" + testObj.title);
</span><span class='line'>                      }
</span><span class='line'>                  });
</span><span class='line'>          });
</span><span class='line'>      &lt;/script&gt;
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
