<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-04-22T01:02:51-04:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[c++ basic data structure]]></title>
    <link href="http://pbking1.github.com/blog/2015/04/20/c-plus-plus-basic-data-structure/"/>
    <updated>2015-04-20T22:04:11-04:00</updated>
    <id>http://pbking1.github.com/blog/2015/04/20/c-plus-plus-basic-data-structure</id>
    <content type="html"><![CDATA[<h3>basic data structure and algorithm</h3>

<h4>little review about c++ pop</h4>

<ul>
<li>虚函数

<ul>
<li>核心理念就是基类访问派生类定义的函数</li>
<li>动态联编</li>
<li>一个函数的调用不是在编译的时候确定的，而是在运行的时候确定的，并且因为写代码的时候不能确定被调用的函数是基类的函数还是派生类的函数，所以这个函数又叫做“虚函数“</li>
</ul>
</li>
<li><code>
  class A{
      public:
          virtual void test(){
              cout&lt;&lt;"A:test() is called";
          }        
  };
  class B: public A{
      public:
          virtual void test(){
              cout&lt;&lt;"B:test() is called";
          }
  };
  int main(){
      A *a = new B();
      a -&gt; test();
  }
</code></li>
</ul>


<!--more-->


<ul>
<li><p>虚函数表</p>

<ul>
<li>实现多态的主要功能</li>
<li>编译器会为每一个有虚函数的类的实例创建一个虚函数表</li>
<li>用来存虚函数的table

<ul>
<li>table的每个slot（槽）里面存放虚函数的地址</li>
</ul>
</li>
</ul>
</li>
<li><p>纯虚函数</p>

<ul>
<li><code>virtual void test() = 0</code></li>
<li>意思是抽象类，也可以说是接口，用来规范派生类的行为

<ul>
<li>告诉使用者我的派生类都会有这个函数</li>
</ul>
</li>
<li>虚构析函数

<ul>
<li>当一个类要被其他的类当基类使用的时候，必须是纯虚的</li>
<li>如果有两个class A和B

<ul>
<li>B继承A，但是A的构析函数没有设置成虚函数</li>
<li>那么在delete B的实例的时候，只有A的实例被delete， B的不会被delete。。。那这不是坑爹吗。。。。</li>
<li>但是再A的构析函数前面加上virtual，这样就能保证在delete B的实例的时候，两个类的构析函数都会被调用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>但是构造函数不能使虚函数</p></li>
</ul>


<h4>链表</h4>

<ul>
<li>链表ADT</li>
<li><p><code>
template &lt;typename E&gt; class List{
  private:
      void operator = (const List &amp;){}
      List(const List&amp;){}
  public:
      List(){}
      virtual ~List(){}
      virtual void clear() = 0;
      virtual void insert(const E&amp; item) = 0;
      virtual void append(const E&amp; item) = 0;
      virtual E remove() = 0;
      //move the pointer to start
      virtual void moveToStart() = 0;
      //move the pointer to end
      virtual void moveToEnd() = 0;
      virtual void prev() = 0;
      virtual void next() = 0;
      virtual int length() const = 0;
      virtual int currPos() const = 0;
      virtual void moveToPos(int pos) = 0;
      virtual const E&amp; getValue() const = 0;
};
</code></p></li>
<li><p>数组实现</p></li>
<li><p><code>
  template &lt;typename E&gt; class AList: public List&lt;E&gt;{
  private:
      int maxSize;
      int listSize;
      int curr;
      E* listArray;   
  public:
      //初始化列表
      AList(int size = 100){
          maxSize = size;
          listSize = 0;
          curr = 0;
          listArray = new E[maxSize];
      }
      //构析函数，删掉数组，释放空间
      ~AList(){
          delete []listArray;
      }
      void clear(){
          delete []listArray;
          listSize = 0;
          curr = 0;
          listArray = new E[maxSize];
      }
      //把当前位置之后的数组向后移动一位，再插入
      void insert(const E&amp; it){
          for(int i = listSize; i &gt; curr; i--)
              listArray[i] = listArray[i-1];
          //move back the array from the current position
          listArray[curr] = it;
          listSize++;
      }
      //直接在最后增加item
      void append(const E&amp; it){
          listArray[listSize++] = it;
      }
      //记录当前的数组索引的指向的数据，把数组向前移动一位
      E remove(){
          E it = listArray[curr];
          for(int i = curr; i &lt; listSize - 1; i++){
              listArray[i] = listArray[i + 1];
          }
          listSize--;
          return it;
      }
      void moveToStart(){
          curr = 0;
      }
      void moveToEnd(){
          curr = listSize;
      }
      void prev(){
          if(curr &gt; 0)
              curr--;
      }
      void next(){
          if(curr &lt; listSize)
              curr++;
      }
      int length(){
          return listSize;
      }
      int currPos() const{
          return curr;
      }
      void moveToPos(int pos){
          pos = curr;
      }
      const E&amp; getValue() const{
          return listArray[curr];
      }
  };
 </code></p></li>
<li><p>链式实现</p></li>
<li><code>
  template &lt;typename E&gt; class Link{
  public:
      E element;
      Link *next;
      Link(const E&amp; elemval, Link *nextval = NULL){
          element = elemval;
          next = nextval;
      }
      Link(Link *nextval = NULL){
          next = nextval;
      }
};
template &lt;typename E&gt; class LList: public List&lt;E&gt;{
  private:
      Link&lt;E&gt; *head;
      Link&lt;E&gt; *tail;
      Link&lt;E&gt; *curr;
      int count;
      void init(){
          curr = tail = head = new Link&lt;E&gt;;
          count = 0;
      }
      void removeall(){
          while(head != NULL){
              curr = head;
              head = head -&gt; next;
              delete curr;
          }
      }
  public:
      LList(int size=100){
          init();
      }
      ~LList(){
          removeall();
      }
      void clear(){
          removeall();
          init();
      }
      void insert(const E&amp; it){
          //给要增加的节点初始化
          curr -&gt; next = new Link&lt;E&gt;(it, curr -&gt; next);
          //如果要curr指针就是再末尾
          //那么把curr的下一个赋给tail
          if(tail == curr)
              tail = curr -&gt; next;
          count++;
      }
      void append(const E&amp; it){
          //直接把末尾指针的next指向新建的link
          tail = tail -&gt; next = new Link&lt;E&gt;(it, NULL);
          count++;
      }
      //注意，这里要删除的节点叫做curr-&gt;next
      E remove(){
          //先把要删除的node的值存起来
          E it = curr -&gt; next -&gt; element;
          //用temp存一下要删除的节点
          Link&lt;E&gt; *temp = curr -&gt; next;
          //如果这个要删除的点是末尾，那么把末尾前一个节点赋给tail
          if(tail == curr -&gt; next)
              tail = curr;
          //否则，把要删除的节点的前一个节点的next指向要删除节点的下一个
          curr -&gt; next = curr -&gt; next -&gt; next;
          delete temp;
          count--;
          return it;
      }
      void moveToStart(){
          curr = head;
      }
      void moveToEnd(){
          curr = tail;
      }
      void prev(){
          if(curr == head)
              return ;
          Link&lt;E&gt; *temp = head;
          //向左移动一个单位
          //做法是先用temp存一个head，然后向右找，直到找到curr的前一个，然后把curr的前一个赋给curr
          while(temp -&gt; next != curr)
              temp = temp -&gt; next;
          curr = temp;
      }
      void next(){
          //只要curr指针不是tail，那么就向后移动
          if(curr != tail)
              curr = curr -&gt; next;
      }
      int length(){
          return count;
      }
      int currPos() const{
          Link&lt;E&gt; *temp = head;
          //用temp指针存head，然后依次向后遍历，并且每次后移count+1
          int i;
          for(i = 0; i &lt; count; i++){
              temp = temp -&gt; next;
          }
          return i;
      }
      void moveToPos(int pos){
          curr = head;
          //先把current的指针指向head
          //然后一直向后移动，直到pos次
          for(int i = 0; i &lt; pos; i++){
              curr = curr -&gt; next;
          }
      }
      const E&amp; getValue() const{
          return curr -&gt; next -&gt; element;
      }
  };
</code></li>
</ul>


<h4>栈</h4>

<ul>
<li>数组实现</li>
<li><code>
class Astack{
  private:
      int maxSize;
      int top;
      int *array;
  public:
      Astack(int size = 100){
          maxSize = size;
          top = 0;
          array = new int[size];
      }
      ~Astack(){
          delete []array;
      }
      void clear(){
          top = 0;
      }
      void push(int item){
          array[top++] = item;
      }
      int pop(){
          int temp = array[top];
          return array[--top];
      }
      int getTop(){
          return array[top - 1];
      }   
};
int main(){
  Astack a;
  a.push(1);
  cout&lt;&lt;a.getTop();
  a.pop();
  cout&lt;&lt;a.getTop();
  return 0;
}
</code></li>
</ul>


<h4>队列</h4>

<ul>
<li>数组实现</li>
<li><code>
class Aqueue{
  private:
      int front;
      int rear;
      int maxSize;
      int *array;
  public:
      Aqueue(int size = 100){
          maxSize = size;
          front = rear = 0;
          array = new int[size];
      }
      ~Aqueue(){
          delete [] array;
      }
      void enqueue(int item){
          array[rear] = item;
          rear = (rear + 1)%maxSize;
      }
      int dequeue(){
          int temp = array[front];
          front = (front + 1)%maxSize;
          array[front] = 0;
          return temp;
      }
      const int getFrontValue(){
          return array[front];
      }
};
int main(){
  Aqueue q;
  q.enqueue(1);
  cout&lt;&lt;q.getFrontValue()&lt;&lt;endl;
  q.dequeue();
  cout&lt;&lt;q.getFrontValue();
  return 0;
}
</code></li>
</ul>


<h4>二叉树</h4>

<ul>
<li>遍历

<ul>
<li>前序遍历

<ul>
<li><code>
void preorder(Node *root){
  if(root == NULL){
      return ;
  }
  cout&lt;&lt;root-&gt;value;
  preorder(root -&gt; left);
  preorder(root -&gt; right);
}
</code></li>
</ul>
</li>
<li>中序遍历

<ul>
<li><code>
void inorder(Node *root){
  if(root == NULL){
      return ;
  }
  inorder(root -&gt; left);
  cout&lt;&lt;root -&gt; value;
  inorder(root -&gt; right);
}
</code></li>
</ul>
</li>
<li>后序遍历

<ul>
<li><code>
void postorder(Node *root){
  if(root == NULL){
      return ;
  }
  postorder(root -&gt; left);
  postorder)root -&gt; right);
  cout&lt;&lt;root -&gt; value;
}
</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
