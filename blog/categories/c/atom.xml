<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-02-08T19:01:17-05:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Difference Between Malloc and New in C++]]></title>
    <link href="http://pbking1.github.com/blog/2015/01/27/difference-between-malloc-and-new-in-c-plus-plus/"/>
    <updated>2015-01-27T15:30:52-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/01/27/difference-between-malloc-and-new-in-c-plus-plus</id>
    <content type="html"><![CDATA[<h3>new and delete</h3>

<ul>
<li>the way it allocate and release memory

<ul>
<li>the memory is allocate from <code>Free Store</code></li>
<li>will return a fully typed pointer

<ul>
<li>if failed will not return NULL</li>
</ul>
</li>
<li>the compiler will calculate the size</li>
<li>reallocate is not handled intuitively, using copy constructor</li>
<li>whether called malloc and delete can be user defined</li>
<li>can add a new memory allocator to deal with low memory</li>
<li>new and delete can be overwrite legally</li>
<li>use constructor/destructor to initial/destory object</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>new 动态创建和释放数组或者单个对象</p>

<ul>
<li>动态创建对象的时候，只需要指定其数据类型，不必为该对象命名</li>
<li>如果分配失败了，会抛出异常。</li>
<li>new 表达式返回指向该新建对象的指针</li>
<li>我们可以通过这个指针来访问新建的对象</li>
<li>int *p = new int

<ul>
<li>返回类型为int*类型， 分配大小为sizeof(int)</li>
</ul>
</li>
<li>int *p = new int[100]

<ul>
<li>返回类型为int*类型, 分配大小为sizeof(int) * 100</li>
</ul>
</li>
</ul>
</li>
<li><p>三种特殊指针</p>

<ul>
<li>void* 表示未确定类型的指针，更明确的说是指申请内存空间时还不知道user是用来储存什么类型的数据的。</li>
<li>零值指针：值为0的指针。可以是任何一种指针类型。</li>
<li>NULL指针：不提供任何地址信息的指针</li>
</ul>
</li>
<li><p>new 动态创建的对象是可以初始化的。</p>

<ul>
<li>e.g int *p = new int(1000)</li>
<li>如果不初始化，就会使用这个类的默认构造函数来初始化。

<ul>
<li>e.g int *p = new int()  //初始化为0</li>
</ul>
</li>
<li>但是如果对象是内置的，就没有初始化

<ul>
<li>e.g int *p = new int //指向一个没有初始化的int

<ul>
<li>string *str = new string()  //初始化为空串，因为string自带的默认构造函数会初始化为空串</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>delete</p>

<ul>
<li>delete p;

<ul>
<li>但是释放完p的内存之后，p会变成不确定的指针</li>
<li>因此要把p赋值为0

<ul>
<li>明确指针不再指向任何对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>malloc and free</h3>

<ul>
<li><p>the way it allocate and release memory</p>

<ul>
<li>the memory is allocate from <code>Heap</code></li>
<li>will return a void pointer

<ul>
<li>will return NULL if failed</li>
</ul>
</li>
<li>the space and size need to be specified(固定)</li>
<li>will not called new/delete</li>
<li>it is simple to reallocate large memory</li>
<li>user can not write code into allocation sequence to help with low memory</li>
<li>malloc/free can not be overriden legally</li>
</ul>
</li>
<li><p>malloc 动态内存分配</p>

<ul>
<li>void *malloc(int size)</li>
<li>向系统申请分配指定size个字节的内存空间</li>
<li>申请之后要检查是否分配成功</li>
<li>不用之后要释放：把纸箱这块内存的指针指向NULL, 防止程序不小心使用了它

<ul>
<li>如果忘了释放就是内存泄露</li>
</ul>
</li>
<li>操作系统中有一个记录空闲内存位置的链表，每次收到程序申请的时候，就会遍历这个链表，找到第一个空间大于申请的空间的堆节点，然后把该节点从链表中删除，把这个节点的空间分配给程序。</li>
<li> int p;

<ul>
<li>p = (int*)malloc(sizeof(int) * 128)</li>
<li>p指针会存储存储单元的首地址</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C Pointer Tutorial (1)]]></title>
    <link href="http://pbking1.github.com/blog/2014/04/25/c-pointer-tutorial-1/"/>
    <updated>2014-04-25T01:41:01-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/04/25/c-pointer-tutorial-1</id>
    <content type="html"><![CDATA[<h3>First is the basic</h3>

<ul>
<li>About <code>#</code>

<ul>
<li>these code are processed by the preprocessor</li>
<li>After the preprocessor read the code, the preprocessor directives will deal with it</li>
<li>then give the main code that are dealed with by the preprocessor directives to the complier</li>
<li>like <code>#include &lt;stdio.h&gt;</code>

<ul>
<li>It means that use the content in the stdio.h to replace the <code>#</code></li>
</ul>
</li>
</ul>
</li>
<li>About <code>const</code>

<ul>
<li>the value that is named const can not be modified</li>
<li>and it would be better to use <code>const</code> than <code>define</code> to define some const value.</li>
</ul>
</li>
<li><p>About passing the value</p>

<ul>
<li>in C programming language

<ul>
<li>all the array is passed using <strong>reference</strong>(if the value change in the function, it will change.)</li>
<li>and all the value and const value are passed using <strong>value</strong>(if the value change in the function, it will <strong>not</strong> change.)</li>
</ul>
</li>
</ul>
</li>
<li><p>About string I/O</p>

<ul>
<li><code>gets</code>

<ul>
<li>it is used to read a line in the content and store it as a parameter to pass to the array</li>
<li>the input line contains: a string and a newline</li>
</ul>
</li>
<li><code>puts</code></li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>About <code>*</code>

<ul>
<li><strong>the pointer point the address of a value that is stored in the memory</strong></li>
</ul>
</li>
</ul>


<h3>data type</h3>

<ul>
<li>In C programming language, there are only 4 basic data type

<ul>
<li>int, float, pointer and polymerization</li>
</ul>
</li>
<li><strong>INT</strong>

<ul>
<li>contains : char, short, int and long int</li>
<li>signed and ubsigned</li>
<li>thr range of the variable</li>
</ul>


<table>
<thead>
<tr>
<th>  type</th>
<th>range</th>
</tr>
</thead>
<tbody>
<tr>
<td>  char</td>
<td>0~127</td>
</tr>
<tr>
<td>  signed char</td>
<td>-127~127</td>
</tr>
<tr>
<td>  unsigned char</td>
<td> 0~255</td>
</tr>
<tr>
<td>  short int</td>
<td>-32767~32767</td>
</tr>
<tr>
<td>  unsigned short int</td>
<td>0~65535</td>
</tr>
<tr>
<td>  int</td>
<td>-32767~32767</td>
</tr>
<tr>
<td>  unsigned int</td>
<td>0~65535</td>
</tr>
<tr>
<td>  long int </td>
<td>-2147483647~2147483647</td>
</tr>
<tr>
<td>  unsigned long int </td>
<td> 0~4294967295</td>
</tr>
</tbody>
</table>


<ul>
<li>short int is at least 16 bits</li>
<li>long int is at least 32 bits</li>
<li>if the computer is 32 bits then int is 32 bits

<ul>
<li>else if the computer is 64 bits than the int is 32 bits</li>
</ul>
</li>
<li>The range difference in difference kinds of machine</li>
</ul>


<table>
<thead>
<tr>
<th>  data type</th>
<th>32 bits compiler</th>
<th>64 bits compiler</th>
</tr>
</thead>
<tbody>
<tr>
<td>  char</td>
<td>1 byte </td>
<td> 1 byte</td>
</tr>
<tr>
<td>  char *</td>
<td>4 bytes</td>
<td> 8bytes</td>
</tr>
<tr>
<td>  short int</td>
<td>2 bytes</td>
<td>2 bytes</td>
</tr>
<tr>
<td>  int</td>
<td>4 bytes</td>
<td>4 bytes</td>
</tr>
<tr>
<td>  unsigned int</td>
<td>4 bytes </td>
<td> 4 bytes</td>
</tr>
<tr>
<td>  float </td>
<td> 4 bytes </td>
<td> 4 bytes</td>
</tr>
<tr>
<td>  double </td>
<td> 8 bytes </td>
<td> 8 bytes</td>
</tr>
<tr>
<td>  long </td>
<td> 4 bytes </td>
<td> 4 bytes</td>
</tr>
<tr>
<td>  long long </td>
<td> 8 bytes </td>
<td> 8 bytes</td>
</tr>
<tr>
<td>  unsigned long </td>
<td> 4 bytes </td>
<td> 8 bytes </td>
</tr>
</tbody>
</table>


<ul>
<li>use <code>sizeof(data type)</code> to get the length of the data type</li>
<li>add <code>0</code> before number to make it octal number</li>
<li>add <code>0x</code> before number to make it hexadecimal number</li>
<li>add <code>L</code> before character to make it wider charactor literal(it the environment support)

<ul>
<li>e.g <code>L'X'</code></li>
</ul>
</li>
</ul>
</li>
<li><strong>FLOAT</strong>

<ul>
<li>contains : float, double, long double</li>
<li>range : 10^-37 ~ 10<sup>37</sup></li>
<li>in</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
