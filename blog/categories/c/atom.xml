<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-04-22T01:01:48-04:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[difference between malloc and new in C++]]></title>
    <link href="http://pbking1.github.com/blog/2015/01/27/difference-between-malloc-and-new-in-c-plus-plus/"/>
    <updated>2015-01-27T15:30:52-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/01/27/difference-between-malloc-and-new-in-c-plus-plus</id>
    <content type="html"><![CDATA[<h3>new and delete</h3>

<ul>
<li>the way it allocate and release memory

<ul>
<li>the memory is allocate from <code>Free Store</code></li>
<li>will return a fully typed pointer

<ul>
<li>if failed will not return NULL</li>
</ul>
</li>
<li>the compiler will calculate the size</li>
<li>reallocate is not handled intuitively, using copy constructor</li>
<li>whether called malloc and delete can be user defined</li>
<li>can add a new memory allocator to deal with low memory</li>
<li>new and delete can be overwrite legally</li>
<li>use constructor/destructor to initial/destory object</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>new 动态创建和释放数组或者单个对象</p>

<ul>
<li>动态创建对象的时候，只需要指定其数据类型，不必为该对象命名</li>
<li>如果分配失败了，会抛出异常。</li>
<li>new 表达式返回指向该新建对象的指针</li>
<li>我们可以通过这个指针来访问新建的对象</li>
<li>int *p = new int

<ul>
<li>返回类型为int*类型， 分配大小为sizeof(int)</li>
</ul>
</li>
<li>int *p = new int[100]

<ul>
<li>返回类型为int*类型, 分配大小为sizeof(int) * 100</li>
</ul>
</li>
</ul>
</li>
<li><p>三种特殊指针</p>

<ul>
<li>void* 表示未确定类型的指针，更明确的说是指申请内存空间时还不知道user是用来储存什么类型的数据的。</li>
<li>零值指针：值为0的指针。可以是任何一种指针类型。</li>
<li>NULL指针：不提供任何地址信息的指针</li>
</ul>
</li>
<li><p>new 动态创建的对象是可以初始化的。</p>

<ul>
<li>e.g int *p = new int(1000)</li>
<li>如果不初始化，就会使用这个类的默认构造函数来初始化。

<ul>
<li>e.g int *p = new int()  //初始化为0</li>
</ul>
</li>
<li>但是如果对象是内置的，就没有初始化

<ul>
<li>e.g int *p = new int //指向一个没有初始化的int

<ul>
<li>string *str = new string()  //初始化为空串，因为string自带的默认构造函数会初始化为空串</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>delete</p>

<ul>
<li>delete p;

<ul>
<li>但是释放完p的内存之后，p会变成不确定的指针</li>
<li>因此要把p赋值为0

<ul>
<li>明确指针不再指向任何对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>malloc and free</h3>

<ul>
<li><p>the way it allocate and release memory</p>

<ul>
<li>the memory is allocate from <code>Heap</code></li>
<li>will return a void pointer

<ul>
<li>will return NULL if failed</li>
</ul>
</li>
<li>the space and size need to be specified(固定)</li>
<li>will not called new/delete</li>
<li>it is simple to reallocate large memory</li>
<li>user can not write code into allocation sequence to help with low memory</li>
<li>malloc/free can not be overriden legally</li>
</ul>
</li>
<li><p>malloc 动态内存分配</p>

<ul>
<li>void *malloc(int size)</li>
<li>向系统申请分配指定size个字节的内存空间</li>
<li>申请之后要检查是否分配成功</li>
<li>不用之后要释放：把纸箱这块内存的指针指向NULL, 防止程序不小心使用了它

<ul>
<li>如果忘了释放就是内存泄露</li>
</ul>
</li>
<li>操作系统中有一个记录空闲内存位置的链表，每次收到程序申请的时候，就会遍历这个链表，找到第一个空间大于申请的空间的堆节点，然后把该节点从链表中删除，把这个节点的空间分配给程序。</li>
<li> int p;

<ul>
<li>p = (int*)malloc(sizeof(int) * 128)</li>
<li>p指针会存储存储单元的首地址</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linear_regression_tutorial]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/12/linear-regression-tutorial/"/>
    <updated>2014-05-12T03:23:20-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/12/linear-regression-tutorial</id>
    <content type="html"><![CDATA[<h3>First something about training the data</h3>

<ul>
<li>Training set &ndash;> learning algorithm &ndash;> hypothesis &ndash;> estimated data</li>
<li>And we will use multiple features.

<ul>
<li><img src="/images/lr_gd/mfeat.png"></li>
</ul>
</li>
</ul>


<h3>What is linear regression</h3>

<ul>
<li>To say the idea in normal, we will have n feature</li>
<li>And what we are going to do is to observe them and suppose that they should be in a linear method.</li>
<li>And we should develop a way to find out the parameter to suit the hypothesis function.</li>
</ul>


<!--more-->


<h3>The first method to solve the problem(Gradient decend)</h3>

<h4>how it works?</h4>

<ul>
<li>There are several ideas

<ul>
<li><strong>learn rate</strong>

<ul>
<li>if too small, the gradient descent will be slow</li>
<li>if too large, the gradient descent will overshoot the minimum.

<ul>
<li>it may be fail to converge, or even diverge</li>
</ul>
</li>
<li><img src="/images/lr_gd/apha.png"></li>
</ul>
</li>
<li><strong>Cost function(J function)</strong>

<ul>
<li>The cost function has no relationship with the x and y.</li>
<li>and it all depend on the parameter <em>theta</em></li>
<li>and the &frac12; in the front is to make the derivation easier</li>
<li>And the cost function is used to <em>make the err(the err between hypothesis and real data) smaller</em>.</li>
</ul>
</li>
<li><strong>Hypothesis</strong>

<ul>
<li>This function is used to <em>make the function good</em>.</li>
<li>good enough to make the y calculate by the function can came close to the real y.</li>
<li>and we will use the err of them to see whether it is good enough or not.</li>
<li>and with all the data, we sum them.</li>
</ul>
</li>
<li><strong>theta</strong>

<ul>
<li><p>we can see in the following picture</p>

<ul>
<li>suppose that we went down the mountain and we can see all the mountain around us are higher than us</li>
<li>and the theta in the cost function is that we <em>reduce</em> theta value in the theta direction</li>
<li>and the deviation of the cost function on theta i is the distance that we move on theta i direction.</li>
</ul>
</li>
<li><p><img src="/images/lr_gd/gdpic.png"></p></li>
</ul>
</li>
</ul>
</li>
<li><strong>Basic algorithm</strong>

<ul>
<li>start with some theta0, theta1, theta2&hellip;..</li>
<li>Keep changing theta0, theta1, theta2&hellip;. to reduce J(theta0, theta2&hellip;) until we hopefully end up at a minimum.</li>
<li>And this is the key idea of Gradient descend method</li>
</ul>
</li>
<li><img src="/images/lr_gd/idea.png"></li>
</ul>


<h3>The cpp code of it</h3>

<p>```</p>

<h1>include&lt;stdlib.h></h1>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;string.h></h1>

<h1>include&lt;math.h></h1>

<h1>define OUTPUTID 10001</h1>

<h1>define BUFFERSIZE 50000</h1>

<h1>define ROWNUM 10000</h1>

<h1>define COLNUM 385</h1>

<p>double alpha = 0.1;
char buffer[BUFFERSIZE];
const char *delim = &ldquo;,&rdquo;;
double x[ROWNUM][COLNUM];
double y[ROWNUM];
double result[ROWNUM];
double diff[ROWNUM];
double theta[COLNUM];
double temp[COLNUM];</p>

<p>void readdata(char <em>, bool);
void writedata(char </em>);
void test();
void gradient_descend_train();</p>

<p>int main(){</p>

<pre><code>readdata("train.csv", true);
gradient_descend_train();
readdata("test.csv", false);
test();
writedata("predict.csv");
return 0;
</code></pre>

<p>}</p>

<p>void readdata(char *filename, bool haspredicted){</p>

<pre><code>FILE *inputfile = fopen(filename, "r");

if(inputfile == NULL){
    system("PAUSE");
    exit(1);
}
//drop the first line
fscanf(inputfile, "%s", buffer);
//read all lines each
char *s;
for(int i = 0; i &lt; ROWNUM; i++){

    fscanf(inputfile, "%s", buffer);
    //drop the first column
    strtok(buffer, delim);
    //read the predict y
    if(haspredicted){
        s = strtok(NULL, delim);
        sscanf(s, "%lf", &amp;y[i]);
    }
    //init x0
    x[i][0] = 1;
    //read the matrix
    for(int j = 1; j &lt; COLNUM; j++){
        s = strtok(NULL, delim);
        sscanf(s, "%lf", &amp;x[i][j]);
    }
}
fclose(inputfile);
</code></pre>

<p>}</p>

<p>void writedata(char *filename){</p>

<pre><code>FILE *outputfile = fopen(filename, "w");

if(outputfile == NULL){
    system("pause");
    exit(1);
}

fprintf(outputfile, "%s,%s\n", "Id", "reference");
//write the result into file
for(int i = 0, id = OUTPUTID; i &lt; ROWNUM; i++, id++){
    //cout&lt;&lt;"write the line"&lt;&lt;i + 1&lt;&lt;endl;
    fprintf(outputfile, "%d,%.6lf\n", id, result[i]);
}
fclose(outputfile);
</code></pre>

<p>}</p>

<p>void initTheta(){  //init theta</p>

<pre><code>char *thetafilename = "theta.dat";
FILE *f = fopen(thetafilename, "r");
for(int j = 0; j &lt; COLNUM; j++)
    fscanf(f, "%lf", &amp;theta[j]);
fclose(f);
//init the theta
for(int j = 0; j &lt; COLNUM; j++)
    theta[j] = 0;
</code></pre>

<p>}</p>

<p>void saveTheta(){   //save the theta</p>

<pre><code>FILE *f = fopen("theta.dat", "w");
for(int j = 0; j &lt; COLNUM; j++)
    fprintf(f, "%lf\n", theta[j]);
fclose(f);
</code></pre>

<p>}</p>

<p>void calculateResult(){</p>

<pre><code>for(int i = 0; i &lt; ROWNUM; i++){
    result[i] = 0;
    for(int j = 0; j &lt; COLNUM; j++){
        result[i] += theta[j] * x[i][j];
    }
}
</code></pre>

<p>}</p>

<p>double calculateJ(){</p>

<pre><code>int turn = 0;
double cost = 0;
for(int i = 0; i &lt; ROWNUM; i++){
    diff[i] = result[i] - y[i];
    cost += diff[i]*diff[i];
}
cost /= (ROWNUM * 2);
printf("%5d: J(theta) = %.6lf\n", ++turn, cost);
return cost;
</code></pre>

<p>}</p>

<p>void updateTheta(){</p>

<pre><code>double sum;
for(int j = 0 ; j &lt; COLNUM; j++){
    sum = 0;
    for(int i = 0; i &lt; ROWNUM; i++)
        sum += diff[i] * x[i][j];
    theta[j] -= alpha * sum / ROWNUM;
}
</code></pre>

<p>}</p>

<p>void gradient_descend_train(){</p>

<pre><code>initTheta();
alpha = 0.1001;
double cost = 1000;
while(cost &gt; 26.4){
    calculateResult();
    cost = calculateJ();
    updateTheta();
}
saveTheta();
</code></pre>

<p>}</p>

<p>void test(){</p>

<pre><code>calculateResult();
</code></pre>

<p>}</p>

<p>```</p>

<h3>The Second method to solve the problem(normal equation)</h3>

<ul>
<li>This way is a way shown in the statistic learning.</li>
<li>use the minimum square function to do a regression analyse on the data.

<ul>
<li><img src="/images/lr_gd/nq.png"></li>
<li>and the process is shown : (385<em>10000)</em>(10000<em>385)</em>(385<em>10000)</em>10000<em>1=385</em>1</li>
</ul>
</li>
<li>and we can see the feature normalise in the normal equation function

<ul>
<li><img src="/images/lr_gd/nfn.png"></li>
</ul>
</li>
</ul>


<h3>The matlab code of it</h3>

<ul>
<li>The main function</li>
</ul>


<p>```
%load the train data
data = load(&lsquo;train.txt&rsquo;);
X = data(:, 3:386);
y = data(:, 2);
m = length(y);
m2 = size(X);</p>

<p>%load the test data
data2 = load(&lsquo;test.txt&rsquo;);
feat = data2(:, 2:385);
m3 = size(feat);</p>

<p>sum_test = [0];</p>

<p>%use the equation to calculate
theta = normaleqn(X, y, w);</p>

<p>%calculate the result
result = feat * theta;</p>

<p>csvwrite(&lsquo;aaa_ver3.csv&rsquo;, [linen result]);
```</p>

<ul>
<li>The normal equation function</li>
</ul>


<p>```
function [theta] = normaleqn(x, y, w)</p>

<pre><code>theta = zeros(size(x, 2), 1);
%theta = pinv(x' * x + 4000.3 * eye(size(x, 2))) * x' * y;
 %theta = pinv(x' * x + 3.3 * eye(size(x, 2))) * x' * y;
theta = pinv(x' * x + w * eye(size(x, 2))) * x' * y;
</code></pre>

<p>en
```</p>

<h3>The cpp code of it</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C pointer tutorial (1)]]></title>
    <link href="http://pbking1.github.com/blog/2014/04/25/c-pointer-tutorial-1/"/>
    <updated>2014-04-25T01:41:01-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/04/25/c-pointer-tutorial-1</id>
    <content type="html"><![CDATA[<h3>First is the basic</h3>

<ul>
<li>About <code>#</code>

<ul>
<li>these code are processed by the preprocessor</li>
<li>After the preprocessor read the code, the preprocessor directives will deal with it</li>
<li>then give the main code that are dealed with by the preprocessor directives to the complier</li>
<li>like <code>#include &lt;stdio.h&gt;</code>

<ul>
<li>It means that use the content in the stdio.h to replace the <code>#</code></li>
</ul>
</li>
</ul>
</li>
<li>About <code>const</code>

<ul>
<li>the value that is named const can not be modified</li>
<li>and it would be better to use <code>const</code> than <code>define</code> to define some const value.</li>
</ul>
</li>
<li><p>About passing the value</p>

<ul>
<li>in C programming language

<ul>
<li>all the array is passed using <strong>reference</strong>(if the value change in the function, it will change.)</li>
<li>and all the value and const value are passed using <strong>value</strong>(if the value change in the function, it will <strong>not</strong> change.)</li>
</ul>
</li>
</ul>
</li>
<li><p>About string I/O</p>

<ul>
<li><code>gets</code>

<ul>
<li>it is used to read a line in the content and store it as a parameter to pass to the array</li>
<li>the input line contains: a string and a newline</li>
</ul>
</li>
<li><code>puts</code></li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>About <code>*</code>

<ul>
<li><strong>the pointer point the address of a value that is stored in the memory</strong></li>
</ul>
</li>
</ul>


<h3>data type</h3>

<ul>
<li>In C programming language, there are only 4 basic data type

<ul>
<li>int, float, pointer and polymerization</li>
</ul>
</li>
<li><strong>INT</strong>

<ul>
<li>contains : char, short, int and long int</li>
<li>signed and ubsigned</li>
<li>thr range of the variable</li>
</ul>


<table>
<thead>
<tr>
<th>  type</th>
<th>range</th>
</tr>
</thead>
<tbody>
<tr>
<td>  char</td>
<td>0~127</td>
</tr>
<tr>
<td>  signed char</td>
<td>-127~127</td>
</tr>
<tr>
<td>  unsigned char</td>
<td> 0~255</td>
</tr>
<tr>
<td>  short int</td>
<td>-32767~32767</td>
</tr>
<tr>
<td>  unsigned short int</td>
<td>0~65535</td>
</tr>
<tr>
<td>  int</td>
<td>-32767~32767</td>
</tr>
<tr>
<td>  unsigned int</td>
<td>0~65535</td>
</tr>
<tr>
<td>  long int </td>
<td>-2147483647~2147483647</td>
</tr>
<tr>
<td>  unsigned long int </td>
<td> 0~4294967295</td>
</tr>
</tbody>
</table>


<ul>
<li>short int is at least 16 bits</li>
<li>long int is at least 32 bits</li>
<li>if the computer is 32 bits then int is 32 bits

<ul>
<li>else if the computer is 64 bits than the int is 32 bits</li>
</ul>
</li>
<li>The range difference in difference kinds of machine</li>
</ul>


<table>
<thead>
<tr>
<th>  data type</th>
<th>32 bits compiler</th>
<th>64 bits compiler</th>
</tr>
</thead>
<tbody>
<tr>
<td>  char</td>
<td>1 byte </td>
<td> 1 byte</td>
</tr>
<tr>
<td>  char *</td>
<td>4 bytes</td>
<td> 8bytes</td>
</tr>
<tr>
<td>  short int</td>
<td>2 bytes</td>
<td>2 bytes</td>
</tr>
<tr>
<td>  int</td>
<td>4 bytes</td>
<td>4 bytes</td>
</tr>
<tr>
<td>  unsigned int</td>
<td>4 bytes </td>
<td> 4 bytes</td>
</tr>
<tr>
<td>  float </td>
<td> 4 bytes </td>
<td> 4 bytes</td>
</tr>
<tr>
<td>  double </td>
<td> 8 bytes </td>
<td> 8 bytes</td>
</tr>
<tr>
<td>  long </td>
<td> 4 bytes </td>
<td> 4 bytes</td>
</tr>
<tr>
<td>  long long </td>
<td> 8 bytes </td>
<td> 8 bytes</td>
</tr>
<tr>
<td>  unsigned long </td>
<td> 4 bytes </td>
<td> 8 bytes </td>
</tr>
</tbody>
</table>


<ul>
<li>use <code>sizeof(data type)</code> to get the length of the data type</li>
<li>add <code>0</code> before number to make it octal number</li>
<li>add <code>0x</code> before number to make it hexadecimal number</li>
<li>add <code>L</code> before character to make it wider charactor literal(it the environment support)

<ul>
<li>e.g <code>L'X'</code></li>
</ul>
</li>
</ul>
</li>
<li><strong>FLOAT</strong>

<ul>
<li>contains : float, double, long double</li>
<li>range : 10^-37 ~ 10<sup>37</sup></li>
<li>in</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
