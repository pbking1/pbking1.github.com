<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2016-02-12T15:27:45-06:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[c++ reference and pointer]]></title>
    <link href="http://pbking1.github.com/blog/2015/04/22/c-plus-plus-reference-and-pointer/"/>
    <updated>2015-04-22T11:15:07-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/04/22/c-plus-plus-reference-and-pointer</id>
    <content type="html"><![CDATA[<h3>what is pointer</h3>

<ul>
<li>形参

<ul>
<li>formal parameter</li>
<li>定义时函数里面的变量

<ul>
<li>e.g int swao(int a, int b)</li>
<li>a和b就是形参</li>
</ul>
</li>
</ul>
</li>
<li>实参

<ul>
<li>actual parameter</li>
<li>在主函数里面引用的

<ul>
<li>e.g swap(x,y)</li>
<li>x和y就是实参，实际的值</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<h4>指针</h4>

<p>```
void part1(){</p>

<pre><code>//basic
//p指向变量，对p的重新复制就会改变p所指向的变量的值。
//同样对p指向的变量重新复制也会改变*p的值
int ptmp = 50;
int *p;
p = &amp;ptmp;
cout&lt;&lt;p&lt;&lt;endl;
//p存放的是ptmp变量所在的地址值 
cout&lt;&lt;*p&lt;&lt;endl;
//50，是指储存在指针的内存地址中的值，也就是ptmp的值
cout&lt;&lt;&amp;p&lt;&lt;endl; 
//p指针本身的地址值
cout&lt;&lt;&amp;ptmp; 
//ptmp变量所在的地址值
</code></pre>

<p>}
```</p>

<h4>指针控制循环</h4>

<p>```
void part2(){</p>

<pre><code>//用指针来控制循环条件
//针对数组
int array[20];
int *p = array;
int i;
for(int j = 0; j &lt; 20; j++)
    array[j] = j;
cout&lt;&lt;endl;
for(i = 0; i &lt; 20; i++){
    cout&lt;&lt;p&lt;&lt;" "&lt;&lt;(*p)&lt;&lt;" ";
    p++; //指针加一
    (*p)++; //指针指向内容加一
    //如果要用指针遍历数组
    //用*(p+i)
    //应为int 的p++ = p + 2
    //int 占2byte
}
cout&lt;&lt;endl;
//针对字符串
char *str = "abc";
while(*p){
    cout&lt;&lt;*p&lt;&lt;" ";
    p++;
    //可以这么做的原因是char占 1 byte
}
</code></pre>

<p>}
```</p>

<h4>引用</h4>

<p>```
void part3(){</p>

<pre><code>//引用
int a = 20;
int b = 10;
int &amp;p = a;
//p引用a,所以p是a的另外一个名字
cout&lt;&lt;p&lt;&lt;endl;
//p的值改变了
p = b;
//a的值也会改变
cout&lt;&lt;a&lt;&lt;endl;
</code></pre>

<p>}
```</p>

<h4>传参</h4>

<p>```
void swap1(int x, int y){</p>

<pre><code>cout&lt;&lt;"in function before swap"&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;
int temp = x;
x = y;
y = temp;
cout&lt;&lt;"in fuction after swap"&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;
</code></pre>

<p>}
void swap2(int <em>a, int </em>b){</p>

<pre><code>//temp用来存a得值
//所以其实这里是在交换值
int temp = *a;
*a = *b;
*b = temp;
</code></pre>

<p>}
void swap3(int &amp;a, int &amp;b){</p>

<pre><code>//因为这里是传引用，所以任何的改变都会改变
int temp = a;
a = b;
b = temp;
</code></pre>

<p>}
```</p>

<h4>注意事项</h4>

<ul>
<li>在可以使用引用的情况下，不要用指针</li>
<li>引用不能为空，当对象为NULL时，必须使用指针</li>
<li>引用不允许重新赋值，当使用一个变量指向不同的对象的时候，必须使用指针</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c++ basic data structure part3]]></title>
    <link href="http://pbking1.github.com/blog/2015/04/22/c-plus-plus-basic-data-structure-part3/"/>
    <updated>2015-04-22T00:27:20-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/04/22/c-plus-plus-basic-data-structure-part3</id>
    <content type="html"><![CDATA[<h3>basic data structure and algorithm part2</h3>

<h3>图论</h3>

<h4>图的实现</h4>

<ul>
<li>V为点的个数 E边的个数</li>
<li>邻接矩阵

<ul>
<li>用一个n*n的矩阵

<ul>
<li>第一列第二个为1的意思是

<ul>
<li>第一个点和第二个点相连</li>
<li>1为权值</li>
</ul>
</li>
</ul>
</li>
<li>O(V<sup>2</sup>)</li>
<li>用一个二维数组实现</li>
</ul>
</li>
<li>邻接表

<ul>
<li>用一个n长度的数组

<ul>
<li>然后每一个数组后面接的链表里面存着

<ul>
<li>这个数组index对应的点和哪些点相连

<ul>
<li>这些点存在链表里面</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>O(V+E)</li>
<li>stl实现</li>
<li>用vector<Node> list

<ul>
<li>然后Node就是每个点

<ul>
<li>如果有别的点和这个Node相连，就list.push_back(别的点)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<h4>图搜索</h4>

<h5>广度优先搜索</h5>

<ul>
<li>使用的数据结构是queue</li>
<li>相当于先把第一层的所有点入队

<ul>
<li>然后把每个点的相邻的节点入队

<ul>
<li>e.g

<ul>
<li>假设第一层的节点为A, 第二层为B，第三层为C

<ul>
<li>那么队列中的情况就是

<ul>
<li>A,B,C,A1,A2,A3,B1,C2</li>
<li>这样访问下来，就相当于一层一层的遍历了</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>伪代码
<code>
function bfs(vertex v){
  create a queue Q
  enqueue v into Q
  mark v as visited
  while Q is not empty{
      use temp to store Q.top
      dequeue the top vertex from Q
      for each adjacent w in temp{
          mark w as visited
          enqueue w into Q
      }
  }
}
</code></li>
</ul>


<h5>深度优先搜索</h5>

<ul>
<li>使用的数据结构是stack</li>
<li>伪代码
<code>
function dfs(vertex v){
  mark v as visited //把点标记为已经访问过了
  for each node adjacent to v //对这个点的所有邻接点进行搜索
      if node is unvisited  //如果从左到右，找到这个点没有被访问过
          dfs(node) //递归调用
      //如果这个点访问过了
          //那么向右移，继续搜索
}
</code></li>
</ul>


<h5>二叉树的BFS和DFS</h5>

<ul>
<li>首先递归建树

<ul>
<li>再用bfs和dfs
```

<h1>define Element char</h1>

<p>typedef struct Node{
Element data;
struct Node <em>left;
struct Node </em>right;
}<em>Tree;
int i = 0;
//按照先序遍历建树
void construct_tree(Tree &amp;root, Element data[]){
Element e = data[i++];
if(e == &lsquo;#&rsquo;)
  root = NULL;
else{
  root = new Node();
  root &ndash;> data = e;
  construct_tree(root &ndash;> left, data); //递归建立左子树
  construct_tree(root &ndash;> right, data); //递归建立右子树
} <br/>
}
void bfs(Tree root){  <br/>
queue<Node *> q;
q.push(root);
while(!q.empty()){
  Node </em>temp = q.front();
  q.pop();
  cout&lt;<temp -> data;
  if(temp &ndash;> left)
      q.push(temp &ndash;> left);
  if(temp &ndash;> right)
      q.push(temp &ndash;> right);
}
}
void dfs(Tree root){
stack<Node *> s;
s.push(root);
while(!s.empty()){
  Node *temp = s.top();
  s.pop();
  cout&lt;<temp -> data;
  //因为stack是先进后出，所以先把right压进去
  if(temp &ndash;> right)
      s.push(temp &ndash;> right);
  if(temp &ndash;> left)
      s.push(temp &ndash;> left);
}
}
int main(){
//#表示没有左子树或者右子树
//             A
//           /   \
//          B     C
//        /  \   /  \
//      D    E   F   G
Element data[15] = {&lsquo;A&rsquo;,&lsquo;B&rsquo;,&rsquo;D',&lsquo;#&rsquo;,&lsquo;#&rsquo;,&lsquo;E&rsquo;,&lsquo;#&rsquo;,&lsquo;#&rsquo;,&lsquo;C&rsquo;,&lsquo;F&rsquo;,&lsquo;#&rsquo;,&lsquo;#&rsquo;,&lsquo;G&rsquo;,&lsquo;#&rsquo;,&lsquo;#&rsquo;};
Tree tree;
construct_tree(tree, data);
//bfs
cout&lt;&lt;&ldquo;result of bfs: &rdquo;;
bfs(tree);
cout&lt;&lt;endl;
//dfs
cout&lt;&lt;&ldquo;result of dfs: &rdquo;;
dfs(tree);
cout&lt;&lt;endl;
return 0;
}
```</p></li>
</ul>
</li>
</ul>


<h5>拓扑排序</h5>

<ul>
<li>方法

<ul>
<li>用在有向图里面</li>
<li>选择一个入度为0的点，输出

<ul>
<li>然后删除这个点和所有和他相连的出去的边</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>最短路径</h4>

<ul>
<li>单源最短路</li>
<li>Dijkstra算法

<ul>
<li>首先把起点加入集合</li>
<li>每次查询的时候

<ul>
<li>把和这个集合最近的那个点加入集合</li>
<li>然后递归</li>
</ul>
</li>
</ul>
</li>
<li>floyd算法

<ul>
<li>原理是动态规划</li>
<li>首先得出图的邻接矩阵

<ul>
<li>然后如果i==j那么为0，因为自己到自己的距离为0</li>
<li>如果两个点不邻接，那么为INF(很大的数字)</li>
</ul>
</li>
<li>其次，如果有N个点，那么就要对矩阵进行n次更新

<ul>
<li>依次把距离当前集合距离最小的点加入集合</li>
<li>并且更新矩阵数据</li>
<li>如果a[i][j] > a[i][k] + a[k][j]

<ul>
<li>则a[i][j] = a[i][k] + a[k][j]</li>
</ul>
</li>
</ul>
</li>
<li>最后得出的矩阵就是包含所有点到所有点的最短距离</li>
</ul>
</li>
</ul>


<h4>最小生成树(todo)</h4>

<ul>
<li>Prim</li>
<li>Kruskal</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c++ basic data structure part2]]></title>
    <link href="http://pbking1.github.com/blog/2015/04/22/c-plus-plus-basic-data-structure-part2/"/>
    <updated>2015-04-22T00:22:30-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/04/22/c-plus-plus-basic-data-structure-part2</id>
    <content type="html"><![CDATA[<h3>basic data structure and algorithm part2</h3>

<h4>树</h4>

<ul>
<li>trie树

<ul>
<li>特点

<ul>
<li>根节点没有字符，除此之外，所有节点都只有一个字符</li>
<li>从根节点到任意叶子节点，都是一个独立的单词</li>
<li>每个节点的子节点包含的后续字符串都是不一样的</li>
</ul>
</li>
<li>但是hash表不能一边建立索引一边查数据

<ul>
<li>trie树可以

<ul>
<li>因为只要之前建立过的，再次出现的时候，就不会再增加</li>
</ul>
</li>
<li>而hash表建立的时候，不知道之前这个单词出现过，所以还是要建完表

<ul>
<li>再搜索</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<h4>内排序</h4>

<ul>
<li><p>O(n<sup>2</sup>)</p>

<ul>
<li>主要是交换那个动作耗时</li>
<li>冒泡排序</li>
<li>插入排序</li>
<li>选择排序</li>
</ul>
</li>
<li><p>快速排序</p>

<ul>
<li>时间复杂度：nlogn</li>
<li>最坏：n<sup>2</sup>

<ul>
<li>把区域划分成n-1和1</li>
</ul>
</li>
<li>空间复杂度：nlogn</li>
<li>所以其实要解释快排是什么

<ul>
<li>就是选一个中间值

<ul>
<li>把比这个中间值小的放到左边</li>
<li>把比这个中间值大的放到右边</li>
<li>然后分别对这两个子数组递归调用快速排序</li>
<li>最后的出来的就是排序好的</li>
</ul>
</li>
</ul>
</li>
<li>思想：

<ul>
<li>对于A[p&hellip;.r]</li>
<li>基于分而治之</li>
<li>首先

<ul>
<li>A[p&hellip;.r]被分解成两个子数组

<ul>
<li>一个是A[p&hellip;.q-1]，一个是A[q+1&hellip;..r]</li>
<li>然后递归调用对A[p&hellip;q-1]和A[q+1&hellip;..r]排序</li>
</ul>
</li>
<li>最后合并子数组
<code>
void quicksort(int *a, int low, int upp){
//low和upp为数组的上界和下界
int i = low;
int j = upp;
int mid = (low + upp)/2;
//设置pivot用作对比
int pivot = a[mid];
int temp;
//partition
do{
while(a[i] &lt; pivot)
i++;
while(a[j] &gt; pivot)
j--;
if(i &lt;= j){
swap(a[i], a[j]);
i++;
j--;
}
}while(i &lt; j);
//递归调用解决子问题
if(low &lt; j)
quicksort(a, low, j);
if(i &lt; upp)
quicksort(a, i, upp);
}
int main(){
int a[10] = {1,5,4,3,6,5,3,4,5,3};
for(int i = 0; i &lt; 10; i++){
cout&lt;&lt;a[i]&lt;&lt;" ";
}
cout&lt;&lt;endl;
quicksort(a, 0, 9);
for(int i = 0; i &lt; 10; i++){
cout&lt;&lt;a[i]&lt;&lt;" ";
}
return 0;
}
</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>归并排序</p></li>
<li>基本思想：

<ul>
<li>分而治之</li>
<li>先通过递归分解数组，然后再合并数组完成归并排序</li>
</ul>
</li>
<li>如何合并两个有序数组

<ul>
<li>比较两个数列的第一个数，把小的那个加入到结果数组中，然后从原来的数组删掉</li>
<li>然后一直循环比较到全部数据都取出来为止
```</li>
</ul>
</li>
</ul>


<p>```</p>

<h4>归并和快排的区别</h4>

<ul>
<li>快排分解之后不需要合并就能得到最终答案</li>
<li>归并分解之后还要对比两个子数组然后合并的到答案</li>
</ul>


<h3>外排序</h3>

<ul>
<li>适合在内存不够的时候用</li>
<li>把一个大文件分割成很多小文件

<ul>
<li>然后依次把每个小文件放入内存排序</li>
<li>排序完之后，再存入文件中</li>
<li>最后就会得到很多排好序的小文件</li>
</ul>
</li>
<li>然后用多路归并，对比每个文件的第一个，把最小的放到一个结果文件中

<ul>
<li>然后把这个元素在原本的文件中删掉</li>
</ul>
</li>
<li>得到的结果文件就是结果</li>
</ul>


<h4>哈希表</h4>

<ul>
<li>建立hash表

<ul>
<li>用hash函数把key转换成一个整型数字，这个整型数字对数组长度求模之后就是数组的下标

<ul>
<li>那么value就存在这个下表的数组空间里面</li>
</ul>
</li>
</ul>
</li>
<li><p>查询hash表</p>

<ul>
<li>把要查询的key用hash函数转换成数组下标，再去数组里面提取</li>
<li>O(N)非常快</li>
</ul>
</li>
<li><p>假设有1000万个记录，有重复，去除重复之后大约300万</p>

<ul>
<li>求top 10出现率的记录</li>
<li>解答：

<ul>
<li>用hash表

<ul>
<li>维护一个&lt;记录，出现次数>的hash表

<ul>
<li>这样就有一个300万条左右记录的hash表</li>
<li>再找前十就行了</li>
</ul>
</li>
</ul>
</li>
<li>找前10可以用部分排序

<ul>
<li>也就是用一个10个大小的数组

<ul>
<li>然后搜hash表，每次都和数组最后的那个比

<ul>
<li>如果比他大，就交换</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>把key变成下表的方法</p>

<ul>
<li>1.对key求模

<ul>
<li>index = value % 16</li>
</ul>
</li>
<li>2.平方散列

<ul>
<li>index = (value * value) >> 28

<ul>
<li>右移28bit是指除以2<sup>28</sup></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>如果两个value在hash表中对应同一个index怎么办？

<ul>
<li>可以用链表解决

<ul>
<li>这样就不会有冲突产生</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>索引</h4>

<ul>
<li><p>线性索引</p>

<ul>
<li>索引文件是一个线性的列表</li>
<li>并且列表中的每个元素都对应者数据库中的一个元素

<ul>
<li>或者数据库的某个位置</li>
</ul>
</li>
<li>但是有时候索引文件太大，装不进内存

<ul>
<li>那么解决方案就是用二级索引

<ul>
<li>这个二级索引是索引文件的索引</li>
</ul>
</li>
</ul>
</li>
<li>但是每个数据库更新的时候

<ul>
<li>所有的索引文件都要更新，但是线性索引的代价很大</li>
</ul>
</li>
</ul>
</li>
<li><p>ISAM</p></li>
<li>树状索引

<ul>
<li>B树

<ul>
<li>balance tree</li>
<li>b树的搜索

<ul>
<li>对根节点进行二分查找</li>
</ul>
</li>
</ul>
</li>
<li>B+树

<ul>
<li>B树的变种</li>
<li>叶子节点存数据</li>
<li>非叶子节点存索引</li>
<li>好处

<ul>
<li>因为B+树内部只是存索引，不像B树是存数据的

<ul>
<li>因此B+树I/O读写次数降低了</li>
</ul>
</li>
<li>查找效率稳定

<ul>
<li>因为所有非叶子节点都是索引</li>
<li>因此数据都在叶子节点上，因此关键字查询的路径相同</li>
<li>因此每一个数据的查找效率相当</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[string processing function implementation]]></title>
    <link href="http://pbking1.github.com/blog/2015/04/21/string-processing-function-implementation/"/>
    <updated>2015-04-21T00:56:01-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/04/21/string-processing-function-implementation</id>
    <content type="html"><![CDATA[<h3>string function in c</h3>

<h4>strcpy</h4>

<ul>
<li>使用一个临时变量保存串的首地址，然后最后返回这个地址</li>
<li>然后在最后判断是否遇到'\0'来结束复制
<code>
char *strcpy1(char *des, const char*src){
  char *address = des;
  while((*des++ = *src++) != '\0');
  return address;
}
int main(){
  char *des;
  char *src = "aaa";
  char *result;
  result = strcpy1(des, src);
  cout&lt;&lt;result;
  return 0;
}
</code></li>
</ul>


<!--more-->


<hr />

<h4>strlen</h4>

<ul>
<li>一直累加直到判断是否遇到'\0'来结束计数
<code>
int strlen1(const char*src){
  int count = 0;
  while((*src++) != '\0')
      count++;
  return count;
}
int main(){
  char *src = "aaa";
  int result;
  result = strlen1(src);
  cout&lt;&lt;result;
  return 0;
}
</code></li>
</ul>


<hr />

<h4>strcat</h4>

<ul>
<li>把指针移到最后，然后把b字符串的内容复制到a字符串最后</li>
<li><p>但是要注意a字符串要有足够的空间来支持b字符串内容的大小
```
char <em>strcat1(char </em>des, const char<em>src){
  char </em>address = des;
  while(*address)
      address++;</p>

<p>  while((<em>address++ = </em>src++) !=&lsquo;\0&rsquo;);
  return des;
}
int main(){
  char des[10] = &ldquo;&rdquo;;
  char <em>src = &ldquo;aaa&rdquo;;
  char </em>result;
  result = strcat1(des, src);
  printf(&ldquo;%s&rdquo;, result);
  return 0;
}
```</p></li>
</ul>


<hr />

<h4>strcmp</h4>

<ul>
<li>如果字符串一样，那么返回0</li>
<li>如果a>b那么返回正数，否则返回负数</li>
<li>比较方法是用asc码来比较，然后最后返回相减的结果

<ul>
<li>从左到右比较，知道出现不一样的字符或者出现'\0'为止
<code>
int strcmp1(const char *s1, const char*s2){
while(*s1 == *s2){
  if(*s1 == '\0'){
      return 0;
  }
  ++s1;
  ++s2;
}
return *s1 - *s2;
}
int main(){
char *des = "aaa";
char *src = "aaa";
int result;
result = strcmp1(des, src);
if(result == 0)
  cout&lt;&lt;"the string are the same";
else
  cout&lt;&lt;"the string are not the same";
return 0;
}
</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c++ basic data structure]]></title>
    <link href="http://pbking1.github.com/blog/2015/04/20/c-plus-plus-basic-data-structure/"/>
    <updated>2015-04-20T21:04:11-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/04/20/c-plus-plus-basic-data-structure</id>
    <content type="html"><![CDATA[<h3>basic data structure and algorithm</h3>

<h4>little review about c++ object oriented</h4>

<ul>
<li>虚函数

<ul>
<li>核心理念就是基类访问派生类定义的函数</li>
<li>动态联编</li>
<li>一个函数的调用不是在编译的时候确定的，而是在运行的时候确定的，并且因为写代码的时候不能确定被调用的函数是基类的函数还是派生类的函数，所以这个函数又叫做“虚函数“
<code>
class A{
  public:
      virtual void test(){
          cout&lt;&lt;"A:test() is called";
      }        
};
class B: public A{
  public:
      virtual void test(){
          cout&lt;&lt;"B:test() is called";
      }
};
int main(){
  A *a = new B();
  a -&gt; test();
}
</code></li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>虚函数表</p>

<ul>
<li>实现多态的主要功能</li>
<li><strong>编译器</strong>会为每一个有虚函数的类的实例创建一个虚函数表</li>
<li>用来存虚函数的table

<ul>
<li>table的每个slot（槽）里面存放虚函数的地址</li>
</ul>
</li>
<li>但是我们可以用函数指针来看虚函数表的地址

<ul>
<li>并且虚函数表在继承中，如果派生类没有重写基类的某个函数，他就会在基类中查那个函数，然后引用的时候就会引用基类的</li>
<li>并且如果子类如果增加了函数，就会在基类的虚函数表中增加</li>
</ul>
</li>
</ul>
</li>
<li><p>纯虚函数</p>

<ul>
<li><code>virtual void test() = 0</code></li>
<li>意思是抽象类，也可以说是接口，用来规范派生类的行为

<ul>
<li>告诉使用者我的派生类都会有这个函数</li>
</ul>
</li>
<li>虚构析函数

<ul>
<li>当一个类要被其他的类当基类使用的时候，必须是纯虚的</li>
<li>如果有两个class A和B

<ul>
<li>B继承A，但是A的构析函数没有设置成虚函数</li>
<li>那么在delete B的实例的时候，只有A的实例被delete， B的不会被delete。。。那这不是坑爹吗。。。。</li>
<li>但是再A的构析函数前面加上virtual，这样就能保证在delete B的实例的时候，两个类的构析函数都会被调用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>但是构造函数不能使虚函数</p></li>
</ul>


<hr />

<h4>链表</h4>

<ul>
<li>链表ADT
<code>
template &lt;typename E&gt; class List{
  private:
      void operator = (const List &amp;){}
      List(const List&amp;){}
  public:
      List(){}
      virtual ~List(){}
      virtual void clear() = 0;
      virtual void insert(const E&amp; item) = 0;
      virtual void append(const E&amp; item) = 0;
      virtual E remove() = 0;
      //move the pointer to start
      virtual void moveToStart() = 0;
      //move the pointer to end
      virtual void moveToEnd() = 0;
      virtual void prev() = 0;
      virtual void next() = 0;
      virtual int length() const = 0;
      virtual int currPos() const = 0;
      virtual void moveToPos(int pos) = 0;
      virtual const E&amp; getValue() const = 0;
};
</code></li>
</ul>


<hr />

<ul>
<li>数组实现
<code>
  template &lt;typename E&gt; class AList: public List&lt;E&gt;{
  private:
      int maxSize;
      int listSize;
      int curr;
      E* listArray;   
  public:
      //初始化列表
      AList(int size = 100){
          maxSize = size;
          listSize = 0;
          curr = 0;
          listArray = new E[maxSize];
      }
      //构析函数，删掉数组，释放空间
      ~AList(){
          delete []listArray;
      }
      void clear(){
          delete []listArray;
          listSize = 0;
          curr = 0;
          listArray = new E[maxSize];
      }
      //把当前位置之后的数组向后移动一位，再插入
      void insert(const E&amp; it){
          for(int i = listSize; i &gt; curr; i--)
              listArray[i] = listArray[i-1];
          //move back the array from the current position
          listArray[curr] = it;
          listSize++;
      }
      //直接在最后增加item
      void append(const E&amp; it){
          listArray[listSize++] = it;
      }
      //记录当前的数组索引的指向的数据，把数组向前移动一位
      E remove(){
          E it = listArray[curr];
          for(int i = curr; i &lt; listSize - 1; i++){
              listArray[i] = listArray[i + 1];
          }
          listSize--;
          return it;
      }
      void moveToStart(){
          curr = 0;
      }
      void moveToEnd(){
          curr = listSize;
      }
      void prev(){
          if(curr &gt; 0)
              curr--;
      }
      void next(){
          if(curr &lt; listSize)
              curr++;
      }
      int length(){
          return listSize;
      }
      int currPos() const{
          return curr;
      }
      void moveToPos(int pos){
          pos = curr;
      }
      const E&amp; getValue() const{
          return listArray[curr];
      }
  };
</code></li>
</ul>


<hr />

<ul>
<li>链式实现
<code>
  template &lt;typename E&gt; class Link{
  public:
      E element;
      Link *next;
      Link(const E&amp; elemval, Link *nextval = NULL){
          element = elemval;
          next = nextval;
      }
      Link(Link *nextval = NULL){
          next = nextval;
      }
};
template &lt;typename E&gt; class LList: public List&lt;E&gt;{
  private:
      Link&lt;E&gt; *head;
      Link&lt;E&gt; *tail;
      Link&lt;E&gt; *curr;
      int count;
      void init(){
          curr = tail = head = new Link&lt;E&gt;;
          count = 0;
      }
      void removeall(){
          while(head != NULL){
              curr = head;
              head = head -&gt; next;
              delete curr;
          }
      }
  public:
      LList(int size=100){
          init();
      }
      ~LList(){
          removeall();
      }
      void clear(){
          removeall();
          init();
      }
      void insert(const E&amp; it){
          //给要增加的节点初始化
          curr -&gt; next = new Link&lt;E&gt;(it, curr -&gt; next);
          //如果要curr指针就是再末尾
          //那么把curr的下一个赋给tail
          if(tail == curr)
              tail = curr -&gt; next;
          count++;
      }
      void append(const E&amp; it){
          //直接把末尾指针的next指向新建的link
          tail = tail -&gt; next = new Link&lt;E&gt;(it, NULL);
          count++;
      }
      //注意，这里要删除的节点叫做curr-&gt;next
      E remove(){
          //先把要删除的node的值存起来
          E it = curr -&gt; next -&gt; element;
          //用temp存一下要删除的节点
          Link&lt;E&gt; *temp = curr -&gt; next;
          //如果这个要删除的点是末尾，那么把末尾前一个节点赋给tail
          if(tail == curr -&gt; next)
              tail = curr;
          //否则，把要删除的节点的前一个节点的next指向要删除节点的下一个
          curr -&gt; next = curr -&gt; next -&gt; next;
          delete temp;
          count--;
          return it;
      }
      void moveToStart(){
          curr = head;
      }
      void moveToEnd(){
          curr = tail;
      }
      void prev(){
          if(curr == head)
              return ;
          Link&lt;E&gt; *temp = head;
          //向左移动一个单位
          //做法是先用temp存一个head，然后向右找，直到找到curr的前一个，然后把curr的前一个赋给curr
          while(temp -&gt; next != curr)
              temp = temp -&gt; next;
          curr = temp;
      }
      void next(){
          //只要curr指针不是tail，那么就向后移动
          if(curr != tail)
              curr = curr -&gt; next;
      }
      int length(){
          return count;
      }
      int currPos() const{
          Link&lt;E&gt; *temp = head;
          //用temp指针存head，然后依次向后遍历，并且每次后移count+1
          int i;
          for(i = 0; i &lt; count; i++){
              temp = temp -&gt; next;
          }
          return i;
      }
      void moveToPos(int pos){
          curr = head;
          //先把current的指针指向head
          //然后一直向后移动，直到pos次
          for(int i = 0; i &lt; pos; i++){
              curr = curr -&gt; next;
          }
      }
      const E&amp; getValue() const{
          return curr -&gt; next -&gt; element;
      }
  };
</code></li>
</ul>


<hr />

<h4>栈</h4>

<ul>
<li>数组实现
<code>
class Astack{
  private:
      int maxSize;
      int top;
      int *array;
  public:
      Astack(int size = 100){
          maxSize = size;
          top = 0;
          array = new int[size];
      }
      ~Astack(){
          delete []array;
      }
      void clear(){
          top = 0;
      }
      void push(int item){
          array[top++] = item;
      }
      int pop(){
          int temp = array[top];
          return array[--top];
      }
      int getTop(){
          return array[top - 1];
      }   
};
int main(){
  Astack a;
  a.push(1);
  cout&lt;&lt;a.getTop();
  a.pop();
  cout&lt;&lt;a.getTop();
  return 0;
}
</code></li>
</ul>


<hr />

<h4>队列</h4>

<ul>
<li>数组实现
<code>
class Aqueue{
  private:
      int front;
      int rear;
      int maxSize;
      int *array;
  public:
      Aqueue(int size = 100){
          maxSize = size;
          front = rear = 0;
          array = new int[size];
      }
      ~Aqueue(){
          delete [] array;
      }
      void enqueue(int item){
          array[rear] = item;
          rear = (rear + 1)%maxSize;
      }
      int dequeue(){
          int temp = array[front];
          front = (front + 1)%maxSize;
          array[front] = 0;
          return temp;
      }
      const int getFrontValue(){
          return array[front];
      }
};
int main(){
  Aqueue q;
  q.enqueue(1);
  cout&lt;&lt;q.getFrontValue()&lt;&lt;endl;
  q.dequeue();
  cout&lt;&lt;q.getFrontValue();
  return 0;
}
</code></li>
</ul>


<h4>二叉树</h4>

<ul>
<li>遍历</li>
<li><p>前序遍历
<code>
      void preorder(Node *root){
          if(root == NULL){
              return ;
          }
          cout&lt;&lt;root-&gt;value;
          preorder(root -&gt; left);
          preorder(root -&gt; right);
      }
</code></p></li>
<li><p>中序遍历
<code>
      void inorder(Node *root){
          if(root == NULL){
              return ;
          }
          inorder(root -&gt; left);
          cout&lt;&lt;root -&gt; value;
          inorder(root -&gt; right);
      }
</code></p></li>
<li><p>后序遍历
<code>
      void postorder(Node *root){
          if(root == NULL){
              return ;
          }
          postorder(root -&gt; left);
          postorder)root -&gt; right);
          cout&lt;&lt;root -&gt; value;
      }
</code></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
