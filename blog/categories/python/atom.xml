<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-02-28T23:21:13-05:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linkedin_api_example]]></title>
    <link href="http://pbking1.github.com/blog/2015/02/12/linkedin-api-example/"/>
    <updated>2015-02-12T14:51:14-05:00</updated>
    <id>http://pbking1.github.com/blog/2015/02/12/linkedin-api-example</id>
    <content type="html"><![CDATA[<ul>
<li>we can use the RESTFUL api to get some information in linkedin

<ul>
<li><a href="https://apigee.com/console/linkedin">https://apigee.com/console/linkedin</a>

<ul>
<li>this is a online simluator to perform RESTFUL api of linkedin</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>and the sample code below is using the linkedin package from thrid party

<ul>
<li>you can download the package using the following link

<ul>
<li><a href="https://pypi.python.org/pypi/python-linkedin/4.0">https://pypi.python.org/pypi/python-linkedin/4.0</a></li>
<li><a href="https://github.com/ozgur/python-linkedin">https://github.com/ozgur/python-linkedin</a></li>
</ul>
</li>
</ul>
</li>
<li>code

<ul>
<li>the following code can produce some result

<ul>
<li>but I have some problem in using the search api

<ul>
<li>application.search_profile(selectors=[{&lsquo;people&rsquo;: [&lsquo;first-name&rsquo;, &lsquo;last-name&rsquo;]}], params={&lsquo;keywords&rsquo;: &lsquo;apple microsoft&rsquo;})</li>
</ul>
</li>
<li>Search URL is &lsquo;<a href="https://api.linkedin.com/v1/people-search:">https://api.linkedin.com/v1/people-search:</a>(people:(first-name,last-name))?keywords=apple%20microsoft&rsquo;</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<h1>! /usr/bin/env python</h1>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>CONSUMER_KEY = &lsquo;xxxxxxx&rsquo;     # This is api_key
CONSUMER_SECRET = &lsquo;xxxxxxx&rsquo;   # This is secret_key</p>

<p>USER_TOKEN = &lsquo;xxxxxxx&rsquo;   # This is oauth_token
USER_SECRET = &lsquo;xxxxxxx&rsquo;   # This is oauth_secret
RETURN_URL = &lsquo;<a href="http://localhost:8000">http://localhost:8000</a>&rsquo;</p>

<p>from linkedin import linkedin
from oauthlib import *
from urllib2 import *
import urllib2
from json import dumps, loads</p>

<h1>Define CONSUMER_KEY, CONSUMER_SECRET,</h1>

<h1>USER_TOKEN, and USER_SECRET from the credentials</h1>

<h1>provided in your LinkedIn application</h1>

<h1>Instantiate the developer authentication class</h1>

<p>authentication = linkedin.LinkedInDeveloperAuthentication(CONSUMER_KEY, CONSUMER_SECRET,</p>

<pre><code>                                                  USER_TOKEN, USER_SECRET, 
                                                  RETURN_URL, linkedin.PERMISSIONS.enums.values())
</code></pre>

<h1>Pass it in to the app&hellip;</h1>

<p>application = linkedin.LinkedInApplication(authentication)</p>

<p>print application.get_profile()</p>

<p>print application.get_profile(selectors=[&lsquo;id&rsquo;, &lsquo;first-name&rsquo;, &lsquo;last-name&rsquo;, &lsquo;location&rsquo;, &lsquo;distance&rsquo;, &lsquo;num-connections&rsquo;, &lsquo;skills&rsquo;, &lsquo;educations&rsquo;])</p>

<p>print application.search_company(selectors=[{&lsquo;companies&rsquo;: [&lsquo;name&rsquo;, &lsquo;universal-name&rsquo;, &lsquo;website-url&rsquo;]}], params={&lsquo;keywords&rsquo;: &lsquo;apple microsoft&rsquo;})</p>

<h1>Search URL is <a href="https://api.linkedin.com/v1/company-search:">https://api.linkedin.com/v1/company-search:</a>(companies:(name,universal-name,webs</h1>

<p>print application.get_memberships(params={&lsquo;count&rsquo;: 20})</p>

<p>print application.get_companies(company_ids=[1035], universal_names=[&lsquo;apple&rsquo;], selectors=[&lsquo;name&rsquo;], params={&lsquo;is-company-admin&rsquo;: &lsquo;true&rsquo;})</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to install python package on redhat without root access]]></title>
    <link href="http://pbking1.github.com/blog/2014/11/01/how-to-install-python-package-on-redhat-without-root-access/"/>
    <updated>2014-11-01T00:01:13-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/11/01/how-to-install-python-package-on-redhat-without-root-access</id>
    <content type="html"><![CDATA[<h3>dependent of scrapy</h3>

<ul>
<li>remember that the scrapt need python2.7 to run</li>
<li>and there will be lots of package need to be installed</li>
</ul>


<h3>What to do when need to install python package on the server without root access</h3>

<ul>
<li>today I went through a problem that I want to have the python package installed on the high performance server but without the root access</li>
<li>and what I need to do is to install the python 2.7.3 first and then install all the package that scrapy need and finaly get scrapy run</li>
</ul>


<!--more-->


<h3>process I use</h3>

<ul>
<li>And one most important things you need to care about is that

<ul>
<li><p>first install python</p>

<ul>
<li>download the python first and compile the package of it.</li>
<li>then remember the export the python path to the .bashrc and .bash_profile</li>
<li>so that when you simply type <code>python</code> it will not use the default setting of the system</li>
<li>or you can type the absolute path of the python and use the python in the bin directory</li>
</ul>
</li>
<li><p>then install the scrapy from source</p>

<ul>
<li><p>but when you finish install the scrapy</p>

<ul>
<li>you will find out that it will tell you that you do not have some package like Twist , zope, interface and lxml, and cssselect</li>
<li>so what you need to do is to fix all this missing stuff</li>
<li>so use <code>wget</code> to download the source file of these missing file and install them</li>
</ul>
</li>
<li><p>the will comes the most difficult part</p>

<ul>
<li>when you try to install the lxml

<ul>
<li>you will find out that the system do not have the require of the lxml package

<ul>
<li>the libxml2 and libxslt</li>
<li>so what you need to do is to download all the file</li>
<li>and build it from source

<ul>
<li>and remember to add prefix and correct all the path error</li>
<li>and it would be a good way to output the error log to a file and analyze them using the <code>&gt;&amp; output file</code></li>
<li><strong>and do not hesitate to modify the Makefile or setup.py file when neccessary</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>also there are problem when try to install cffi and libffi

<ul>
<li>when compile the libffi library

<ul>
<li>remember to include the path of the libffi library when building the cffi

<ul>
<li>use <code>build_ext -l library_absolute_path -l library2_absolute_path</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>after install the scrapy successfully

<ul>
<li>use the scrapy executable file in the bin of the scrapy source code</li>
<li><code>python2.7 ./scrapy crawl linkedin.com</code></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014_indianapolis_redefined_hackathron]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/30/2014-indianapolis-redefined-hackathron/"/>
    <updated>2014-10-30T21:25:44-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/30/2014-indianapolis-redefined-hackathron</id>
    <content type="html"><![CDATA[<h3>The hackathron take 24 hours to write an app that can be used for attracting people to indianapolis</h3>

<ul>
<li>and I first design a python version of app</li>
<li>then I use bootstrap theme to develop a mobile compatible web app with php link to the mysql database.</li>
</ul>


<!--more-->


<h3>The code</h3>

<ul>
<li>I have already post the code in github</li>
<li><a href="https://github.com/pbking1/Intro-to-indy">https://github.com/pbking1/Intro-to-indy</a></li>
</ul>


<h3>The summary</h3>

<ul>
<li>using the bootstrap theme can minimise the work in the front end and make the development focus more on the back end logic or database.</li>
<li>talking to a mentor will definitaly help you develop a better software</li>
<li>read the description document carefully before coding</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python regular expression]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/03/python-regular-expression/"/>
    <updated>2014-10-03T13:00:03-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/03/python-regular-expression</id>
    <content type="html"><![CDATA[<h3>regular expression</h3>

<ul>
<li>use the match string

<ul>
<li>but not all the string can be matched</li>
</ul>
</li>
</ul>


<!--more-->


<h3>basic character in python</h3>

<p><code>
import re
</code>
&ndash; ordinary character</p>

<pre><code>- like re'test' will match the string test
</code></pre>

<ul>
<li>oral character

<ul>
<li>like . ^ $ * + ? {} [] \ | ()</li>
<li>like []

<ul>
<li>use to direct to a range of the string set</li>
<li><code>
s = r'abc'
re.findall(s, "aaaaaaaabc")
//use []
rt = "top tip tap twp tep"
r1 = r"t[io]p"
re.findall(r1, rt)
//output ['top'], ['tip']
r2 = r"t[^io]p"
re.findall(r2, rt)
//output ['tap'],['tep'], ['twp']
</code></li>
<li>and oral character is no use in the []</li>
<li>also can use <code>r'0-3'</code> replace <code>r'0123'</code>

<ul>
<li>use &lsquo;r&rsquo;[0-3a-cA-C]&lsquo;&rsquo; replace <code>r'[0123abcABC]'</code></li>
</ul>
</li>
</ul>
</li>
<li>like ^

<ul>
<li>use the match the head of the line</li>
<li><code>
s = r'^t'
st = 'tss'
//output ['t']
</code></li>
</ul>
</li>
<li>like $

<ul>
<li>use to match the end of the line</li>
</ul>
</li>
<li>like \

<ul>
<li>used if you want to transform the oral character into a original one</li>
<li>use &lsquo;^&rsquo; to make ^ as a original character</li>
<li>and can be used as

<ul>
<li>\d match [0-9]</li>
<li>\D match [^0-9]</li>
<li>\s match [\t\n\r\f\v]

<ul>
<li>means and empty character</li>
</ul>
</li>
<li>\S match [^\t\n\r\f\v]

<ul>
<li>means non empty character</li>
</ul>
</li>
<li>\w match [a-zA-Z0-9]</li>
<li>\W match [^a-zA-Z0-9]</li>
</ul>
</li>
</ul>
</li>
<li>like *

<ul>
<li>match multiple character</li>
<li>means repeat the character in front of the * for 0-many times</li>
<li><code>
r = r'ab*'
rt = 'abbbbbb'
re.findall(r, rt)
//output['abbbbbb']
</code></li>
</ul>
</li>
<li>like +

<ul>
<li>match the charter that appear more than one time</li>
</ul>
</li>
<li>like ?

<ul>
<li> match the charter that appear zero or one time</li>
<li>can be used as minimum match

<ul>
<li><code>r = r'ab+?'</code></li>
<li><code>rt = 'abbbbbb'</code></li>
<li>output the ab</li>
</ul>
</li>
</ul>
</li>
<li>like the {}

<ul>
<li>means that the character can be repeat how many times</li>
<li><code>
r = r'a{1,3}'
rt = 'aaaaa'
then can match a, aa, aaa
</code></li>
<li>{0,} == *</li>
<li>{1,} == +</li>
<li>{0,1} == ?</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>functions</h3>

<ul>
<li>compile the expression to speed up

<ul>
<li><code>
r = r'\d{3,4}-?\d{8}'
p_telephone = re.compile(r)
p_telephone.findall('010-12345678')
//output ['010-12345678']
</code></li>
<li>and you can add attribute while compile</li>
</ul>
</li>
<li><p>there are some normal functions</p>

<ul>
<li>match

<ul>
<li>only search from the front</li>
<li><code>
p_telephone.match('o010-12345678')
//output nothing because the 010-12345678 is not start from the begin
</code></li>
</ul>
</li>
<li>search

<ul>
<li>search the whole string</li>
<li>no matter where the number is , if you can find it, you can find it.</li>
</ul>
</li>
<li>findall</li>
<li>finditer

<ul>
<li>the same as findall but you need to use iter so that you can get the value</li>
</ul>
</li>
</ul>
</li>
<li><p>and there are sub(), subn(), split()</p>

<ul>
<li>sub()

<ul>
<li><code>
r = r'c..t'
re.sub(r, 'aaa', 'caat cast cccc')
//output 'aaa aaa cccc'
</code></li>
</ul>
</li>
<li>subn()

<ul>
<li>the difference between sub and subj is that subj provide a count of the how many stuff you replace</li>
<li><code>
r = r'c..t'
re.subn(r, 'aaa', 'caat cast cccc')
//output 'aaa aaa cccc', 2
</code></li>
</ul>
</li>
<li>split()

<ul>
<li>split the string using a regular express</li>
<li><code>
re.split(r'[\+\*\-]', '1+2-3*5')
//output ['1', '2', '3', '5']
</code></li>
</ul>
</li>
<li>use <code>dir(re)</code> to see what functions re have</li>
</ul>
</li>
</ul>


<h3>flags in re module</h3>

<table>
<thead>
<tr>
<th>flags </th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>dotall, S</td>
<td> let . match all the character contains \n</td>
</tr>
<tr>
<td>ignore case, I </td>
<td>make the match no sensitive about the uppercase and lowercase</td>
</tr>
<tr>
<td>locale, L </td>
<td> do locale-aware match, match the French or the other language</td>
</tr>
<tr>
<td>multiline, M </td>
<td> match multiline, affect ^ and $</td>
</tr>
<tr>
<td>verbose, X </td>
<td> can use the REs verbose status, and make the organise more clearly</td>
</tr>
</tbody>
</table>


<h3>devision</h3>

<ul>
<li>()</li>
<li><code>email = r'\w{3}@\w+(\.com|\.cn)'</code></li>
<li>use the () to divide the .com and .cn</li>
<li>so that we can use the regular form to match email address</li>
</ul>

]]></content>
  </entry>
  
</feed>
