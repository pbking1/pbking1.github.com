<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IOS | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2014-05-26T09:53:12+08:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zst Internship IOS Code Step2]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/23/zst-internship-ios-code-step2/"/>
    <updated>2014-05-23T15:21:09+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/23/zst-internship-ios-code-step2</id>
    <content type="html"><![CDATA[<h3>Here are the method added</h3>

<ul>
<li>I want to implement a button that used to went back to the main page if the user suddenly do not want to continue ordering the things

<ul>
<li>First

<ul>
<li>Go to Sections &ndash;> ButtonMacro.h

<ul>
<li>add <code>#define BACKTOMAINPAGE 13</code> at the end</li>
</ul>
</li>
<li>then go to Sections &ndash;> Buttons &ndash;> CreateButtom.m

<ul>
<li>add the following code</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```
else if (_type == BACKTOMAINPAGE)
{</p>

<pre><code>self.frame = CGRectMake(50, 50, 40, 44);
[self setTitle:@"返回主页" forState:UIControlStateNormal];
[self setTitle:@"返回主页" forState:UIControlStateHighlighted];
</code></pre>

<p>}</p>

<p>```</p>

<!--more-->


<ul>
<li>go to Controller &ndash;> 我 &ndash;> 应用推荐 &ndash;> OrderDetailViewController.m

<ul>
<li>and this is create a button on the right top corner and its function is to went back to the mainpage</li>
<li>add the following code in <code>viewdidload</code> function</li>
</ul>
</li>
</ul>


<p>```</p>

<pre><code>ButtonFactory *buttonFactory = [ButtonFactory factory];
UIButton *rightBtn = [buttonFactory createButtonWithType:BACKTOMAINPAGE];
[rightBtn addTarget:self action:@selector(gobacktomain:) forControlEvents:UIControlEventTouchUpInside];
UIBarButtonItem *rightBarItem = [[UIBarButtonItem alloc] initWithCustomView:rightBtn];
self.navigationItem.rightBarButtonItem = rightBarItem;
[rightBarItem release];
</code></pre>

<p><code>``
- add a new function called</code>gobacktomain`</p>

<pre><code>- this is a selector that used to find the main viewcontroller and jump to it.
- the code in it is
</code></pre>

<p>```</p>

<pre><code>- (void)gobacktomain:(id)paramSender{
    UIViewController *target = nil;
    for(UIViewController *controller in self.navigationController.viewControllers){
        if([controller isKindOfClass:[HomePageViewController class]]){
            target = controller;
        }
    }
    if(target){
        [self.navigationController popToViewController:target animated:YES];
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zst Internship IOS Code Step1]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/23/zst-internship-ios-code-step1/"/>
    <updated>2014-05-23T11:47:46+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/23/zst-internship-ios-code-step1</id>
    <content type="html"><![CDATA[<h3>In order to understand better about the code of the project in zst ios project, first list the folder</h3>

<ul>
<li>in the <code>huyihui</code> folder

<ul>
<li>image</li>
<li>Third party</li>
<li>Sections</li>
<li>Controller</li>
<li>Model</li>
<li>Public</li>
<li>AppDelegate.h</li>
<li>AppDelegate.m</li>
<li>Main.storyboard</li>
<li>ViewController.h</li>
<li>ViewController.m</li>
<li>Images.xcassets</li>
<li>Supporting Files</li>
<li>Products</li>
</ul>
</li>
<li>For the project is nearly finished, so I do not introduce the framework they use.</li>
</ul>


<!--more-->


<h3>First in the <code>Image</code> folder</h3>

<ul>
<li>There are following pics

<ul>
<li>the login picture, the registe picture, the personal center picture, the general picture, the shopping picture, the first page picture, the search picture</li>
</ul>
</li>
</ul>


<h3>Second in the <code>Third Party</code> folder</h3>

<ul>
<li>mainly used for the ailipay and the shared sdk</li>
<li>There is a class <code>AGViewDelegate</code> which is used for the sharing</li>
</ul>


<h3>Third in the <code>Section</code> folder</h3>

<ul>
<li><p>we can see the following</p>

<ul>
<li>ButtonFactory

<ul>
<li>ButtonFactory.h</li>
<li>ButtonFactory.m</li>
</ul>
</li>
<li>Buttons

<ul>
<li>CreateButton.h</li>
<li>CreateButton.m</li>
</ul>
</li>
<li>SectionFactory.h</li>
<li>SectionFactory.m</li>
<li>ButtonMacro.h</li>
</ul>
</li>
<li><p>And I think this folder is implement the <code>factory mode</code></p></li>
<li>and most of the button is implement in the <code>CreateButton.m</code> file</li>
</ul>


<h3>Fourth in the <code>Controller</code> folder</h3>

<ul>
<li>Here comes <code>the most important</code>one</li>
<li>we can see the following

<ul>
<li>BaseViewController.h</li>
<li>BaseViewController.m</li>
<li>Mediator

<ul>
<li>CoordinatingController.h</li>
<li>CoordinatingController.m</li>
</ul>
</li>
<li>login_and_registe

<ul>
<li><img src="/images/internship_zst/1.png"></li>
</ul>
</li>
<li>first_page

<ul>
<li>firstpageandmore(is a tableview that used to show more about the product)

<ul>
<li><img src="/images/internship_zst/2.png"></li>
</ul>
</li>
<li>shopping()

<ul>
<li><img src="/images/internship_zst/3.png"></li>
<li>(those that contrain cell.xib is use to define the layout of the cell of the tableview)</li>
</ul>
</li>
<li>detailsoftheproduct()

<ul>
<li><img src="/images/internship_zst/4.png"></li>
</ul>
</li>
<li>tuangou

<ul>
<li><img src="/images/internship_zst/5.png"></li>
</ul>
</li>
<li>preferential_ticket

<ul>
<li><img src="/images/internship_zst/6.png"></li>
</ul>
</li>
<li>HomePageViewController.h</li>
<li>HomePageViewController.m</li>
<li>HomePageViewController.xib</li>
<li>NewProductCollectionView.xib</li>
<li>HomeCollectionHeader0.xib</li>
<li>HomeCollectionHeader1.xib</li>
<li>HomeCollectionHeader2.xib</li>
<li>OrdinaryProductImageDetailCell.xib</li>
<li>ProductImageDetailCell.xib</li>
<li>ProductConstants.h</li>
</ul>
</li>
<li>search

<ul>
<li><img src="/images/internship_zst/7.png"></li>
</ul>
</li>
<li>shoppingcart

<ul>
<li><img src="/images/internship_zst/8.png"></li>
</ul>
</li>
<li>comment_and_share

<ul>
<li><img src="/images/internship_zst/9.png"></li>
</ul>
</li>
<li>me

<ul>
<li>AppRecommand

<ul>
<li><img src="/images/internship_zst/10.png"></li>
</ul>
</li>
<li><img src="/images/internship_zst/11.png"></li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Fifth is the <code>Model</code></h3>

<ul>
<li>we can see the following</li>
<li><img src="/images/internship_zst/12.png"></li>
</ul>


<h3>Sixth is the <code>Public</code></h3>

<ul>
<li>we can see the following</li>
<li><img src="/images/internship_zst/13.png"></li>
<li><img src="/images/internship_zst/14.png"></li>
<li><img src="/images/internship_zst/15.png"></li>
<li><img src="/images/internship_zst/16.png"></li>
<li><img src="/images/internship_zst/17.png"></li>
<li><img src="/images/internship_zst/18.png"></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use CocoaPods to Management Dependence in Xcode5]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/20/use-cocoapods-to-management-dependence-in-xcode5/"/>
    <updated>2014-05-20T20:05:22+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/20/use-cocoapods-to-management-dependence-in-xcode5</id>
    <content type="html"><![CDATA[<h3>What is CocoaPods?</h3>

<ul>
<li>CocoaPods is a tools used to management the Third party code in IOS project</li>
</ul>


<h3>How to install it?</h3>

<ul>
<li>use the ruby gem to install

<ul>
<li><code>sudo gem install cocoapods</code></li>
<li>and the ruby should be above ruby 2.0</li>
<li><code>pod setup</code>

<ul>
<li>this step is download the info in the ~/.cocoapods</li>
<li>and you can use <code>du -sh *</code> to see how it process</li>
</ul>
</li>
<li>if the gem is too old

<ul>
<li>use <code>sudo gem update --system</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>most inportantly

<ul>
<li>for the ruby&rsquo;s software source is using the Amazon could and will be block by the great fire wall.</li>
<li><p>so you need to change to ruby temperatly</p>

<p>  <code>
  gem sources --remove https://rubygems.org/
  gem sources -a http://ruby.taobao.org/
 </code></p></li>
<li>after that

<ul>
<li>you can install the pod</li>
</ul>
</li>
</ul>
</li>
<li>and when you need to use the pod

<ul>
<li>change back to the origin source</li>
</ul>
</li>
</ul>


<h3>how to use it?</h3>

<ul>
<li>we will need a file called <code>Podfile</code>

<ul>
<li>and the content of it is
<code>
platform :ios, '7.0'
pod 'Mantle'
pod 'LBBlurredImage'
pod 'TSMessages'
pod 'ReactiveCocoa'
</code></li>
<li>then press <code>ctrl + O</code> and rename into <code>Podfile</code></li>
<li>press <code>ctrl + x</code> to exit</li>
</ul>
</li>
<li><p>after that</p>

<ul>
<li>use <code>pod install</code>

<ul>
<li>and you will see
<code>
$ pod install
Analyzing dependencies
CocoaPods 0.28.0 is available.
Downloading dependencies
Installing HexColors (2.2.1)
Installing LBBlurredImage (0.1.0)
Installing Mantle (1.3.1)
Installing ReactiveCocoa (2.1.7)
Installing TSMessages (0.9.4)
Generating Pods project
Integrating client project
[!] From now on use `SimpleWeather.xcworkspace`.
</code></li>
</ul>
</li>
</ul>
</li>
<li><p>and the Cocoapods will create a xxxxx.xcworkspce</p></li>
</ul>


<h3>Something else</h3>

<ul>
<li>after you use <code>pod install</code>

<ul>
<li>a file called <code>Podfile.lock</code> will be generated and this file should not be add into the .gitignore.</li>
<li>for this file will lock on all the version of the dependences</li>
<li>and you will not be able to change the version of these dependences even you use <code>pod install</code></li>
<li>and only the command <code>pod update</code> will work.</li>
</ul>
</li>
</ul>


<h3>generate the doc</h3>

<ul>
<li>use <code>brew install appledoc</code> to generate the Third party library doc</li>
</ul>


<h3>search the library you want in the cocapods library</h3>

<ul>
<li>use <code>pod search library_name</code>

<ul>
<li>like <code>pod search json</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Xib Program in Xcode5]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/20/build-a-xib-program-in-xcode5/"/>
    <updated>2014-05-20T19:45:48+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/20/build-a-xib-program-in-xcode5</id>
    <content type="html"><![CDATA[<ul>
<li>由于xcode5里面默认使用了storyboard这种视图控制器，因此有以下的解决方案

<ul>
<li>1.新建工程&mdash;ios&mdash;-Application&mdash;-Single View Application</li>
<li>2.将自动生成的Main.storyboard,ViewController.h,ViewController.m这三个文件彻底删除</li>
<li>3.在项目设置里面,将MainInterface这一项中的内容删除置为空</li>
<li>4.新建一个类,继承UIViewController,并且选中WithXIB for user interface.并且把内存计数器改为MRC.(改成MRC的方法就是再build setting里面找automatic, 然后把Object-C Automatic Reference Counting改成NO)
<!--more--></li>
<li>5.在AppDelegate中,导入新建的类:ViewController.h</li>
<li>6.在AppDelegate.h中,添加属性:@property(strong,nonatomic)ViewController*viewController;</li>
<li>7.在AppDelegate.m中,添加以下代码:
<code>
self.window= [[[UIWindowalloc]initWithFrame:[[UIScreenmainScreen]bounds]]autorelease];
self.viewController= [[[PT4ViewControlleralloc]initWithNibName:@"PT4ViewController"bundle:nil]autorelease];
self.window.rootViewController=self.viewController;
[self.windowmakeKeyAndVisible];
</code></li>
<li>8.处理好内存分配以及dealloc方法.
```</li>
<li>(void)dealloc
{
  [<em>window release];
  [</em>viewController release];
  [super dealloc];
}
```</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perceptual Hash Algorithm in Objective C]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/19/perceptual-hash-algorithm-in-objective-c/"/>
    <updated>2014-05-19T17:47:06+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/19/perceptual-hash-algorithm-in-objective-c</id>
    <content type="html"><![CDATA[<h4>此文为借鉴阮一峰2011年和2013年发布的相似图片搜索原理</h4>

<ul>
<li>原文已经写得很好了，所以我只是把它整理了一下，学习学习~~</li>
</ul>


<h3>又名感知哈希算法</h3>

<ul>
<li>主要思想是

<ul>
<li>对每个图片生成一个“指纹”字符串，然后比较不同图片的指纹。结果越接近，就说明图片越相似</li>
</ul>
</li>
<li>这种算法的优点是简单快速，不收图片大小缩放的影响

<ul>
<li>缺点是图片内容不能变更。如果在图片上加几个文字，他就认不出来了</li>
</ul>
</li>
<li>因此最佳应用应该是根据缩略图找出原图</li>
</ul>


<!--more-->


<ul>
<li>算法样例

<ul>
<li>第一步 缩小尺寸

<ul>
<li>把图片缩小大8*8的尺寸，总共有64个像素。这一步的作用是去除图片的细节，只保留结构，明暗等基本信息，摒弃不同的尺寸，比例带来的图片差异</li>
</ul>
</li>
<li>第二步 简化色彩

<ul>
<li>将缩小之后的图片转为64级灰度。也就是说，所有的像素点总共之后64中颜色</li>
</ul>
</li>
<li>第三步 计算平均值

<ul>
<li>计算所有64个像素的灰度平均值</li>
</ul>
</li>
<li>第四步 比较像素的灰度

<ul>
<li>把每个像素的灰度，和平均值进行比较。大于或者等于平均值的，记为1；小于平均值，记为0；</li>
</ul>
</li>
<li>第五步 计算hash值

<ul>
<li>把上一步比较的结果，组合在一起，就构成一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片采用同样的次序就行了。</li>
<li>hash_value = 127ysje82ewrdfw3(16个数字)</li>
<li>这个值也就是指纹</li>
<li>得到指纹之后就可以对比不同的图片，看看64为中有多少位是不一样的。理论上，这等同与计算”汉明距离“。如果不相同的数据位不超过5，这就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>网上其他两种类似的算法</h3>

<h4>颜色分布法</h4>

<ul>
<li>每张图片都可以生成颜色分布的直方图。如果两种那个图片的直方图很接近，那么就可以认为他们很相似</li>
<li>由于任何一种颜色都是有红绿蓝三原色（RGB）构成的，所以可以画出四幅图（三原色直方图和最后合成的直方图）</li>
<li>如果每种原色都可以取256个值，那么整个颜色空间共有1600万种颜色（256的三次方）。针对这1600万种颜色比较直方图，计算量实在太大了，因此需要采用简化方法。可以将0～255分成四个区：0～63为第0区，64～127为第1区，128～191为第2区，192～255为第3区。这意味着红绿蓝分别有4个区，总共可以构成64种组合（4的3次方）。</li>
<li>任何一种颜色必然属于这64种组合中的一种，这样就可以统计每一种组合包含的像素数量。</li>
<li><img src="/images/oc_algorithm1.png"></li>
<li>上图是某张图片的颜色分布表，将表中最后一栏提取出来，组成一个64维向量(7414, 230, 0, 0, 8, &hellip;, 109, 0, 0, 3415, 53929)。这个向量就是这张图片的特征值或者叫"指纹"。</li>
<li>于是，寻找相似图片就变成了找出与其最相似的向量。这可以用皮尔逊相关系数或者余弦相似度算出。</li>
</ul>


<h4>内容特征法</h4>

<ul>
<li>除了颜色构成还可以从比较图片内容的相似性入手</li>
<li>首先

<ul>
<li>把图片装成一张比较小的灰度图片，假设为50*50像素。然后，确定一个阀值，把灰度图片转成黑白图片</li>
</ul>
</li>
<li>其次

<ul>
<li>如果两张图片很相似，那么他们的黑白轮廓应该是相近的。因此，问题就变成了如何去顶一个合理的阀值，正确的呈现图片中的轮廓</li>
</ul>
</li>
<li>因此

<ul>
<li><strong>前景色和背景色反差越大，轮廓就越明显</strong></li>
<li>这意味着，如果我们找到一个值，可以使得前景色和背景色格子的“类内差异最小”，或者“类间差异最大”，那么这个值就是理想的阀值</li>
</ul>
</li>
<li>后来因为有个如本的学者叫大津展之证明了两个是一样的，可以用他的“大津法”来求阀值

<ul>
<li>假定一张图片共有n个像素，其中灰度值小于阈值的像素为 n1 个，大于等于阈值的像素为 n2 个（ n1 + n2 = n ）。w1 和 w2 表示这两种像素各自的比重。

<ul>
<li>w1 = n1 / n</li>
<li>w2 = n2 / n</li>
</ul>
</li>
<li>再假定，所有灰度值小于阈值的像素的平均值和方差分别为 μ1 和 σ1，所有灰度值大于等于阈值的像素的平均值和方差分别为 μ2 和 σ2。于是，可以得到

<ul>
<li>类内差异 = w1(σ1的平方) + w2(σ2的平方)
　　      &ndash; 类间差异 = w1w2(μ1-μ2)^</li>
</ul>
</li>
<li>可以证明，这两个式子是等价的：得到"类内差异"的最小值，等同于得到"类间差异"的最大值。不过，从计算难度看，后者的计算要容易一些。</li>
<li>下一步用"穷举法"，将阈值从灰度的最低值到最高值，依次取一遍，分别代入上面的算式。使得"类内差异最小"或"类间差异最大"的那个值，就是最终的阈值.</li>
<li><p>有了50x50像素的黑白缩略图，就等于有了一个50x50的0-1矩阵。矩阵的每个值对应原图的一个像素，0表示黑色，1表示白色。这个矩阵就是一张图片的特征矩阵。</p></li>
<li><p>两个特征矩阵的不同之处越少，就代表两张图片越相似。这可以用"异或运算"实现（即两个值之中只有一个为1，则运算结果为1，否则运算结果为0）。对不同图片的特征矩阵进行"异或运算"，结果中的1越少，就是越相似的图片。</p></li>
</ul>
</li>
</ul>


<h3>objective c源码</h3>

<ul>
<li>tphash.h</li>
</ul>


<p>```</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface tphash : NSObject</p>

<ul>
<li>(uint64_t)ptHash:(UIImage*)image;</li>
<li>(int)hamdistance:(uint64_t)x with:(uint64_t) y;</li>
<li>(UIImage <em>)scaleImage:(UIImage </em>)image toSize(CGSize)newSize;</li>
<li>(uint64_t <em>) convertTogreyscale64Array: (UIImage </em>)i;</li>
</ul>


<p>@end
```</p>

<ul>
<li>tphash.m</li>
</ul>


<p>```</p>

<h1>import &ldquo;tphash.h&rdquo;</h1>

<p>@implementation tphash</p>

<ul>
<li><p>(uint64_t)ptHash:(UIImage <em>)image{
  image = [self scaleImage:image toSize:CGSizeMake(8,8)];
  uint64_t</em> imageArray = [self convertTogreyscale64Array:image];
  int sum = 0;
  for(int i = 0; i &lt; 64; i++){
      sum += imageArray[i];
  }
  uint8_t avg = sum/64;
  uint64_t ret = 0;
  for(int i = 0; i &lt; 64; i++){
      if(imageArray[i] >= avg){
          ret++;
      }
      ret &lt;&lt;= 1;
  }
  return ret;
}</p></li>
<li><p>(int)hamdistance:(uint64_t)x with:(uint64_t) y{
  unsigned dist = 0, val = x<sup>y</sup>;
  while (val) {
      ++dist;
      val &amp;= val &ndash; 1;
  }
}</p></li>
<li><p>(UIImage <em>)scaleImage:(UIImage </em>)image toSize(CGSize)newSize{
  UIGraphicsBeginIMageContextWithOptions(newSize, NO, 0.0);
  [image drawInRect:CGRectMake(0,0,newSize.width, newSize.height)];
  UIImage *newImage = UIGraphicsBeginImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return newImage;
}</p></li>
<li><p>(uint64_t <em>) convertTogreyscale64Array: (UIImage </em>)i{
  int kRed = 1;
  int kGreen = 2;
  int kBlue = 4;</p>

<p>  int colors = kGreen;
  int m_width = i.size.width;
  int m_height = i.size.height;</p>

<p>  uint32_t <em>rgbImage = (uint32_t </em>) malloc(m_width * meight * sizeof(uint32_t));
  CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
  CGContextRef context = CGBitmapContextCreate(rgbImage, m_width, m_height, 8, m_width * 4, colorSpace, kCGBitmapByteOrder32Little | kCGImageAlphaNoneSkipLast);
  CGContextSetInterpolationQuality(context, kCGInterpolationHigh);
  CGContextSetShouldAntialias(context, NO);
  CGContextDrawImage(context, CGRectMake(0, 0, m_width, m_height), [i CGImage]);
  CGContextRelease(context);
  CGColorSpaceRelease(colorSpace);</p>

<p>  uint8_t <em>m_imageData = (uint8_t </em>) malloc(m_width * m_height);
  for(int y = 0; y &lt; m_height; y++) {
      for(int x = 0; x &lt; m_width; x++) {
          uint32_t rgbPixel=rgbImage[y<em>m_width+x];
          uint32_t sum=0,count=0;
          if (colors &amp; kRed) {sum += (rgbPixel>>24)&255; count++;}
          if (colors &amp; kGreen) {sum += (rgbPixel>>16)&255; count++;}
          if (colors &amp; kBlue) {sum += (rgbPixel>>8)&255; count++;}
          m_imageData[y</em>m_width+x]=sum/count/4;
      }
  }
  free(rgbImage);
  return m_imageData;
}
@end</p></li>
</ul>


<p>```</p>
]]></content>
  </entry>
  
</feed>
