<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IOS | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2014-05-14T13:26:11+08:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IOS Tutorial 1]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/14/ios-tutorial-1/"/>
    <updated>2014-05-14T13:11:01+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/14/ios-tutorial-1</id>
    <content type="html"><![CDATA[<ul>
<li>1.一点基本语法</li>
<li>用NSLog打印，代替printf（也是可以用的）</li>
<li>用NSDate来获取时间</li>
<li><p>用NSData来把数据char*转成string存起来</p></li>
<li><p>源码
```</p>

<h1>import &lt;Foundation/Foundation.h></h1></li>
</ul>


<p>int main(int argc, const char * argv[])
{</p>

<pre><code>@autoreleasepool {

    // insert code here...
    NSLog(@"Hello, World!");

}
int i;
for(i = 0; i &lt;= 5; i++)
    NSLog(@"%d\n", i);

NSDate *yesterday = [NSDate dateWithTimeIntervalSinceNow:-(24*60*60)];
NSLog(@"yesterday is %@", yesterday);

NSDate *tomorrow = [NSDate dateWithTimeIntervalSinceNow:+(24*60*60)];
NSLog(@"tomorrow is %@", tomorrow);

const char *string = "Hi this is pb";
NSData *data = [NSData dataWithBytes:string length:strlen(string) + 1];
NSLog(@"data is %@", data);
NSLog(@"%lu Bytes string is '%s'", (unsigned long)[data length], [data bytes]);
return 0;
</code></pre>

<p>}
```</p>

<ul>
<li><p>2.线程的同步与锁
　　- 要说明线程的同步与锁，最好的例子可能就是多个窗口同时售票的售票系统了。我们知道在java中，使用synchronized来同步，而iphone虽然没有提供类似java下的synchronized关键字，但提供了NSCondition对象接口。</p>

<ul>
<li>查看NSCondition的接口说明可以看出，NSCondition是iphone下的锁对象，所以我们可以使用NSCondition实现iphone中的线程安全。这是来源于网上的一个例子：</li>
</ul>
</li>
<li><p>2.多个窗口同时售票的售票系统代码</p></li>
<li>AppDelegate.h</li>
</ul>


<p>```</p>

<h1>import &lt;Cocoa/Cocoa.h></h1>

<p>@interface AppDelegate : NSObject <NSApplicationDelegate>{</p>

<pre><code>int tickets;
int count;
NSThread *ticketThreadone;
NSThread *ticketThreadtwo;
NSCondition *ticketsCondition;
NSWindow *windows;
</code></pre>

<p>}</p>

<p>@property (assign) IBOutlet NSWindow *window;</p>

<p>@end</p>

<p>```</p>

<ul>
<li>AppDelegate.cpp</li>
</ul>


<p>```</p>

<h1>import &ldquo;AppDelegate.h&rdquo;</h1>

<p>@implementation AppDelegate
@synthesize window;</p>

<ul>
<li><p>(void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
  tickets = 100;
  count = 0;</p>

<p>  ticketsCondition = [[NSCondition alloc] init]; //初始化锁对象
  ticketThreadone = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil]; //初始化线程1
  [ticketThreadone setName:@&ldquo;Thread-1&rdquo;];
  [ticketThreadone start];</p>

<p>  ticketThreadtwo = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];  //初始化线程2
  [ticketThreadtwo setName:@&ldquo;Thread-2&rdquo;];
  [ticketThreadtwo start];</p>

<p>  [window makeKeyWindow];  //出错了，无法在窗口中运行，只能在命令行中运行，不知道为什么？求知道的筒子解答下~</p></li>
</ul>


<p>}</p>

<ul>
<li><p>(void)run{
  while(TRUE){
      [ticketsCondition lock];
      if(tickets > 0)
      {
          [NSThread sleepForTimeInterval:0.5];
          count = 100 &ndash; tickets;
          NSLog(@&ldquo;current tickets count are: %d, sell %d, thread name: %@&rdquo;, tickets, count, [[NSThread currentThread] name]);
          tickets&mdash;;
      }else
      {
          break;
      }
      [ticketsCondition unlock];
  }
}</p></li>
<li><p>(void)dealloc{
  [ticketThreadone release];  //释放内存
  [ticketThreadtwo release];
  [ticketsCondition release];
  [window release];
  [super dealloc];
}</p></li>
</ul>


<p>@end</p>

<p>```</p>

<ul>
<li>Trouble shooting</li>
<li>1.ARC forbids explicit message send of &lsquo;release&rsquo;
&lsquo;release&rsquo; is unavailable: not available in automatic reference counting mode

<ul>
<li>错误原因：因为我们设置了用ARC来管理内存释放，我们却又调用了release方法去释放对象。</li>
<li>(From the Internet)

<ul>
<li>ARC是iOS 5推出的新功能，全称叫 ARC(Automatic Reference Counting)。简单地说，就是代码中自动加入了retain/release，原先需要手动添加的用来处理内存管理的引用计数的代码可以自动地由编译器完成了。该机制在 iOS 5/ Mac OS X 10.7 开始导入，利用 Xcode4.2 可以使用该机制。简单地理解ARC，就是通过指定的语法，让编译器(LLVM 3.0)在编译代码时，自动生成实例的引用计数管理部分代码。有一点，ARC并不是GC，它只是一种代码静态分析（Static Analyzer）工具。</li>
</ul>
</li>
<li>how to solve it?

<ul>
<li>找到项目中的Build setting

<ul>
<li>把<code>Objective-C Automatic Reference</code>从YES改成NO</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Keybroad Topdown]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/14/ios-keybroad-topdown/"/>
    <updated>2014-05-14T10:10:47+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/14/ios-keybroad-topdown</id>
    <content type="html"><![CDATA[<h3>How to deal with the problem that the keybroad will not disappear?</h3>

<ul>
<li>In IOS7</li>
<li>add <code>- (IBAction)View_TouchDown:(id)sender</code> in ViewController.h</li>
<li>add
```</li>
<li>(IBAction)View_TouchDown:(id)sender
{
  [[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];
}</li>
</ul>


<p><code>``
- in the ViewController.m
- And go to the iphone storybroad and set the background view's **Custom class** into</code>UIControl`.</p>

<pre><code>- pull the `Top down` to the back ground and select *View_TouchDown*.
</code></pre>
]]></content>
  </entry>
  
</feed>
