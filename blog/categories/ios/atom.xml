<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IOS | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-02-11T23:05:00-05:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IOS 报表类库（trial 30days）]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/25/ios-bao-biao-lei-ku-%28trial-30days%29/"/>
    <updated>2014-06-25T04:25:40-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/25/ios-bao-biao-lei-ku-(trial-30days)</id>
    <content type="html"><![CDATA[<h3>一个非常容易使用的报表类库</h3>

<ul>
<li>NChart3D

<ul>
<li>但是只能免费使用30天</li>
<li>并且经过真机调试

<ul>
<li>效果做得很好，除了不能点击某个地方显示具体信息之外其他都做得很好</li>
<li>比如可以方法缩小，左右拖，平移旋转都行</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>在AppDelegate.m里面添加如下
```

<h1>import &ldquo;AppDelegate.h&rdquo;</h1>

<h1>import &ldquo;NChart3D/NChart3D.h&rdquo;</h1>

<h1>import &ldquo;ViewController.h&rdquo;</h1></li>
</ul>


<p>@implementation AppDelegate
{</p>

<pre><code>UIWindow *m_window;
</code></pre>

<p>}
@synthesize window = m_window;</p>

<ul>
<li><p>(BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{
  m_window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
  m_window.userInteractionEnabled = YES;
  m_window.multipleTouchEnabled = YES;
  [m_window makeKeyAndVisible];
  m_window.rootViewController = [[ViewController new] autorelease];
  // Override point for customization after application launch.
  return YES;
}
```</p></li>
<li><p>在Viewcontroller.h里面添加如下</p></li>
</ul>


<p>```</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &ldquo;NChart3D/NChart3D.h&rdquo;</h1>

<p>@interface ViewController : UIViewController<NChartSeriesDataSource></p>

<p>@end
```</p>

<ul>
<li>在Viewcontroller.m里面添加如下</li>
</ul>


<p>```</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &ldquo;NChart3D/NChart3D.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController
{</p>

<pre><code>NChartView *m_view;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)dealloc
{
  [m_view release];
  [super dealloc];
}</p></li>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];
  // Do any additional setup after loading the view, typically from a nib.
  m_view = [[NChartView alloc] initWithFrame:CGRectZero];
  m_view.chart.licenseKey = @&ldquo;&rdquo;;
  m_view.chart.cartesianSystem.margin = NChartMarginMake(10.0f, 10.0f, 10.0f, 20.0f);
  m_view.chart.shouldAntialias = YES;
  NChartColumnSeries *serires = [[NChartColumnSeries new] autorelease];
  serires.brush = [NChartSolidColorBrush solidColorBrushWithColor:[UIColor colorWithRed:0.0 green:0.7 blue:0.4 alpha:1.0]];
  serires.dataSource = self;
  [m_view.chart addSeries:serires];
  [m_view.chart updateData];
  self.view = m_view;   //使用新建的view
}</p></li>
<li><p>(NSArray <em>)seriesDataSourcePointsForSeries:(NChartSeries </em>)series
{
  NSMutableArray *result = [NSMutableArray array];
  for(int i = 0; i &lt; 10; i++)
      [result addObject:[NChartPoint pointWithState:[NChartPointState pointStateAlignedToXWithX:i Y:(rand()%30) + 1]forSeries:series]];
  return result;
}</p></li>
<li><p>(NSString <em>)seriesDataSourceNameForSeries:(NChartSeries </em>)series
{
  return @&ldquo;My series&rdquo;;
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}</p></li>
</ul>


<p>@end</p>

<p>```
&ndash; 效果</p>

<pre><code>- &lt;img src="http://pbking1.github.com/images/ios/ios_table1.png"&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS UILabel and UITextfield]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/25/ios-uilabel-and-uitextfield/"/>
    <updated>2014-06-25T03:00:33-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/25/ios-uilabel-and-uitextfield</id>
    <content type="html"><![CDATA[<h3>label</h3>

<ul>
<li>相当于android里面的textview</li>
<li>用setText来设置内容</li>
<li>setBackground来设置背景颜色</li>
</ul>


<!--more-->


<p>```</p>

<pre><code>UILabel *label1 = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 290, 44)];
[label1 setText:@"项目里程碑                          请选择&gt;"];
[label1 setBackgroundColor:[UIColor whiteColor]];
[self.view addSubview:label1];
</code></pre>

<p>```</p>

<h3>textfield</h3>

<ul>
<li>相当于android里面的edittext</li>
<li>用layer.cornerRadius设置圆角</li>
<li>placeholder设置hint，提示</li>
<li>貌似使用这些方法需要把UITextfield定义在.h里面</li>
</ul>


<p>```</p>

<pre><code>UITextField *text1 = [[UITextField alloc] initWithFrame:CGRectMake(10, 340, 290, 84)];
self.text1.placeholder = @"进度说明";
self.text1.layer.cornerRadius = 10;
[text1 setBackgroundColor:[UIColor whiteColor]];
[self.view addSubview:text1];
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS selector(jump to the other page)]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-selector-jump-to-the-other-page/"/>
    <updated>2014-06-24T23:02:32-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-selector-jump-to-the-other-page</id>
    <content type="html"><![CDATA[<h3>响应事件或者跳转</h3>

<ul>
<li>使用每个控件里面的action的selector</li>
</ul>


<!--more-->


<p><code>
UIBarButtonItem *leftbutton = [[UIBarButtonItem alloc] initWithTitle:@"cancel" style:UIBarButtonSystemItemDone target:self action:@selector(goBack)];
</code></p>

<ul>
<li>实现selector的跳转

<ul>
<li>定义要跳转到的页面的viewcontroller</li>
<li>用presentModalViewController跳转</li>
<li>用完记得释放资源</li>
</ul>
</li>
</ul>


<p>```
&ndash; (void)goBack{</p>

<pre><code>basicinfo *p1 = [[basicinfo alloc] init];
[self presentModalViewController:p1 animated:YES];
[p1 release];
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS UIButton]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-uibutton/"/>
    <updated>2014-06-24T23:01:58-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-uibutton</id>
    <content type="html"><![CDATA[<h3>IOS的button其实和其他的控件使用方法差不多</h3>

<ul>
<li>首先初始化button，用CGRectMake把控件画在view上</li>
<li>使用setTitle设置button的文字</li>
<li>使用layer来设置边界</li>
<li>用action里面设置selector来跳转或者响应事件</li>
</ul>


<!--more-->


<p>```</p>

<pre><code>UIButton *button1 = [[UIButton alloc] initWithFrame:CGRectMake(0, 420, 160, 44)];
[button1 setTitle:@"进度填报" forState:UIControlStateNormal];
//button1.backgroundColor = [UIColor colorWithRed:(12/255) green:(22/255) blue:(32/355) alpha:1.0];
[button1.layer setBorderWidth:1.0];
[button1 setTitleColor:[UIColor lightGrayColor] forState:UIControlStateNormal];
[button1 addTarget:self action:@selector(gotorenewpage:) forControlEvents:UIControlEventTouchUpInside];
[self.view addSubview:button1];
</code></pre>

<p>```</p>

<p>```
&ndash; (void)gotorenewpage:(UIButton *)paramSender{</p>

<pre><code>viewcontroller *p = [[viewcontroller alloc] init];
[self presentModalViewController:p animated:YES];
[p release];
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS segment control]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/24/ios-segment-control/"/>
    <updated>2014-06-24T23:01:49-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/24/ios-segment-control</id>
    <content type="html"><![CDATA[<h3>segment control</h3>

<ul>
<li>这一段是使用CGrectmake在view上直接按照坐标大小画segment control</li>
<li>因为tabbar只能按照默认的放在底部</li>
<li>因此要使用放在顶部的类似tabbar的效果有两种方式

<ul>
<li>一种就是segment control，每点击一个item就跳转到那个item对应的view那里</li>
<li>还有一种是使用button来仿造tabbar</li>
<li>不过总体来说还是button效果好一点</li>
</ul>
</li>
</ul>


<!--more-->


<p>```
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
//segment control
NSArray *items = [NSArray arrayWithObjects:@"关注项目", @"全部项目", nil];
UISegmentedControl *segmentedControl = [[UISegmentedControl alloc] initWithItems:items];
[segmentedControl setFrame:CGRectMake(15, 50, 300, 50)];  //画segment control
[segmentedControl addTarget:self action:@selector(segmentedControlChangedValue:) forControlEvents:UIControlEventValueChanged];  //响应事件
[segmentedControl setTag:1];
[self.view addSubview:segmentedControl];
[segmentedControl release];
</code></pre>

<p>}
```</p>

<ul>
<li>接下来通过使用不同的segmentControl里面的index来判断点了哪个，然后进行跳转</li>
</ul>


<p>```
&ndash; (void)segmentedControlChangedValue:(UISegmentedControl *)segmentedControl {</p>

<pre><code>NSInteger selectedindex = [segmentedControl selectedSegmentIndex];
if(selectedindex == 0){
    partViewController *p = [[partViewController alloc] init];
    [self presentModalViewController:p animated:YES];
    //[self dismissModalViewControllerAnimated:YES];
    [p release];
}else if(selectedindex == 1){
    allproViewController *a = [[allproViewController alloc] init];
    [self presentModalViewController:a animated:YES];
    //[self dismissModalViewControllerAnimated:YES];
    [a release];
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
