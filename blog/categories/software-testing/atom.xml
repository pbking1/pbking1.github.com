<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software_testing | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/software-testing/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-05-06T11:03:00-04:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[something basic  about software testing]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/20/something-basic-about-software-testing/"/>
    <updated>2014-06-20T08:24:14-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/20/something-basic-about-software-testing</id>
    <content type="html"><![CDATA[<h3>一些常识性的问题</h3>

<ul>
<li>软件测试者的目标是什么？

<ul>
<li>找bug，并且尽快的找到和修复</li>
</ul>
</li>
<li>在一个已经完成的产品上修复一个bug比在一开始就找到要难更多倍</li>
<li>为什么完全测试一个软件是不可能的？

<ul>
<li>因为太多输入输出</li>
<li>太多路径组合</li>
</ul>
</li>
<li>测试人员最重要的技能是编程</li>
</ul>


<!--more-->


<h3>Failure, Fault and Error</h3>

<ul>
<li>Failure

<ul>
<li>一个系统的状态出现不正确的行为</li>
</ul>
</li>
<li>Fault

<ul>
<li>也叫“bug”和“defect”</li>
<li>导致failure的原因</li>
</ul>
</li>
<li>Error

<ul>
<li>由于人类的错误导致的fault</li>
</ul>
</li>
<li>test oracle

<ul>
<li>一个用来判断测试是否通过的机制</li>
</ul>
</li>
</ul>


<h3>bug</h3>

<ul>
<li>编程错误比bug要多得多</li>
<li>不是所有的软件在发布之前都会被修复</li>
</ul>


<h3>Software Quarlity</h3>

<ul>
<li>要写出没有bug的程序是不可能的</li>
<li>有三个要素能够导致程序中的bug

<ul>
<li>程序的复杂性</li>
<li>程序的需求可变性</li>
<li>程序的需求不变性</li>
</ul>
</li>
</ul>


<h3>QA和QC</h3>

<ul>
<li>QA面向过程，QC面向产品</li>
<li>QA是制定方案确保系统能够达到目标</li>
<li>QC是指定方案来评估一个系统

<ul>
<li>validation

<ul>
<li>我们建立的系统是否是正确的</li>
</ul>
</li>
<li>verification

<ul>
<li>我们是否使用正确的方法的研发了系统</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>test stub 和 test driven(单元测试)</h3>

<ul>
<li>test stub

<ul>
<li>自顶向下， stub out</li>
</ul>
</li>
<li>test driver

<ul>
<li>自下而上</li>
</ul>
</li>
</ul>


<h3>PMOD</h3>

<ul>
<li>探索性测试方法</li>
<li>黑盒测试

<ul>
<li>忽略内部实现的测试</li>
</ul>
</li>
<li>白盒测试

<ul>
<li>基于分析代码逻辑的测试</li>
</ul>
</li>
<li>基于模型的测试</li>
</ul>


<h3>test oracle</h3>

<ul>
<li>用来检测待测系统在一个特定执行中的行为是否正确的方法</li>
</ul>


<h3>白盒测试</h3>

<ul>
<li>重点

<ul>
<li>动态白盒测试和调试的相似性</li>
<li>单元测试，集成测试，系统测试的等级划分和概念</li>
<li>测试驱动的概念（test driver）</li>
<li>测试的柱和桩的概念和区别</li>
</ul>
</li>
<li>考点

<ul>
<li>动态白盒测试

<ul>
<li>控制流：代码行，分支，条件，基本路径覆盖。循环至少走0次和1次。</li>
<li>数据流： 定义使用对，DCU，DPU，选择合适的测试用例进行覆盖

<ul>
<li>x的du-path

<ul>
<li>起点一定要是def(x)</li>
<li>终点一定要是p-use(x)或者c-use(x)</li>
</ul>
</li>
<li>def

<ul>
<li>用来定义变量

<ul>
<li>x = 0; def(x)</li>
<li><em>y = 1; def(</em>y)</li>
<li>scanf(&ldquo;%d %d&rdquo;. &amp;x, &amp;y); def(x), def(y)</li>
<li>int x[10]; def(x). def(x[0]), def(x[9])</li>
</ul>
</li>
</ul>
</li>
<li>undef

<ul>
<li>不可使用的变量

<ul>
<li>free(p); undef(*p)</li>
</ul>
</li>
</ul>
</li>
<li>定义使用对</li>
<li>Cuse, puse, 选择测试用例覆盖

<ul>
<li>c-use(x): x直接影响计算或者就是输出的一部分

<ul>
<li>y = x + 1;</li>
<li>printf(&ldquo;%d&rdquo;, x);</li>
</ul>
</li>
<li>p-use(x): x间接影响或者会影响一个控制流

<ul>
<li>if(x == 0) y = 1;</li>
<li>switch(x) case 1: &hellip; default:&hellip;</li>
<li>if(A[i + 1] > 0) return ;   p-use(A), p-use(i), p-use(A[i+1])</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>循环覆盖测试：循环要循环执行0次1次多次。  多次，如果没规定，尽量大。

<ul>
<li>如果有循环，用例必须包含0次和1次和多次，多次如果没有说明，随便选个数，如10）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>控制流</p>

<ul>
<li>基本快</li>
<li>分支</li>
<li>循环</li>
<li>基本路径</li>
<li>控制流图

<ul>
<li>用处是使得我们准备覆盖的路径是足够的</li>
<li>有三种

<ul>
<li>条件if （菱形）</li>
<li>合并merge（圆形）</li>
<li>执行computation（长方形）</li>
</ul>
</li>
</ul>
</li>
<li>覆盖

<ul>
<li>基本块覆盖

<ul>
<li>基本块：单入口，单出口，顺序执行</li>
<li>其实就是每一行代码（除了括号和do），然后如果有while和do，则do为一个汇集点指向下一句语句</li>
</ul>
</li>
<li>循环覆盖

<ul>
<li>有两个基本要点

<ul>
<li>一个是循环体</li>
<li>一个是控制条件(if)</li>
</ul>
</li>
<li>其实就是改变循环次数来达到覆盖循环的目的</li>
<li>一般是0，1，多次</li>
</ul>
</li>
<li>基本路径覆盖

<ul>
<li>基本路径集

<ul>
<li>可以用来组成其他路径的最小集合</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>数据流</p>

<ul>
<li>只关心数据的变化而不关心是否有判断条件或者循环</li>
</ul>
</li>
<li>逻辑</li>
<li>交互</li>
<li>突变</li>
</ul>


<h3>黑盒测试</h3>

<ul>
<li>三种级别

<ul>
<li>等级一

<ul>
<li>一个输入 &ndash;> 一个输出</li>
<li>等价类划分（划分输入区域成为等价类）

<ul>
<li>e.g 例如学号为07000-07100

<ul>
<li>求学号的等价类

<ul>
<li>首先是5位数

<ul>
<li>‘07050’</li>
</ul>
</li>
<li>小于07000的五位数

<ul>
<li>‘00000’</li>
</ul>
</li>
<li>大于07100的五位数

<ul>
<li>‘99999’</li>
</ul>
</li>
<li>小于五位数非空的数字

<ul>
<li>‘1’</li>
</ul>
</li>
<li>大于五位数非空的数字

<ul>
<li>‘99999999’</li>
</ul>
</li>
<li>有非数字的

<ul>
<li>‘aa1’</li>
<li>有三种（大于，小于和等于5位数的）</li>
</ul>
</li>
<li>空串

<ul>
<li>“ ”</li>
</ul>
</li>
<li>空

<ul>
<li>&ldquo;&rdquo;</li>
</ul>
</li>
<li>超长的

<ul>
<li>“999999999999999999999999999999999999”</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>边界值分析（对每个等价类进行边界值分析）

<ul>
<li>其实就是找边界值</li>
<li>e.g

<ul>
<li>有几个类</li>
<li>c1:(0,2)  c2:[2,5) c3:[5, 10000)</li>
<li>则c1的边界为0.001，1.999， 2</li>
<li>c2为2.001， 5</li>
<li>c3为5.001</li>
</ul>
</li>
<li>规律为(x,x), [x,x]

<ul>
<li>左边圆括号：x + 0.001</li>
<li>右边圆括号：x &ndash; 0.001(不是很清楚) 和 x</li>
<li>左边方括号：x + 0.001</li>
</ul>
</li>
</ul>
</li>
<li>因果图和决策表（通过把输入输出以边的形式来分析关联）

<ul>
<li>把起因和结果关联起来的图</li>
</ul>
</li>
</ul>
</li>
<li>等级二

<ul>
<li>多个输入 &ndash;> 一个输出</li>
<li>组合覆盖

<ul>
<li>覆盖每个t路交互至少一次</li>
</ul>
</li>
<li>带约束的组合覆盖

<ul>
<li>覆盖符合约束的所有参数组合</li>
<li>删除不可能的参数组合</li>
<li>删除冗余组合</li>
</ul>
</li>
</ul>
</li>
<li>等级三

<ul>
<li>多步多个输入 &ndash;> 一个输出</li>
<li>基于事件的覆盖

<ul>
<li>e.g 例如GUI程序 == 一系列事件</li>
</ul>
</li>
<li>基于状态的覆盖

<ul>
<li>e.g 例如GUI程序 == 一系列状态特征</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>自动测试工具</h3>

<ul>
<li>回归测试</li>
<li>接受测试</li>
<li>beta测试</li>
<li>alpha测试</li>
</ul>


<h3>测试文档</h3>

<ul>
<li>测试计划与测试方案的区别？

<ul>
<li>测试计划

<ul>
<li>组织管理层面</li>
<li> 对测试全过程的组织、资源、原则等进行规定和约束，并制定测试全过程各个阶段的任务及时间进度安排，提出对各项任务的评估、风险分析和需求管理。</li>
<li>也就是行动纲要</li>
</ul>
</li>
<li>测试方案

<ul>
<li>技术层面</li>
<li>描述需要测试的特性、测试的方法、测试环境的规划、测试工具的设计和选择、测试用例的设计方法、测试代码的设计方案。</li>
<li>也就是具体措施</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[quick black box testing on app]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/26/quick-black-box-testing-on-app/"/>
    <updated>2014-05-26T02:39:28-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/26/quick-black-box-testing-on-app</id>
    <content type="html"><![CDATA[<h3>some quick black box testing tools</h3>

<ul>
<li>calabash</li>
<li>appium</li>
<li>appgrader</li>
<li>monkey(adb 自带)</li>
</ul>


<!--more-->


<h3>and if you want to install app on the blue stack simulater</h3>

<ul>
<li>use SnapPea_apk_installer</li>
<li><a href="http://mac.softpedia.com/dyn-postdownload.php?p=133201&amp;t=0&amp;i=1">http://mac.softpedia.com/dyn-postdownload.php?p=133201&amp;t=0&amp;i=1</a></li>
</ul>


<h3>appium</h3>

<ul>
<li>how to install

<ul>
<li><code>brew install node</code>      # get node.js</li>
<li><code>npm install -g appium</code> # get appium</li>
<li><code>npm install wd</code>        # get appium client</li>
<li><code>appium &amp;</code>              # start appium</li>
<li><code>node your-appium-test.js</code></li>
</ul>
</li>
</ul>


<h3>monkey</h3>

<ul>
<li><p>Monkey测试是Android平台下自动化测试的一种快速有效的手段，通过Monkey工具可以模拟用户触摸屏幕、滑动轨迹球、按键等操作来对模拟器或者手机设备上的软件进行压力测试，检测该软件的稳定性、健壮性。它的原理是向系统发送伪随机的用户事件流（如按键输入、触摸输入、手势输入等），实现对正在开发的应用程序进行压力测试。</p></li>
<li><p>Monkey的特性
 -（1）测试的对象仅为应用程序包（apk包），有一定的局限性；
 -（2）Monkey测试使用的事件流数据流是随机的，不能进行自定义；
 -（3）可对MonkeyTest的对象、事件数量、类型、频率等进行设置。</p></li>
<li><p>Monkey测试的停止条件
  -（1）如果先顶了Monkey运行在一个或几个特定的包上，那么它会检测试图转到它包的操作，并对其进行阻止；
  -（2）如果应用程序崩溃或接收到任何失控异常，Monkey将停止并报错；
  -（3）如果应用程序产生了应用程序不响应（application not responding）的错误，Monkey将会停止并报错。
通过多次并且不同设定下的Monkey测试才算它是一个稳定性和健壮性足够的程序。</p></li>
<li><p>随着测试的深入，我们需要忽略App的崩溃（App的崩溃会导致Monkey测试的停止），而不是停住，monkey同样能做到。&mdash;ignore crashes
甚至，它还能生成profiling报告。 &mdash;hprof</p></li>
<li><p>Monkey具体参数的设定可参考：</p>

<ul>
<li><a href="http://developer.android.com/tools/help/monkey.html">http://developer.android.com/tools/help/monkey.html</a></li>
</ul>
</li>
<li><p>使用方法</p>

<ul>
<li>本方法基于mac上的bluestack模拟器</li>
<li>1.首先打开bluestack模拟器，然后进行<code>adb connect localhost:10001</code></li>
<li>2.显示连接上了之后，使用SnapPea_APK_Installer安装需要测试的apk</li>
<li>3.然后成功安装上之后。由于需要知道应用程序的主Activity，则用<code>adb shell</code>进入模拟器的系统，然后再<code>data/data</code>里面看名字，但是由于bluestack没有破解，所以权限不够，看不了</li>
<li>4.因此，用命令<code>adb shell monkey 100</code>,让他随机测一下，然后看看报的主程序名字是什么。

<ul>
<li>adb shell monkey [options]

<ul>
<li>如果不指定options，Monkey将以无反馈模式启动，并把事件任意发送到安装在目标环境中的全部包。下面是一个更为典型的命令行示例，它启动指定的应用程序，并向其发送1000个伪随机事件：</li>
</ul>
</li>
</ul>
</li>
<li>5.再用<code>adb shell monkey -p com.baofood -v 1000000 -hprof</code>去测试

<ul>
<li>monkey -p（package的意思）  指定文件名 -v（测试的次数和频率） number（次数）</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
