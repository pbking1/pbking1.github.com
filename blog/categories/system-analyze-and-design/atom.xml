<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: System_analyze_and_design | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/system-analyze-and-design/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2015-04-22T01:02:51-04:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java spring tutorial part1]]></title>
    <link href="http://pbking1.github.com/blog/2015/04/11/java-spring-tutorial-part1/"/>
    <updated>2015-04-11T15:41:46-04:00</updated>
    <id>http://pbking1.github.com/blog/2015/04/11/java-spring-tutorial-part1</id>
    <content type="html"><![CDATA[<h3>maven</h3>

<ul>
<li>make sure &lsquo;mvn -v&rsquo; return the current version in you computer</li>
<li>otherwise, install the maven first</li>
</ul>


<h3>Hello world</h3>

<ul>
<li>project hierarchy

<ul>
<li>helloworld (folder)

<ul>
<li>(root directory)</li>
<li>src

<ul>
<li>main

<ul>
<li>java

<ul>
<li>hello

<ul>
<li>Greeter.java</li>
<li>HelloWorld.java</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>target(auto generate after mvn install)

<ul>
<li>helloworld-0.1.0.jar</li>
</ul>
</li>
<li>pom.xml</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<h4>class</h4>

<ul>
<li><code>mkdir -p src/main/java/hello</code>

<ul>
<li>make a directory to put the java class</li>
</ul>
</li>
<li>create two class <code>HelloWorld.java</code> and <code>Greeter.java</code>

<ul>
<li><p>HelloWorld.java</p>

<ul>
<li><p>```
  package hello;</p>

<p>  import org.joda.time.LocalTime;</p>

<p>  public class HelloWorld{
      public static void main(String[] args){
          LocalTime currentTime = new LocalTime();
          System.out.println(&ldquo;The currentTime local time is &rdquo; + currentTime);
          Greeter greeter = new Greeter();
          System.out.println(greeter.sayHello());
      }
  }</p></li>
</ul>


<p>  ```</p></li>
<li><p>Greeter.java</p>

<ul>
<li><p>```
  package hello;</p>

<p>  public class Greeter {
      public String sayHello() {
          return &ldquo;Hello world!&rdquo;;
      }
  }
```</p></li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>configuration</h4>

<ul>
<li>pom.xml

<ul>
<li>put the file in the root of the project</li>
<li><p>```
  &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
  <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
      <modelVersion>4.0.0</modelVersion>
      <groupId>org.springframework</groupId>
      <artifactId>helloworld</artifactId>
      <packaging>jar</packaging>
      <version>0.1.0</version></p>

<pre><code>  &lt;!--- 插件 --&gt;
  &lt;dependencies&gt;
      &lt;dependency&gt;
          &lt;groupId&gt;joda-time&lt;/groupId&gt;
          &lt;artifactId&gt;joda-time&lt;/artifactId&gt;
          &lt;version&gt;2.2&lt;/version&gt;
      &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
      &lt;plugins&gt;
          &lt;plugin&gt;
              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
              &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;
              &lt;version&gt;2.1&lt;/version&gt;
              &lt;executions&gt;
                  &lt;execution&gt;
                      &lt;phase&gt;package&lt;/phase&gt;
                      &lt;goals&gt;
                          &lt;goal&gt;shade&lt;/goal&gt;
                      &lt;/goals&gt;
                      &lt;configuration&gt;
                          &lt;transformers&gt;
                              &lt;transformer
                                  implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt;
                                  &lt;mainClass&gt;hello.HelloWorld&lt;/mainClass&gt;
                              &lt;/transformer&gt;
                          &lt;/transformers&gt;
                      &lt;/configuration&gt;
                  &lt;/execution&gt;
              &lt;/executions&gt;
          &lt;/plugin&gt;
      &lt;/plugins&gt;
  &lt;/build&gt;
</code></pre>

<p>  </project>
```</p></li>
</ul>
</li>
</ul>


<h4>run the maven project</h4>

<ul>
<li>compile

<ul>
<li>mvn compile</li>
</ul>
</li>
<li>install

<ul>
<li>mvn install</li>
</ul>
</li>
<li>two ways to run

<ul>
<li>java -jar helloworld-0.1.0.jar</li>
<li>mvn exec:java -Dexec.mainClass=&ldquo;hello.HelloWorld&rdquo;</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML final exam note]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/11/the-note-of-the-uml-final-exam/"/>
    <updated>2014-06-11T02:45:34-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/11/the-note-of-the-uml-final-exam</id>
    <content type="html"><![CDATA[<h3>UML final exam note</h3>

<ul>
<li>3个小时</li>
</ul>


<h4>选择题</h4>

<ul>
<li>10个选择，一题2分</li>
<li>去看下up（书上第二章）。</li>
</ul>


<!--more-->


<h4>画图题</h4>

<ul>
<li>考试的时候把图导出来，贴到word里面</li>
<li>除了组件图</li>
<li>剩下的每个图18分钟</li>
<li><p>1.用例图</p>

<ul>
<li>给一个中文文档</li>
<li>用例是什么？

<ul>
<li>text，interaction（system和Actor）</li>
<li>fill goal(一切围绕)</li>
<li>用一个人，然后一个系统的服务来满足一个goal</li>
<li>有可能服务和goal名字一样</li>
<li>像数据库叫后台参与者</li>
<li>像银行那些叫支持性参与者</li>
<li>文档从头到尾只有一个人

<ul>
<li>有的时候可能有一个actress</li>
</ul>
</li>
<li>goal一定是动词或者动名词，来表达实现goal。

<ul>
<li>通常在开始或者结束</li>
</ul>
</li>
<li><p>看段落就好了，不用研究细节</p></li>
<li><p>0分</p>

<ul>
<li>用例图里面出现主菜单，什么什么界面，什么什么功能（功能倾向）</li>
<li>有操作流程倾向（不要画得有顺序）</li>
<li>只要出现就完蛋</li>
<li>没框（boundry）扣一分

<ul>
<li>画了框没写名字扣一分</li>
<li>定范围</li>
</ul>
</li>
<li>Actor主要参与者一定画在图的左边

<ul>
<li>画了管理员扣一分</li>
</ul>
</li>
<li>goal写在框里面也就是椭圆里面的东西

<ul>
<li>一定要有extend或者include</li>
<li>一定要是虚线，实线就会被扣分</li>
<li>箭头方向一定要是正确的，extend指向goal，include相反</li>
<li>主要的节点有两个至三个include或者extend</li>
<li>名字要是动词，不能是名词Actor和用例相连的图，一定要用没有箭头的实线相连</li>
<li>外部子系统一定要画出来</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2.活动图</p>

<ul>
<li>考一个用例的活动图</li>
<li>一定有一个用例在里面</li>
<li>表示控制权的转移</li>
<li>准则

<ul>
<li>老板准则

<ul>
<li>如果画了登陆（扣1分）</li>
</ul>
</li>
<li>基本应用过程准则

<ul>
<li>东西不能太大</li>
<li>把东西说详细</li>
</ul>
</li>
<li>size

<ul>
<li>规模不能太大</li>
<li>单操作的东西不要画</li>
</ul>
</li>
</ul>
</li>
<li>每个用例一定都能找到一个UI</li>
<li>不能include，不然就违背了size准则</li>
<li>简化的写就好了</li>
<li>还有一种多泳道的图

<ul>
<li>考试不考</li>
</ul>
</li>
</ul>
</li>
<li>3.状态图

<ul>
<li>其实把状态计画好了就行了</li>
<li>定义状态

<ul>
<li>把步骤写出来就好了</li>
<li>基本上不用太在意细节</li>
</ul>
</li>
<li>状态图是时间的生命周期</li>
<li>条件的变迁采用guard</li>
<li>考试

<ul>
<li>一定要找到guard</li>
<li>怎么起名？

<ul>
<li>不能说“按continue”，而要说“选房间”</li>
<li>要说用户做的外部事件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>4.领域模型（概念类图）</p>

<ul>
<li>识别一个用例里面的名词</li>
<li>太多动词或者太多线，就0分</li>
<li>一定要找概念（抽象出类）</li>
<li>通常Actor不要画在属性里面</li>
<li>扣分点

<ul>
<li>如果写了button，则扣分</li>
<li>如果出现database，扣分</li>
<li>在一个领域模型里面，这两个东西首要不要出现</li>
<li>命名必须是名词，不能使动词，用了就完蛋</li>
<li>属性给一些重要的就可以了，不要画一个图全部都没有属性的</li>
<li>不要在属性里面写操作！</li>
<li>关联

<ul>
<li>如果关联出现箭头而不是直线</li>
<li>则扣分</li>
<li>箭头一般都是include，所以不要画箭头</li>
<li>关联上一定要有名字（包含contain）</li>
<li>记得写多重性</li>
</ul>
</li>
</ul>
</li>
<li>在一段文档中经常出现的名词，一定要挑出来</li>
<li>抽象出的类不能出现复数或者抽象数据类型</li>
<li>描述类就赶紧加上</li>
<li>写在框里面的名词不能无中生有</li>
</ul>
</li>
<li><p>5.顺序图</p>

<ul>
<li>要用（BCE规则）画</li>
<li>用来表达一个场景的人机交互的事件的序列</li>
<li>一般是表达主场景和频繁出现的</li>
<li>考试考主场景

<ul>
<li>用户达成目标的最便捷的方式</li>
<li>或者最期望的方式</li>
<li>主场景没有if条件</li>
<li>既然是系统顺序图，第一个对象一定是system，不然就0分</li>
<li>要加“：”

<ul>
<li>表示对象</li>
</ul>
</li>
<li>在User后面的那个就是”:System”</li>
</ul>
</li>
</ul>
</li>
<li><p>6.包图</p>

<ul>
<li>比较容易，也比较简洁</li>
<li>使用MVC，来构建城市模型（考题）</li>
<li>然后把需要的类和控制器填到三个package里面</li>
<li>把界面放在视图层</li>
</ul>
</li>
<li><p>7.交互图</p>

<ul>
<li>注意起名字</li>
<li>和顺序图内容差不多</li>
<li>和包图里面的MVC的三个包内容一致

<ul>
<li>比如view就要再包图的view包里面</li>
</ul>
</li>
<li>去官网看一下老师发给教程

<ul>
<li>讲的比较详细</li>
</ul>
</li>
</ul>
</li>
<li><p>8.设计类图</p>

<ul>
<li>把控制器和实体类画进去</li>
<li>除了控制器之外，其他的东西和领域模型里面是一样的</li>
<li>属性的关联一定要实现</li>
</ul>
</li>
<li><p>9.部署图（附加题）</p>

<ul>
<li>差不多的</li>
<li>部署条件是告诉你的</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phonegap 框架原理]]></title>
    <link href="http://pbking1.github.com/blog/2014/06/06/phonegap-kuang-jia-yuan-li/"/>
    <updated>2014-06-06T05:03:43-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/06/06/phonegap-kuang-jia-yuan-li</id>
    <content type="html"><![CDATA[<h4>phonegap 实现原理</h4>

<ul>
<li><code>关键</code>

<ul>
<li>1.用webview在本地来渲染解析html

<ul>
<li><strong>因此实际上他就是一个内嵌的浏览器</strong>

<ul>
<li>类似于一个WebView，但是phonegap对webview做了些改造</li>
</ul>
</li>
</ul>
</li>
<li>2.基于plugin模式来封装调用原生API

<ul>
<li>以原生app的方式来运行</li>
<li>用js调用原生的功能</li>
</ul>
</li>
<li>3.在框架首次启动的时候加载CallbackServer线程，并且监听前端XHR请求和链表中有无数据

<ul>
<li>当XHR请求来了而链表为空，则线程等待10秒

<ul>
<li>如果这个时间内有数据来，那么就唤醒线程把数据传到前端</li>
</ul>
</li>
<li>如果10s后没有数据，则传空数据回前端</li>
<li><code>基于服务器推技术</code></li>
</ul>
</li>
<li>4.同步请求和异步请求有关键的区别</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><code>他如何实现跨平台的</code>

<ul>
<li>phonegap在每一种中都实现了一套后台的框架，分别和每个平台的API进行交互，从而调用它的原生API，然后对应开发人员提供统一的接口，也就是phonegap的API。</li>
<li>因此，开发人员只需要使用web技术就可以对移动平台进行快速开发</li>
<li>而且跨平台也是只是前端跨平台。</li>
</ul>
</li>
<li><code>这个开源的项目的贡献者</code>

<ul>
<li>这个开源项目中IBM贡献的代码比创始者（温哥华的一家小公司）还多。</li>
<li>Apache Cordova是phongap贡献给apache的一个开源项目

<ul>
<li>他有phonegap里面的核心代码</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>phonegap的优点</h4>

<ul>
<li>app的前台兼容性好</li>
<li>标准化， 由于使用的是W3C标准，所以web前端可直接用于web app。</li>
<li>js+html5和java+xml很像</li>
<li>装起来也不麻烦，用起来比较容易</li>
<li>提供硬件访问</li>
</ul>


<h4>phonegap的缺点</h4>

<ul>
<li>反应很慢（亲身实践过）</li>
<li>交互很差</li>
<li>内存消耗大

<ul>
<li>有人做过测试，和用java写android对比，phonegap明显消耗更多内存</li>
<li>而且释放内存很慢</li>
</ul>
</li>
<li>调试也麻烦</li>
</ul>


<h4>有谁在用</h4>

<ul>
<li>wikipedia

<ul>
<li>它的移动应用就是用phonegap写的</li>
</ul>
</li>
<li>Facebook

<ul>
<li>移动版SDK的一部分是cordova的一个分支</li>
</ul>
</li>
<li>Salesforce

<ul>
<li>移动版的SDK的一部分是cordova的一个分支</li>
</ul>
</li>
<li>IBM

<ul>
<li>移动平台建立在phonegap上</li>
<li>并且积极参与到phonegap的开发里面</li>
</ul>
</li>
<li>Microsoft

<ul>
<li>正在积极参与windows phone的那一部分的开发</li>
</ul>
</li>
<li>Adobe

<ul>
<li>2011年Adobe收购了phonegap得私人开发商Notibi，并将phonegap贡献给apache并且开源</li>
</ul>
</li>
<li>blackberry</li>
<li>zynga

<ul>
<li>用phonegap和html5写了不少很好的游戏</li>
</ul>
</li>
<li>cisco</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic idea of MVC]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/03/basic-idea-of-mvc/"/>
    <updated>2014-05-03T09:21:20-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/03/basic-idea-of-mvc</id>
    <content type="html"><![CDATA[<h3>What is MVC?</h3>

<ul>
<li>MVC模式（Model-View-Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</li>
<li>MVC在这几年应该被非常多的人所熟悉了，因为相当多的web框架采用的是这套架构，此外，早在MFC横行的年代，MFC所采用的document/view架构也是MVC架构的变种。包括QT，它的model/view亦是如此。只不过它们都将MVC中的view和controller的功能整合到了一起。</li>
<li>MVC的全称是model-view-controller architecture，最早被用在了smalltalk语言中。MVC最适合用在交互式的应用程序中。</li>
</ul>


<!--more-->


<h3>The component of it</h3>

<ul>
<li>View

<ul>
<li>V：View，就是所谓的视图，是用户看到并与之交互的界面。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Macromedia Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services.</li>
</ul>
</li>
<li>Model

<ul>
<li>M：Model，就是所谓的模型，表示企业数据和业务规则。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。</li>
</ul>
</li>
<li>Controller

<ul>
<li>C：Controller，就是所谓的控制管理器，是用来同步M与V的。控制器接受用户的输入并调用模型和视图去完成用户的需求。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后用确定用哪个视图来显示模型处理返回的数据。</li>
</ul>
</li>
</ul>


<h3>MVC architecture</h3>

<ul>
<li>从下图中，可以看出控制器就是一个中枢，MVC的处理过程就是在用户产生行为，提交表单的时候，由Controller来制定哪一个Model来对用户行为进行处理，并且在处理后将结果返回给View，用以给用户进行显示。</li>
<li><img src="/images/system_anaylze_mvc1.png"></li>
</ul>


<h3>Something important about MVC</h3>

<ul>
<li>1.MVC将数据的维护和数据的呈现，与用户的交互割裂了。Model负责的是数据的维护，就好比是DB和文件要保存数据一样，可以认为它是process。而view负责的是数据的呈现，把数据通过某种形式在用户面前展现，把它看做是output。

<ul>
<li>而controller负责的是处理用户的输入。它提供一个窗口或者是控件供用户输入数据，它就是input。所以，一个MVC架构，就是将交互式程序的process，input和output解耦合。</li>
</ul>
</li>
<li>2.第二点更为重要，就是model与view和controller之间的联系。任何一个MVC框架都必须提供一个“change-propagation mechenism”(变更-传播机制)。而这个变更-传播机制是MVC框架中model和view以及controller之间的唯一的联系（The  change-propagation mechanism  is  the  only  link  between  the model and the views and controllers）。

<ul>
<li>比如说，一个用户通过controller改变了model中的数据，那么model会使用变更-传播机制来通知和它有关的view和controller，使得view去刷新数据和重新显示。</li>
<li>有很多人总是对于MVC架构不能够熟练掌握，核心问题就在于他在使用MVC架构的时候是看不到变更-传播系统的，所以对于MVC架构的内在运行机制无法了解。</li>
</ul>
</li>
</ul>


<h3>The process of MVC</h3>

<ul>
<li><img src="/images/system_anaylze_mvc2.png"></li>
<li>1.用户操作controller，相当于调用controller的handleEvent函数；</li>
<li>2.handleEvent函数实际上调用的是model中的成员函数，对model中的数据进行操作；</li>
<li>3.model中的数据被调用完成后，model会执行自身的notify函数；</li>
<li>4.notify函数会调用和这个model有关的所有view和controller的update函数；</li>
<li>5.update函数会调用各自的display函数和getData函数；</li>
<li>6.当这一切都完成时，handleEvent才返回；</li>
</ul>


<h3>MVC usage</h3>

<ul>
<li><p>Android中界面部分也采用了当前比较流行的MVC框架，在Android中：</p>

<ul>
<li>视图（View）

<ul>
<li>一般采用XML文件进行界面的描述，使用的时候可以非常方便的引入。当然，如何你对Android了解的比较的多了话，就一定可以想到在Android中也可以使用JavaScript+HTML等的方式作为View层，当然这里需要进行Java和JavaScript之间的通信，幸运的是，Android提供了它们之间非常方便的通信实现。</li>
</ul>
</li>
<li>控制器（Controller）

<ul>
<li>Android的控制层的重任通常落在了众多的Acitvity的肩上，这句话也就暗含了不要在Acitivity中写代码，要通过Activity交割Model业务逻辑层处理，这样做的另外一个原因是Android中的Acitivity的响应时间是5s，如果耗时的操作放在这里，程序就很容易被回收掉。</li>
</ul>
</li>
<li>模型（Model）

<ul>
<li>对数据库的操作、对网络等的操作都应该在Model里面处理，当然对业务计算等操作也是必须放在的该层的。就是应用程序中二进制的数据。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog on github page]]></title>
    <link href="http://pbking1.github.com/blog/2014/04/20/blog-on-github-page/"/>
    <updated>2014-04-20T01:32:38-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/04/20/blog-on-github-page</id>
    <content type="html"><![CDATA[<h3>什么是github？</h3>

<p><img src="/images/github1.png"></p>

<ul>
<li>是一个免费的用与存放git版本控制的软件代码和内容项目。</li>
<li>每个项目都有一个主页，列出项目的源文件</li>
</ul>


<h3>什么是github page？</h3>

<ul>
<li>为了使的网页简洁易懂，github就设计了pages功能</li>
<li>pages功能允许用户自定义项目首页，用来代替默认的源码列表

<ul>
<li>也就是说github page可以被认为是用户编写的，托管在github上的静态网页。</li>
</ul>
</li>
<li>github提供模板，允许站内生成网页，但也允许用户自己编写网页，然后上传。

<ul>
<li>但是这种上传并不是单纯的上传，而是会经过Jekyll程序的再处理。</li>
</ul>
</li>
</ul>


<!--more-->


<p><img src="/images/git2.png"></p>

<h3>什么是jekyll?</h3>

<p><img src="/images/jekyll1.png"></p>

<ul>
<li>Jekyll（发音/&lsquo;dʒiːk əl/，"杰克尔")</li>
<li>jekyll是一个静态站点生成器</li>
<li>它会根据网页源码生成静态文件。它提供了模板、变量、插件等功能，所以实际上可以用来编写整个网站。</li>
<li>因此

<ul>
<li>你先在本地编写符合Jekyll规范的网站源码，然后上传到github，由github生成并托管整个网站。</li>
</ul>
</li>
<li>但是由于他生成的是静态网页，因此要添加评论功能或者其他的选择较少</li>
<li><p>并且没有数据库，所以如果网站也越大，生成时间越长。</p></li>
<li><p>目录结构
<code>
/jekyll_demo
　　　　|--　_config.yml
　　　　|--　_layouts
　　　　|　　　|--　default.html
　　　　|--　_posts
　　　　|　　　|--　2012-08-25-hello-world.html
　　　　|--　index.html
</code></p></li>
<li><p>通过简单的几条指令就可以更新博客了
<code>
git add .
git commit -m "first post"
git remote add origin https://github.com/username/jekyll_demo.git
git push origin gh-pages
</code></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
