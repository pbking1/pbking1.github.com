<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: System_analyze_and_design | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/system-analyze-and-design/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2014-05-03T21:25:11+08:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Idea of MVC]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/03/basic-idea-of-mvc/"/>
    <updated>2014-05-03T21:21:20+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/03/basic-idea-of-mvc</id>
    <content type="html"><![CDATA[<h3>What is MVC?</h3>

<ul>
<li>MVC在这几年应该被非常多的人所熟悉了，因为相当多的web框架采用的是这套架构，此外，早在MFC横行的年代，MFC所采用的document/view架构也是MVC架构的变种。包括QT，它的model/view亦是如此。只不过它们都将MVC中的view和controller的功能整合到了一起。</li>
<li>MVC的全称是model-view-controller architecture，最早被用在了smalltalk语言中。MVC最适合用在交互式的应用程序中。</li>
</ul>


<h3>The component of it</h3>

<ul>
<li>View

<ul>
<li>V：View，就是所谓的视图，是用户看到并与之交互的界面。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Macromedia Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services.</li>
</ul>
</li>
<li>Model

<ul>
<li>M：Model，就是所谓的模型，表示企业数据和业务规则。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。</li>
</ul>
</li>
<li>Controller

<ul>
<li>C：Controller，就是所谓的控制管理器，是用来同步M与V的。控制器接受用户的输入并调用模型和视图去完成用户的需求。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后用确定用哪个视图来显示模型处理返回的数据。</li>
</ul>
</li>
</ul>


<h3>MVC architecture</h3>

<ul>
<li>从下图中，可以看出控制器就是一个中枢，MVC的处理过程就是在用户产生行为，提交表单的时候，由Controller来制定哪一个Model来对用户行为进行处理，并且在处理后将结果返回给View，用以给用户进行显示。</li>
<li><img src="/images/system_anaylze_mvc1.png"></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog on Github Page]]></title>
    <link href="http://pbking1.github.com/blog/2014/04/20/blog-on-github-page/"/>
    <updated>2014-04-20T13:32:38+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/04/20/blog-on-github-page</id>
    <content type="html"><![CDATA[<h3>什么是github？</h3>

<p><img src="/images/github1.png"></p>

<ul>
<li>是一个免费的用与存放git版本控制的软件代码和内容项目。</li>
<li>每个项目都有一个主页，列出项目的源文件</li>
</ul>


<h3>什么是github page？</h3>

<ul>
<li>为了使的网页简洁易懂，github就设计了pages功能</li>
<li>pages功能允许用户自定义项目首页，用来代替默认的源码列表

<ul>
<li>也就是说github page可以被认为是用户编写的，托管在github上的静态网页。</li>
</ul>
</li>
<li>github提供模板，允许站内生成网页，但也允许用户自己编写网页，然后上传。

<ul>
<li>但是这种上传并不是单纯的上传，而是会经过Jekyll程序的再处理。</li>
</ul>
</li>
</ul>


<!--more-->


<p><img src="/images/git2.png"></p>

<h3>什么是jekyll?</h3>

<p><img src="/images/jekyll1.png"></p>

<ul>
<li>Jekyll（发音/&lsquo;dʒiːk əl/，"杰克尔")</li>
<li>jekyll是一个静态站点生成器</li>
<li>它会根据网页源码生成静态文件。它提供了模板、变量、插件等功能，所以实际上可以用来编写整个网站。</li>
<li>因此

<ul>
<li>你先在本地编写符合Jekyll规范的网站源码，然后上传到github，由github生成并托管整个网站。</li>
</ul>
</li>
<li>但是由于他生成的是静态网页，因此要添加评论功能或者其他的选择较少</li>
<li><p>并且没有数据库，所以如果网站也越大，生成时间越长。</p></li>
<li><p>目录结构
<code>
/jekyll_demo
　　　　|--　_config.yml
　　　　|--　_layouts
　　　　|　　　|--　default.html
　　　　|--　_posts
　　　　|　　　|--　2012-08-25-hello-world.html
　　　　|--　index.html
</code></p></li>
<li><p>通过简单的几条指令就可以更新博客了
<code>
git add .
git commit -m "first post"
git remote add origin https://github.com/username/jekyll_demo.git
git push origin gh-pages
</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Uml Homework of System Analyze and Design]]></title>
    <link href="http://pbking1.github.com/blog/2014/04/20/10-uml-homework-of-system-analyze-and-design/"/>
    <updated>2014-04-20T12:57:18+08:00</updated>
    <id>http://pbking1.github.com/blog/2014/04/20/10-uml-homework-of-system-analyze-and-design</id>
    <content type="html"><![CDATA[<h3>1. 概念类图（Conceptual Class Diagram / Domian Model）</h3>

<ul>
<li><p>实验目的：</p>

<ul>
<li><ol>
<li>掌握概念类图的涵义和内容</li>
</ol>
</li>
<li><ol>
<li>掌握概念类图的绘制方法</li>
</ol>
</li>
<li><ol>
<li>掌握概念类图的使用范围</li>
</ol>
</li>
</ul>
</li>
<li><p>实验内容：</p></li>
<li><ol>
<li>Read the game description of &ldquo;Priests and Devils&rdquo; .</li>
</ol>
</li>
<li><p>Priests and Devils
  Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!</p></li>
<li><p>and play the game ( <a href="http://www.flash-game.net/game/2535/priests-and-devils.html">http://www.flash-game.net/game/2535/priests-and-devils.html</a> ) first.</p></li>
<li><ol>
<li>识别游戏中出现的概念，并画出概念类图。要求给出类、属性、以及类之间的关联（建议有多重性）。</li>
</ol>
</li>
</ul>


<!--more-->


<ul>
<li>首先概念类图就是领域模型,是对领域内的概念类或者现实世界 对象的可视化表示。并且领域模型并不是对软件对象的描述,他是现 实世界领域中的概念和想象可视化。他不需要方法。</li>
<li>其次是设计领域模型的步骤。</li>
<li>首先从业务中抽取名词,然后从提取出来的名词中中总结业务实 体,区分名词汇中的属性,角色,实体和实例,形成问题域中的操作 实体的集合。其次是从业务实体集合中抽象业务模型,简历问题域的 概念。最后是用 UML 提供的方法和图例进行领域模型的设计,确定 模型之间的关系。</li>
<li>因此我们可以从文本中抽取出包含的类 Priest, Devil, puzzleGame, River, RiverSide, Boat, 另外还有 Player, Clock 类。
<img src="/images/hw1.jpg"></li>
</ul>


<h3>2. 活动图（Activity Diagram）</h3>

<ul>
<li><p>实验目的：</p>

<ul>
<li>1.掌握活动图的涵义和内容</li>
<li>2.掌握活动图的绘制方法</li>
<li>3.掌握活动图的使用范围</li>
</ul>
</li>
<li><p>实验内容：</p>

<ul>
<li>1.选择你熟悉银行的ATM机器，仔细研究观察“人”“机器”对话交互，实现取钱功能的过程。</li>
<li>2.用活动图画出用户取钱的过程。</li>
</ul>
</li>
<li>解题思路

<ul>
<li>1.活动图

<ul>
<li>活动图是UML用于对系统的动态行为建模的另外一种常用工具，他描述活动的顺序展现从一个活动到另外一个活动的控制流。活动图的本质上是一种流程图。</li>
<li>活动图着重表现从一个活动到另外一个活动的控制流。</li>
<li>也表示一个过程中的多个顺序活动和并行活动。</li>
<li>一旦某个动作完成，紧接着或有一个自动的向外转换。面向对象，着重表现系统的行为而不是处理的顺序。</li>
</ul>
</li>
<li>2.简单的控制流图包含操作，控制流，初始节点，活动最终节点，决策节点，合并节点，注释</li>
<li>3.本体的信息如下

<ul>
<li>活动主体：用户 ATM机，银行</li>
<li>大致流程：插卡，输入密码，输入取款金额，取款，取卡</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><img src="/images/hw2.jpg"></p>

<h3>3. 状态机图（State Machine Diagram）</h3>

<ul>
<li>实验目的：

<ul>
<li>1.掌握状态机图的涵义和内容</li>
<li>2.掌握状态机图的绘制方法</li>
<li>3.掌握状态机图的使用范围</li>
</ul>
</li>
<li><p>实验内容：</p></li>
<li><p>1.Read the material of &ldquo;simple digital watch&rdquo;</p>

<ul>
<li>simple digital watch</li>
<li>A simple digital watch has a display and two buttons to set it, the A button and the B button. The watch has two modes of operation, display time and set time. In the display time mode, hours and minutes are displayed, separated by a flashing colon.
The set time mode has two sub-modes, set hours and set minutes. The A button is used to select modes. Each time A is pressed, the mode advances in sequence: display, set hours, set minutes, display etc. Within the sub-modes, the B button is used to advance the hours or minutes once each time it is pressed. Buttons must be released before they can generate another event.</li>
</ul>
</li>
<li><p>2.Prepare a state diagram of the watch.</p></li>
<li><p>3.解题思路</p>

<ul>
<li>1.状态机图

<ul>
<li>状态机图显示了对象的生命周期：对象经历的时间，对象的转换和对象在这些时间之间的状态。而且不需要描述所有可能的时间，只需要为具有复杂行为的依赖对象简历状态机图就可以了。</li>
</ul>
</li>
<li>2.状态机图的组件

<ul>
<li>事件，状态和转换</li>
</ul>
</li>
<li>3.题目解析

<ul>
<li>题意翻译如下：

<ul>
<li>有一块电子表，有显示模式，设置时间模式（分为小时和分钟两种子模式），A按钮切换模式，B按钮则是在设置模式下调整时间，按钮不能同时按下去。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>4.则很容易得出状态机图为
<img src="/images/hw3.jpg"></p></li>
<li><p>To be continued&hellip;&hellip;</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
