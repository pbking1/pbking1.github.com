<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | KING]]></title>
  <link href="http://pbking1.github.com/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://pbking1.github.com/"/>
  <updated>2014-10-23T10:49:48-04:00</updated>
  <id>http://pbking1.github.com/</id>
  <author>
    <name><![CDATA[pb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Database_and_backend_injection]]></title>
    <link href="http://pbking1.github.com/blog/2014/10/23/database-and-backend-injection/"/>
    <updated>2014-10-23T09:13:16-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/10/23/database-and-backend-injection</id>
    <content type="html"><![CDATA[<h3>database ER diagram</h3>

<ul>
<li><img src="/images/php_project/lab4_db.jpg"></li>
<li>some change in the database relationship</li>
<li><img src="http://pbking1.github.com/images/php_project/database_lingma_structure.png" style="height: 300px; width: 300px"></li>
<li>we have

<ul>
<li>T_ADMIN</li>
<li>T_USER</li>
<li>T_USER_CLASS</li>
<li>T_PROJECT</li>
<li>T_PRO_LEVEL</li>
<li>T_PROJECT_STATISTICS</li>
<li>T_TASK</li>
<li>T_SUBTASK</li>
<li>T_MATERIAL</li>
<li>T_CUSTOMER</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><img src="http://pbking1.github.com/images/php_project/1.png" ></li>
<li><img src="/images/php_project/1.png"></li>
<li><img src="/images/php_project/2.png"></li>
<li><img src="/images/php_project/3.png"></li>
<li><img src="/images/php_project/4.png"></li>
<li><img src="/images/php_project/5.png"></li>
<li><img src="/images/php_project/6.png"></li>
<li><img src="/images/php_project/7.png"></li>
<li><img src="/images/php_project/8.png"></li>
<li><img src="/images/php_project/9.png"></li>
<li><img src="/images/php_project/10.png">

<h3>database insertion</h3></li>
<li><p>database connection
<code>
$conn = mysql_connect("localhost","pengbin","pengbin");
mysql_select_db("pengbin_db", $conn);
</code></p></li>
<li><p>database insertion
<code>
$sql = "insert into T_CUSTOMER (CustomerName, CustomerAddress, Notes, Active) values ('$_POST[name]','$_POST[address]','$_POST[note]','$_POST[Active]')";
mysql_query($sql, $conn);
</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 Sysu Database Project Step1]]></title>
    <link href="http://pbking1.github.com/blog/2014/05/13/2014-sysu-database-project-step1/"/>
    <updated>2014-05-13T03:20:32-04:00</updated>
    <id>http://pbking1.github.com/blog/2014/05/13/2014-sysu-database-project-step1</id>
    <content type="html"><![CDATA[<h3>问题描述</h3>

<ul>
<li><strong>任务 1: 不带压缩地导入数据</strong>

<ul>
<li>这个任务要求你实现分页存储机制。

<ul>
<li>此处仅考虑定长的数据类型。对于每一列,需要将所含的定长数据如同数组 一样存储在磁盘上的页中 (更多解释见下文)。每一页的大小是固定的,可以是 4K,8K 或 16K。</li>
</ul>
</li>
<li>在这个任务中,你需要存储 ORDERS 表中的

<ul>
<li>1.O_ORDERKEY</li>
<li>2.O_CUSTKEY</li>
<li>3.O_TOTALPRICE</li>
<li>4.O_SHIPPRIORITY</li>
</ul>
</li>
<li>不同列的数据类型不一样,具体请参考 TPC-H 的文档。存储之后,你需要 提供接口,以便于查询记录。查询时,要求实现给定一条记录的 ORDERKEY, 返回这条记录的 CUSTKEY,TOTALPRICE 和 SHIPPRIORITY。</li>
<li>查询接口的具体要求,请参考提交一节。</li>
<li>这个存储系统必须有能力处理 1G 以上的数据。允许存入内存里的页的数量 为 128。在实现这个限制之外,可以尝试其他限制并做对比。你可能需要学习 LRU 等换页机制来加速数据导入。</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><strong>任务 2: 外排序和 RLE 压缩</strong>

<ul>
<li>本任务要求使用行程长度编码 (Run-Length Encoding) 方式压缩数据,并 将 ORDERS 表和 CUSTOMER 表以 CUSTKEY 进行 JOIN 操作。在进行压 缩前,需对数据做外排序 (见下文说明)。</li>
</ul>
</li>
</ul>


<h3>存储结构</h3>

<ul>
<li>请注意在这个项目中,磁盘的读写操作都必须以二进制模式进行。</li>
<li>对于一个页,由于数据定长,一列可以以数组形态存在于内存中。例如,按照以下形式声明的数组,

<ul>
<li><code>int page[1024]</code></li>
<li>可以表示一个大小为 4K 的页。使用以下代码,可以将一页写出, <code>fwrite(page, sizeof(int), 1024, f)</code>;</li>
<li>以上代码仅供参考。具体实现时可能情况更为复杂。</li>
</ul>
</li>
<li>对于一个未压缩的页,数据按如下方式按顺序排列,需要读取指定数据时, 通过下标取出对应位置的数据。

<ul>
<li><code>&lt;Val1&gt;&lt;Val2&gt;&lt;Val3&gt;&lt;Val4&gt;...</code></li>
</ul>
</li>
<li>对于压缩的页,则按如下方式排列在数组中。请先自行学习行程长度编码。

<ul>
<li><code>&lt;Val1&gt;&lt;RunLength1&gt;&lt;Val2&gt;&lt;RunLength2&gt;&lt;Val3&gt;&lt;RunLength3&gt;...</code></li>
</ul>
</li>
<li>一页可以是 4K,8K 或 64K。</li>
</ul>


<h3>外排序</h3>

<ul>
<li>在做 JOIN 之前,需要进行外排序。

<ul>
<li>简单地说,需要先分别读进每 128 页 进行排序,得到一个个顺串。然后同时对所有顺串进行归并,归并后的结果即 为排好序的数据。请参考维基百科上的说明自行学习和实现。</li>
</ul>
</li>
<li>外排序需要同时处理 ORDERS 表的 CUSTKEY 列和 ORDERKEY 列,按照 CUSTKEY 进行排列,如下图所示,</li>
<li>排完序后,CUSTKEY 的连续重复项更多了,即可对该列进行 RLE 压缩。 完成压缩后,请统计压缩效率。</li>
<li><img src="/images/database2014pro/1.png"></li>
</ul>


<h3>step1 code</h3>

<p>```</p>

<h1>include<iostream></h1>

<h1>include<fstream></h1>

<h1>include<string></h1>

<h1>include<algorithm></h1>

<h1>include<cstdlib></h1>

<p>using namespace std;</p>

<p>struct database_attr{</p>

<pre><code>int orderkey;
int custkey;
int totalprice;
int prior;
</code></pre>

<p>};
database_attr p[1024];</p>

<p>int main(){</p>

<pre><code>fstream fin;
char buf[200];
string str[10][1001];
string data[5][1001];
int data1[5][1001];
int data2[5][1001];
fin.open("store_test.tbl");
int row = 0;
int col;
int n = 9;
while(!fin.eof()){
    row = 0;
    fin.getline(buf, 200, '\n');
    for(int i = 0; buf[i] != '\0';){
        if(buf[i] == '|' &amp;&amp; n &gt; 0){
            row++;
            i++;
            n--;
        }else if(buf[i] != '|' &amp;&amp; n &gt; 0){
            str[row][col] += buf[i];
            i++;
        }
    }
    n = 9;
    col++;
}

for(int i = 0; i &lt; 9; i++){
    for(int j = 0; j &lt; 1000; j++){
    //  cout&lt;&lt;str[i][j]&lt;&lt;" ";
    }
    //cout&lt;&lt;endl;
}
//store the data in column
for(int i = 0; i &lt; 9; i++){
    for(int j = 0; j &lt; 1000; j++){
        if(i == 0){
            data[i][j] = str[i][j];
        }
        if(i == 1){
            data[i][j] = str[i][j];
        }
        if(i == 3){
            data[i - 1][j] = str[i][j];
        }
        if(i == 7){
            data[i - 4][j] = str[i][j];
        }       
    }
}
for(int i = 0; i &lt; 4; i++){
    for(int j = 0; j &lt; 1000; j++){
        //cout&lt;&lt;data[i][j]&lt;&lt;" ";
    }
    //cout&lt;&lt;endl;
}
//check the data use the index
/*
int ok;
cin&gt;&gt;ok;
cout&lt;&lt;data[1][ok]&lt;&lt;" "&lt;&lt;data[2][ok]&lt;&lt;" "&lt;&lt;data[3][ok]&lt;&lt;endl;
*/
fin.close();
//change the string array into int array
int i, j;
for(i = 0; i &lt; 4; i++){
    for(j = 0; j &lt; 1000; j++){
        data1[i][j] = atoi(data[i][j].c_str());
    }
}

for(i = 0; i &lt; 4; i++){
    for(j = 0; j &lt; 1000; j++){
        data2[i][j] = data1[i][j];
        if(j &lt; 10)
            cout&lt;&lt;data2[i][j]&lt;&lt;" ";
    }
    cout&lt;&lt;endl;
}

//store the array into struct array
for(i = 0; i &lt; 4; i++){
    for(j = 0; j &lt; 1000; j++){
        p[j].orderkey = data2[0][j];
        p[j].custkey = data2[1][j];
        p[j].totalprice = data2[2][j];
        p[j].prior = data2[3][j];
    }
}

cout&lt;&lt;"The id 1 has "&lt;&lt;p[0].orderkey&lt;&lt;" "&lt;&lt;p[0].custkey&lt;&lt;" "&lt;&lt;p[0].totalprice&lt;&lt;" "&lt;&lt;p[0].prior&lt;&lt;endl;
return 0;
</code></pre>

<p>}</p>

<p>```</p>

<h3>step2 code</h3>

<ul>
<li>to be continued</li>
</ul>

]]></content>
  </entry>
  
</feed>
